
TouchSwitch_F103NUCLEO_V1.0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aec  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007374  08007374  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08007374  08007374  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007374  08007374  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007378  08007378  00017378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800737c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  200000cc  08007448  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  08007448  00021558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd42  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000414b  00000000  00000000  0003be3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00041368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b0e  00000000  00000000  000424d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012235  00000000  00000000  00053fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058658  00000000  00000000  0006621b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be873  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000546c  00000000  00000000  000be8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000cc 	.word	0x200000cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006870 	.word	0x08006870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d0 	.word	0x200000d0
 80001dc:	08006870 	.word	0x08006870

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <SystemInit+0x60>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <SystemInit+0x60>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <SystemInit+0x64>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <SystemInit+0x64>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <SystemInit+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <SystemInit+0x64>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <SystemInit+0x64>)
 80002ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <SystemInit+0x64>)
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <SystemInit+0x68>)
 80002ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <SystemInit+0x64>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <SystemInit+0x64>)
 80002c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SystemInit+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80002ce:	f000 f88f 	bl	80003f0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <SystemInit+0x60>)
 80002d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002d8:	609a      	str	r2, [r3, #8]
#endif
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	40023800 	.word	0x40023800
 80002e8:	24003010 	.word	0x24003010

080002ec <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b087      	sub	sp, #28
 80002f0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	2302      	movs	r3, #2
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	2302      	movs	r3, #2
 8000304:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f003 030c 	and.w	r3, r3, #12
 800030e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	2b08      	cmp	r3, #8
 8000314:	d011      	beq.n	800033a <SystemCoreClockUpdate+0x4e>
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	2b08      	cmp	r3, #8
 800031a:	d844      	bhi.n	80003a6 <SystemCoreClockUpdate+0xba>
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <SystemCoreClockUpdate+0x3e>
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d004      	beq.n	8000332 <SystemCoreClockUpdate+0x46>
 8000328:	e03d      	b.n	80003a6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800032a:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 800032c:	4a2d      	ldr	r2, [pc, #180]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 800032e:	601a      	str	r2, [r3, #0]
      break;
 8000330:	e03d      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 8000334:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <SystemCoreClockUpdate+0xfc>)
 8000336:	601a      	str	r2, [r3, #0]
      break;
 8000338:	e039      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800033a:	4b28      	ldr	r3, [pc, #160]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	0d9b      	lsrs	r3, r3, #22
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800034e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d00c      	beq.n	8000370 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000356:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <SystemCoreClockUpdate+0xfc>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	4a1f      	ldr	r2, [pc, #124]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000360:	6852      	ldr	r2, [r2, #4]
 8000362:	0992      	lsrs	r2, r2, #6
 8000364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	617b      	str	r3, [r7, #20]
 800036e:	e00b      	b.n	8000388 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000370:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	fbb2 f3f3 	udiv	r3, r2, r3
 8000378:	4a18      	ldr	r2, [pc, #96]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800037a:	6852      	ldr	r2, [r2, #4]
 800037c:	0992      	lsrs	r2, r2, #6
 800037e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	0c1b      	lsrs	r3, r3, #16
 800038e:	f003 0303 	and.w	r3, r3, #3
 8000392:	3301      	adds	r3, #1
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000398:	697a      	ldr	r2, [r7, #20]
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a0:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003a2:	6013      	str	r3, [r2, #0]
      break;
 80003a4:	e003      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 80003aa:	601a      	str	r2, [r3, #0]
      break;
 80003ac:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	091b      	lsrs	r3, r3, #4
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	4a0c      	ldr	r2, [pc, #48]	; (80003ec <SystemCoreClockUpdate+0x100>)
 80003ba:	5cd3      	ldrb	r3, [r2, r3]
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	fa22 f303 	lsr.w	r3, r2, r3
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003cc:	6013      	str	r3, [r2, #0]
}
 80003ce:	bf00      	nop
 80003d0:	371c      	adds	r7, #28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800
 80003e0:	20000000 	.word	0x20000000
 80003e4:	00f42400 	.word	0x00f42400
 80003e8:	017d7840 	.word	0x017d7840
 80003ec:	20000004 	.word	0x20000004

080003f0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SetSysClock+0x94>)
 80003f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f8:	4a22      	ldr	r2, [pc, #136]	; (8000484 <SetSysClock+0x94>)
 80003fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fe:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <SetSysClock+0x98>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <SetSysClock+0x98>)
 8000406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800040a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800040c:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SetSysClock+0x94>)
 800040e:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <SetSysClock+0x94>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SetSysClock+0x94>)
 8000416:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <SetSysClock+0x94>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <SetSysClock+0x94>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <SetSysClock+0x94>)
 8000422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000426:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <SetSysClock+0x94>)
 800042a:	4a18      	ldr	r2, [pc, #96]	; (800048c <SetSysClock+0x9c>)
 800042c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SetSysClock+0x94>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <SetSysClock+0x94>)
 8000434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000438:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800043a:	bf00      	nop
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <SetSysClock+0x94>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <SetSysClock+0xa0>)
 800044a:	f240 6202 	movw	r2, #1538	; 0x602
 800044e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <SetSysClock+0x94>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <SetSysClock+0x94>)
 8000456:	f023 0303 	bic.w	r3, r3, #3
 800045a:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <SetSysClock+0x94>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a08      	ldr	r2, [pc, #32]	; (8000484 <SetSysClock+0x94>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000468:	bf00      	nop
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <SetSysClock+0x94>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	f003 030c 	and.w	r3, r3, #12
 8000472:	2b08      	cmp	r3, #8
 8000474:	d1f9      	bne.n	800046a <SetSysClock+0x7a>
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800
 8000488:	40007000 	.word	0x40007000
 800048c:	08015410 	.word	0x08015410
 8000490:	40023c00 	.word	0x40023c00

08000494 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000498:	2101      	movs	r1, #1
 800049a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800049e:	f000 ff89 	bl	80013b4 <RCC_APB2PeriphResetCmd>

  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80004a2:	2100      	movs	r1, #0
 80004a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004a8:	f000 ff84 	bl	80013b4 <RCC_APB2PeriphResetCmd>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	60fb      	str	r3, [r7, #12]

  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80004ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004d2:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80004de:	4313      	orrs	r3, r2
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	60fb      	str	r3, [r7, #12]

  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <ADC_Init+0xa8>)
 80004f6:	4013      	ands	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000502:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 8000508:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000510:	4313      	orrs	r3, r2
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	4313      	orrs	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	60fb      	str	r3, [r7, #12]

  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800052a:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	7d1b      	ldrb	r3, [r3, #20]
 8000530:	3b01      	subs	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	7afb      	ldrb	r3, [r7, #11]
 8000536:	4313      	orrs	r3, r2
 8000538:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800053a:	7afb      	ldrb	r3, [r7, #11]
 800053c:	051b      	lsls	r3, r3, #20
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	4313      	orrs	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	c0fff7fd 	.word	0xc0fff7fd

0800055c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <ADC_CommonInit+0x48>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	60fb      	str	r3, [r7, #12]

  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <ADC_CommonInit+0x4c>)
 8000572:	4013      	ands	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler |
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 800057e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler |
 8000584:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 800058a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	4313      	orrs	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]

  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <ADC_CommonInit+0x48>)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	6053      	str	r3, [r2, #4]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40012300 	.word	0x40012300
 80005a8:	fffc30e0 	.word	0xfffc30e0

080005ac <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f043 0201 	orr.w	r2, r3, #1
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80005ca:	e005      	b.n	80005d8 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f023 0201 	bic.w	r2, r3, #1
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	609a      	str	r2, [r3, #8]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4603      	mov	r3, r0
 80005f4:	70fb      	strb	r3, [r7, #3]
 80005f6:	460b      	mov	r3, r1
 80005f8:	70bb      	strb	r3, [r7, #2]
 80005fa:	4613      	mov	r3, r2
 80005fc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000606:	78fb      	ldrb	r3, [r7, #3]
 8000608:	2b09      	cmp	r3, #9
 800060a:	d923      	bls.n	8000654 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	f1a3 020a 	sub.w	r2, r3, #10
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	2207      	movs	r2, #7
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	43db      	mvns	r3, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4013      	ands	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000630:	7879      	ldrb	r1, [r7, #1]
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	f1a3 020a 	sub.w	r2, r3, #10
 8000638:	4613      	mov	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4413      	add	r3, r2
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4313      	orrs	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	e01e      	b.n	8000692 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800065a:	78fa      	ldrb	r2, [r7, #3]
 800065c:	4613      	mov	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4413      	add	r3, r2
 8000662:	2207      	movs	r2, #7
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	43db      	mvns	r3, r3
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000674:	7879      	ldrb	r1, [r7, #1]
 8000676:	78fa      	ldrb	r2, [r7, #3]
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	4313      	orrs	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000692:	78bb      	ldrb	r3, [r7, #2]
 8000694:	2b06      	cmp	r3, #6
 8000696:	d821      	bhi.n	80006dc <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069c:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800069e:	78bb      	ldrb	r3, [r7, #2]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	221f      	movs	r2, #31
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	60bb      	str	r3, [r7, #8]

    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	43db      	mvns	r3, r3
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80006ba:	78f9      	ldrb	r1, [r7, #3]
 80006bc:	78bb      	ldrb	r3, [r7, #2]
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	4613      	mov	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	60bb      	str	r3, [r7, #8]

    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;

    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80006da:	e047      	b.n	800076c <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80006dc:	78bb      	ldrb	r3, [r7, #2]
 80006de:	2b0c      	cmp	r3, #12
 80006e0:	d821      	bhi.n	8000726 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80006e8:	78bb      	ldrb	r3, [r7, #2]
 80006ea:	1fda      	subs	r2, r3, #7
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	221f      	movs	r2, #31
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	43db      	mvns	r3, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	4013      	ands	r3, r2
 8000702:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000704:	78f9      	ldrb	r1, [r7, #3]
 8000706:	78bb      	ldrb	r3, [r7, #2]
 8000708:	1fda      	subs	r2, r3, #7
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	fa01 f303 	lsl.w	r3, r1, r3
 8000714:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4313      	orrs	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000724:	e022      	b.n	800076c <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800072c:	78bb      	ldrb	r3, [r7, #2]
 800072e:	f1a3 020d 	sub.w	r2, r3, #13
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	221f      	movs	r2, #31
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	43db      	mvns	r3, r3
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800074a:	78f9      	ldrb	r1, [r7, #3]
 800074c:	78bb      	ldrb	r3, [r7, #2]
 800074e:	f1a3 020d 	sub.w	r2, r3, #13
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	609a      	str	r2, [r3, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 80007b6:	e005      	b.n	80007c4 <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	609a      	str	r2, [r3, #8]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	f043 0202 	orr.w	r2, r3, #2
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 80007ee:	e005      	b.n	80007fc <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	f023 0202 	bic.w	r2, r3, #2
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	609a      	str	r2, [r3, #8]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000828:	60fb      	str	r3, [r7, #12]

  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	3b01      	subs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	035b      	lsls	r3, r3, #13
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4313      	orrs	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]

  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	605a      	str	r2, [r3, #4]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d006      	beq.n	800086c <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 800086a:	e005      	b.n	8000878 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	605a      	str	r2, [r3, #4]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d006      	beq.n	80008a4 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80008a2:	e005      	b.n	80008b0 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	609a      	str	r2, [r3, #8]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d006      	beq.n	80008dc <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 80008da:	e005      	b.n	80008e8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	609a      	str	r2, [r3, #8]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f023 0201 	bic.w	r2, r3, #1
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2221      	movs	r2, #33	; 0x21
 800092a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a46      	ldr	r2, [pc, #280]	; (8000a48 <DMA_DeInit+0x154>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d103      	bne.n	800093c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000934:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <DMA_DeInit+0x158>)
 8000936:	223d      	movs	r2, #61	; 0x3d
 8000938:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800093a:	e07e      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a44      	ldr	r2, [pc, #272]	; (8000a50 <DMA_DeInit+0x15c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d104      	bne.n	800094e <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000944:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <DMA_DeInit+0x158>)
 8000946:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800094a:	609a      	str	r2, [r3, #8]
}
 800094c:	e075      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <DMA_DeInit+0x160>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d104      	bne.n	8000960 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000956:	4b3d      	ldr	r3, [pc, #244]	; (8000a4c <DMA_DeInit+0x158>)
 8000958:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800095c:	609a      	str	r2, [r3, #8]
}
 800095e:	e06c      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a3d      	ldr	r2, [pc, #244]	; (8000a58 <DMA_DeInit+0x164>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d104      	bne.n	8000972 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <DMA_DeInit+0x158>)
 800096a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800096e:	609a      	str	r2, [r3, #8]
}
 8000970:	e063      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <DMA_DeInit+0x168>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d103      	bne.n	8000982 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <DMA_DeInit+0x158>)
 800097c:	4a38      	ldr	r2, [pc, #224]	; (8000a60 <DMA_DeInit+0x16c>)
 800097e:	60da      	str	r2, [r3, #12]
}
 8000980:	e05b      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a37      	ldr	r2, [pc, #220]	; (8000a64 <DMA_DeInit+0x170>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d103      	bne.n	8000992 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <DMA_DeInit+0x158>)
 800098c:	4a36      	ldr	r2, [pc, #216]	; (8000a68 <DMA_DeInit+0x174>)
 800098e:	60da      	str	r2, [r3, #12]
}
 8000990:	e053      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a35      	ldr	r2, [pc, #212]	; (8000a6c <DMA_DeInit+0x178>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d103      	bne.n	80009a2 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <DMA_DeInit+0x158>)
 800099c:	4a34      	ldr	r2, [pc, #208]	; (8000a70 <DMA_DeInit+0x17c>)
 800099e:	60da      	str	r2, [r3, #12]
}
 80009a0:	e04b      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <DMA_DeInit+0x180>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d104      	bne.n	80009b4 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <DMA_DeInit+0x158>)
 80009ac:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80009b0:	60da      	str	r2, [r3, #12]
}
 80009b2:	e042      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a30      	ldr	r2, [pc, #192]	; (8000a78 <DMA_DeInit+0x184>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d103      	bne.n	80009c4 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <DMA_DeInit+0x188>)
 80009be:	223d      	movs	r2, #61	; 0x3d
 80009c0:	609a      	str	r2, [r3, #8]
}
 80009c2:	e03a      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a2e      	ldr	r2, [pc, #184]	; (8000a80 <DMA_DeInit+0x18c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d104      	bne.n	80009d6 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <DMA_DeInit+0x188>)
 80009ce:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80009d2:	609a      	str	r2, [r3, #8]
}
 80009d4:	e031      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <DMA_DeInit+0x190>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d104      	bne.n	80009e8 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <DMA_DeInit+0x188>)
 80009e0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80009e4:	609a      	str	r2, [r3, #8]
}
 80009e6:	e028      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <DMA_DeInit+0x194>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d104      	bne.n	80009fa <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <DMA_DeInit+0x188>)
 80009f2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80009f6:	609a      	str	r2, [r3, #8]
}
 80009f8:	e01f      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <DMA_DeInit+0x198>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d103      	bne.n	8000a0a <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <DMA_DeInit+0x188>)
 8000a04:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <DMA_DeInit+0x16c>)
 8000a06:	60da      	str	r2, [r3, #12]
}
 8000a08:	e017      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <DMA_DeInit+0x19c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d103      	bne.n	8000a1a <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <DMA_DeInit+0x188>)
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <DMA_DeInit+0x174>)
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00f      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <DMA_DeInit+0x1a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d103      	bne.n	8000a2a <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <DMA_DeInit+0x188>)
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <DMA_DeInit+0x17c>)
 8000a26:	60da      	str	r2, [r3, #12]
}
 8000a28:	e007      	b.n	8000a3a <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <DMA_DeInit+0x1a4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d103      	bne.n	8000a3a <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <DMA_DeInit+0x188>)
 8000a34:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000a38:	60da      	str	r2, [r3, #12]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40026010 	.word	0x40026010
 8000a4c:	40026000 	.word	0x40026000
 8000a50:	40026028 	.word	0x40026028
 8000a54:	40026040 	.word	0x40026040
 8000a58:	40026058 	.word	0x40026058
 8000a5c:	40026070 	.word	0x40026070
 8000a60:	2000003d 	.word	0x2000003d
 8000a64:	40026088 	.word	0x40026088
 8000a68:	20000f40 	.word	0x20000f40
 8000a6c:	400260a0 	.word	0x400260a0
 8000a70:	203d0000 	.word	0x203d0000
 8000a74:	400260b8 	.word	0x400260b8
 8000a78:	40026410 	.word	0x40026410
 8000a7c:	40026400 	.word	0x40026400
 8000a80:	40026428 	.word	0x40026428
 8000a84:	40026440 	.word	0x40026440
 8000a88:	40026458 	.word	0x40026458
 8000a8c:	40026470 	.word	0x40026470
 8000a90:	40026488 	.word	0x40026488
 8000a94:	400264a0 	.word	0x400264a0
 8000a98:	400264b8 	.word	0x400264b8

08000a9c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <DMA_Init+0xac>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ac6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ad2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ade:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000aea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f023 0307 	bic.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO:
    Set DMDIS bits according to DMA_FIFOMode value
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4313      	orrs	r3, r2
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691a      	ldr	r2, [r3, #16]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60da      	str	r2, [r3, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	f01c803f 	.word	0xf01c803f

08000b4c <DMA_Cmd>:
  *        this single data is finished.
  *
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f043 0201 	orr.w	r2, r3, #1
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000b6a:	e005      	b.n	8000b78 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f023 0201 	bic.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e076      	b.n	8000c8e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d165      	bne.n	8000c88 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	401a      	ands	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d003      	beq.n	8000bfa <GPIO_Init+0x76>
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d12e      	bne.n	8000c58 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2103      	movs	r1, #3
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	795b      	ldrb	r3, [r3, #5]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	2301      	movs	r3, #1
 8000c34:	408b      	lsls	r3, r1
 8000c36:	43db      	mvns	r3, r3
 8000c38:	401a      	ands	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	7992      	ldrb	r2, [r2, #6]
 8000c46:	4611      	mov	r1, r2
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	b292      	uxth	r2, r2
 8000c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c50:	b292      	uxth	r2, r2
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	79db      	ldrb	r3, [r3, #7]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d985      	bls.n	8000ba0 <GPIO_Init+0x1c>
    }
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691a      	ldr	r2, [r3, #16]
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e001      	b.n	8000cc8 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	887a      	ldrh	r2, [r7, #2]
 8000ce6:	831a      	strh	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	835a      	strh	r2, [r3, #26]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	807b      	strh	r3, [r7, #2]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000d22:	787b      	ldrb	r3, [r7, #1]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000d2e:	e002      	b.n	8000d36 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	835a      	strh	r2, [r3, #26]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b085      	sub	sp, #20
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	807b      	strh	r3, [r7, #2]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d5a:	787a      	ldrb	r2, [r7, #1]
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	210f      	movs	r1, #15
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	8879      	ldrh	r1, [r7, #2]
 8000d8c:	08c9      	lsrs	r1, r1, #3
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	4608      	mov	r0, r1
 8000d92:	ea02 0103 	and.w	r1, r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f100 0208 	add.w	r2, r0, #8
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	08db      	lsrs	r3, r3, #3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000de2:	2300      	movs	r3, #0
 8000de4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000de6:	2304      	movs	r3, #4
 8000de8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000dea:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <I2C_Init+0x174>)
 8000dec:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	889b      	ldrh	r3, [r3, #4]
 8000df2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000df4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000df6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dfa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f9c9 	bl	8001198 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	4a4f      	ldr	r2, [pc, #316]	; (8000f4c <I2C_Init+0x178>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	0c9b      	lsrs	r3, r3, #18
 8000e14:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000e16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e22:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	f023 0301 	bic.w	r3, r3, #1
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a44      	ldr	r2, [pc, #272]	; (8000f50 <I2C_Init+0x17c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d815      	bhi.n	8000e6e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d801      	bhi.n	8000e5a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000e56:	2304      	movs	r3, #4
 8000e58:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000e5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000e62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e64:	3301      	adds	r3, #1
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	841a      	strh	r2, [r3, #32]
 8000e6c:	e040      	b.n	8000ef0 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	88db      	ldrh	r3, [r3, #6]
 8000e72:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d109      	bne.n	8000e8e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e8c:	e00e      	b.n	8000eac <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	009a      	lsls	r2, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eaa:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000eac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d103      	bne.n	8000ebe <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000eb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000ebe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ec0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ece:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000ed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <I2C_Init+0x180>)
 8000edc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee0:	1192      	asrs	r2, r2, #6
 8000ee2:	17db      	asrs	r3, r3, #31
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ef4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f0e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000f12:	f023 0302 	bic.w	r3, r3, #2
 8000f16:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	889a      	ldrh	r2, [r3, #4]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	895b      	ldrh	r3, [r3, #10]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f26:	4313      	orrs	r3, r2
 8000f28:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f2e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	899a      	ldrh	r2, [r3, #12]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	891b      	ldrh	r3, [r3, #8]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	811a      	strh	r2, [r3, #8]
}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	007a1200 	.word	0x007a1200
 8000f4c:	431bde83 	.word	0x431bde83
 8000f50:	000186a0 	.word	0x000186a0
 8000f54:	10624dd3 	.word	0x10624dd3

08000f58 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d008      	beq.n	8000f7c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000f7a:	e007      	b.n	8000f8c <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	f023 0301 	bic.w	r3, r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	801a      	strh	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d008      	beq.n	8000fbc <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000fba:	e007      	b.n	8000fcc <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	801a      	strh	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000ffa:	e007      	b.n	800100c <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001006:	b29a      	uxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	801a      	strh	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	70fb      	strb	r3, [r7, #3]
 8001036:	e003      	b.n	8001040 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	821a      	strh	r2, [r3, #16]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d008      	beq.n	8001078 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001076:	e007      	b.n	8001088 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	801a      	strh	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	821a      	strh	r2, [r3, #16]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	8a1b      	ldrh	r3, [r3, #16]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8a9b      	ldrh	r3, [r3, #20]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	8b1b      	ldrh	r3, [r3, #24]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	041b      	lsls	r3, r3, #16
 80010fe:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	4313      	orrs	r3, r2
 8001106:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800110a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	4013      	ands	r3, r2
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d102      	bne.n	800111e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001118:	2301      	movs	r3, #1
 800111a:	75fb      	strb	r3, [r7, #23]
 800111c:	e001      	b.n	8001122 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001122:	7dfb      	ldrb	r3, [r7, #23]
}
 8001124:	4618      	mov	r0, r3
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	0f1b      	lsrs	r3, r3, #28
 800114e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001156:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3314      	adds	r3, #20
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e005      	b.n	8001172 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3318      	adds	r3, #24
 8001170:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	4013      	ands	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800117e:	2301      	movs	r3, #1
 8001180:	75fb      	strb	r3, [r7, #23]
 8001182:	e001      	b.n	8001188 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001188:	7dfb      	ldrb	r3, [r7, #23]
}
 800118a:	4618      	mov	r0, r3
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	2302      	movs	r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011b8:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d011      	beq.n	80011ec <RCC_GetClocksFreq+0x54>
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d844      	bhi.n	8001258 <RCC_GetClocksFreq+0xc0>
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <RCC_GetClocksFreq+0x44>
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d004      	beq.n	80011e4 <RCC_GetClocksFreq+0x4c>
 80011da:	e03d      	b.n	8001258 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a42      	ldr	r2, [pc, #264]	; (80012e8 <RCC_GetClocksFreq+0x150>)
 80011e0:	601a      	str	r2, [r3, #0]
    break;
 80011e2:	e03d      	b.n	8001260 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a41      	ldr	r2, [pc, #260]	; (80012ec <RCC_GetClocksFreq+0x154>)
 80011e8:	601a      	str	r2, [r3, #0]
    break;
 80011ea:	e039      	b.n	8001260 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011ec:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	0d9b      	lsrs	r3, r3, #22
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f8:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001200:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001208:	4a38      	ldr	r2, [pc, #224]	; (80012ec <RCC_GetClocksFreq+0x154>)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	4a34      	ldr	r2, [pc, #208]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 8001212:	6852      	ldr	r2, [r2, #4]
 8001214:	0992      	lsrs	r2, r2, #6
 8001216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	e00b      	b.n	800123a <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001222:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <RCC_GetClocksFreq+0x150>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 800122c:	6852      	ldr	r2, [r2, #4]
 800122e:	0992      	lsrs	r2, r2, #6
 8001230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	0c1b      	lsrs	r3, r3, #16
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	3301      	adds	r3, #1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
    break;
 8001256:	e003      	b.n	8001260 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <RCC_GetClocksFreq+0x150>)
 800125c:	601a      	str	r2, [r3, #0]
    break;
 800125e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001268:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <RCC_GetClocksFreq+0x158>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	40da      	lsrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001290:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	0a9b      	lsrs	r3, r3, #10
 8001296:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001298:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <RCC_GetClocksFreq+0x158>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	40da      	lsrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <RCC_GetClocksFreq+0x14c>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80012b8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	0b5b      	lsrs	r3, r3, #13
 80012be:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <RCC_GetClocksFreq+0x158>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	40da      	lsrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	60da      	str	r2, [r3, #12]
}
 80012d8:	bf00      	nop
 80012da:	3724      	adds	r7, #36	; 0x24
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40023800 	.word	0x40023800
 80012e8:	00f42400 	.word	0x00f42400
 80012ec:	017d7840 	.word	0x017d7840
 80012f0:	20000014 	.word	0x20000014

080012f4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800130a:	4909      	ldr	r1, [pc, #36]	; (8001330 <RCC_AHB1PeriphClockCmd+0x3c>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4313      	orrs	r3, r2
 8001310:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001312:	e006      	b.n	8001322 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	43db      	mvns	r3, r3
 800131c:	4904      	ldr	r1, [pc, #16]	; (8001330 <RCC_AHB1PeriphClockCmd+0x3c>)
 800131e:	4013      	ands	r3, r2
 8001320:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <RCC_APB1PeriphClockCmd+0x3c>)
 8001348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800134a:	4909      	ldr	r1, [pc, #36]	; (8001370 <RCC_APB1PeriphClockCmd+0x3c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4313      	orrs	r3, r2
 8001350:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001352:	e006      	b.n	8001362 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <RCC_APB1PeriphClockCmd+0x3c>)
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	43db      	mvns	r3, r3
 800135c:	4904      	ldr	r1, [pc, #16]	; (8001370 <RCC_APB1PeriphClockCmd+0x3c>)
 800135e:	4013      	ands	r3, r2
 8001360:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800

08001374 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800138a:	4909      	ldr	r1, [pc, #36]	; (80013b0 <RCC_APB2PeriphClockCmd+0x3c>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4313      	orrs	r3, r2
 8001390:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001392:	e006      	b.n	80013a2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	43db      	mvns	r3, r3
 800139c:	4904      	ldr	r1, [pc, #16]	; (80013b0 <RCC_APB2PeriphClockCmd+0x3c>)
 800139e:	4013      	ands	r3, r2
 80013a0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <RCC_APB2PeriphResetCmd+0x3c>)
 80013c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ca:	4909      	ldr	r1, [pc, #36]	; (80013f0 <RCC_APB2PeriphResetCmd+0x3c>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80013d2:	e006      	b.n	80013e2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <RCC_APB2PeriphResetCmd+0x3c>)
 80013d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4904      	ldr	r1, [pc, #16]	; (80013f0 <RCC_APB2PeriphResetCmd+0x3c>)
 80013de:	4013      	ands	r3, r2
 80013e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <TIM_TimeBaseInit+0xbc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <TIM_TimeBaseInit+0x44>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <TIM_TimeBaseInit+0xc0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00f      	beq.n	8001438 <TIM_TimeBaseInit+0x44>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141e:	d00b      	beq.n	8001438 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <TIM_TimeBaseInit+0xc4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <TIM_TimeBaseInit+0x44>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a24      	ldr	r2, [pc, #144]	; (80014bc <TIM_TimeBaseInit+0xc8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d003      	beq.n	8001438 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <TIM_TimeBaseInit+0xcc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d108      	bne.n	800144a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800143e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	885a      	ldrh	r2, [r3, #2]
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	4313      	orrs	r3, r2
 8001448:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <TIM_TimeBaseInit+0xd0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00c      	beq.n	800146c <TIM_TimeBaseInit+0x78>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <TIM_TimeBaseInit+0xd4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d008      	beq.n	800146c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001460:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	891a      	ldrh	r2, [r3, #8]
 8001466:	89fb      	ldrh	r3, [r7, #14]
 8001468:	4313      	orrs	r3, r2
 800146a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	89fa      	ldrh	r2, [r7, #14]
 8001470:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	881a      	ldrh	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <TIM_TimeBaseInit+0xbc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d003      	beq.n	8001492 <TIM_TimeBaseInit+0x9e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <TIM_TimeBaseInit+0xc0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d104      	bne.n	800149c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	7a9b      	ldrb	r3, [r3, #10]
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	829a      	strh	r2, [r3, #20]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40010000 	.word	0x40010000
 80014b4:	40010400 	.word	0x40010400
 80014b8:	40000400 	.word	0x40000400
 80014bc:	40000800 	.word	0x40000800
 80014c0:	40000c00 	.word	0x40000c00
 80014c4:	40001000 	.word	0x40001000
 80014c8:	40001400 	.word	0x40001400

080014cc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80014ee:	e007      	b.n	8001500 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	801a      	strh	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	817b      	strh	r3, [r7, #10]
 800151a:	2300      	movs	r3, #0
 800151c:	81fb      	strh	r3, [r7, #14]
 800151e:	2300      	movs	r3, #0
 8001520:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	8c1b      	ldrh	r3, [r3, #32]
 8001526:	b29b      	uxth	r3, r3
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	8c1b      	ldrh	r3, [r3, #32]
 8001536:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	889b      	ldrh	r3, [r3, #4]
 800153c:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	8b1b      	ldrh	r3, [r3, #24]
 8001542:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001544:	897b      	ldrh	r3, [r7, #10]
 8001546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800154a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	897b      	ldrh	r3, [r7, #10]
 800155a:	4313      	orrs	r3, r2
 800155c:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	f023 0302 	bic.w	r3, r3, #2
 8001564:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	899a      	ldrh	r2, [r3, #12]
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	4313      	orrs	r3, r2
 800156e:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	885a      	ldrh	r2, [r3, #2]
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	4313      	orrs	r3, r2
 8001578:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <TIM_OC1Init+0xec>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d003      	beq.n	800158a <TIM_OC1Init+0x7e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <TIM_OC1Init+0xf0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d123      	bne.n	80015d2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	f023 0308 	bic.w	r3, r3, #8
 8001590:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	89da      	ldrh	r2, [r3, #14]
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	4313      	orrs	r3, r2
 800159a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	889a      	ldrh	r2, [r3, #4]
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80015ae:	89bb      	ldrh	r3, [r7, #12]
 80015b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80015b6:	89bb      	ldrh	r3, [r7, #12]
 80015b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015bc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	8a1a      	ldrh	r2, [r3, #16]
 80015c2:	89bb      	ldrh	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	8a5a      	ldrh	r2, [r3, #18]
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	89ba      	ldrh	r2, [r7, #12]
 80015d6:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	897a      	ldrh	r2, [r7, #10]
 80015dc:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	89fa      	ldrh	r2, [r7, #14]
 80015ea:	841a      	strh	r2, [r3, #32]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40010000 	.word	0x40010000
 80015fc:	40010400 	.word	0x40010400

08001600 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	817b      	strh	r3, [r7, #10]
 800160e:	2300      	movs	r3, #0
 8001610:	81fb      	strh	r3, [r7, #14]
 8001612:	2300      	movs	r3, #0
 8001614:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8c1b      	ldrh	r3, [r3, #32]
 800161a:	b29b      	uxth	r3, r3
 800161c:	f023 0310 	bic.w	r3, r3, #16
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	8c1b      	ldrh	r3, [r3, #32]
 800162a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	8b1b      	ldrh	r3, [r3, #24]
 8001636:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8001638:	897b      	ldrh	r3, [r7, #10]
 800163a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800163e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001640:	897b      	ldrh	r3, [r7, #10]
 8001642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001646:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b29a      	uxth	r2, r3
 8001650:	897b      	ldrh	r3, [r7, #10]
 8001652:	4313      	orrs	r3, r2
 8001654:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	f023 0320 	bic.w	r3, r3, #32
 800165c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	899b      	ldrh	r3, [r3, #12]
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	b29a      	uxth	r2, r3
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	4313      	orrs	r3, r2
 800166a:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	885b      	ldrh	r3, [r3, #2]
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	b29a      	uxth	r2, r3
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	4313      	orrs	r3, r2
 8001678:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <TIM_OC2Init+0x108>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d003      	beq.n	800168a <TIM_OC2Init+0x8a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <TIM_OC2Init+0x10c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12b      	bne.n	80016e2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001690:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	89db      	ldrh	r3, [r3, #14]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	b29a      	uxth	r2, r3
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	4313      	orrs	r3, r2
 800169e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016a6:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	889b      	ldrh	r3, [r3, #4]
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80016b6:	89bb      	ldrh	r3, [r7, #12]
 80016b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016bc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80016be:	89bb      	ldrh	r3, [r7, #12]
 80016c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016c4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	8a1b      	ldrh	r3, [r3, #16]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	89bb      	ldrh	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	8a5b      	ldrh	r3, [r3, #18]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	89bb      	ldrh	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	89ba      	ldrh	r2, [r7, #12]
 80016e6:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	897a      	ldrh	r2, [r7, #10]
 80016ec:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	89fa      	ldrh	r2, [r7, #14]
 80016fa:	841a      	strh	r2, [r3, #32]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40010000 	.word	0x40010000
 800170c:	40010400 	.word	0x40010400

08001710 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	817b      	strh	r3, [r7, #10]
 800171e:	2300      	movs	r3, #0
 8001720:	81fb      	strh	r3, [r7, #14]
 8001722:	2300      	movs	r3, #0
 8001724:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	8c1b      	ldrh	r3, [r3, #32]
 800172a:	b29b      	uxth	r3, r3
 800172c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001730:	b29a      	uxth	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	8c1b      	ldrh	r3, [r3, #32]
 800173a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	889b      	ldrh	r3, [r3, #4]
 8001740:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	8b9b      	ldrh	r3, [r3, #28]
 8001746:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001748:	897b      	ldrh	r3, [r7, #10]
 800174a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800174e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;
 8001750:	897b      	ldrh	r3, [r7, #10]
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	897b      	ldrh	r3, [r7, #10]
 800175e:	4313      	orrs	r3, r2
 8001760:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001762:	89fb      	ldrh	r3, [r7, #14]
 8001764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001768:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	899b      	ldrh	r3, [r3, #12]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b29a      	uxth	r2, r3
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	4313      	orrs	r3, r2
 8001776:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b29a      	uxth	r2, r3
 8001780:	89fb      	ldrh	r3, [r7, #14]
 8001782:	4313      	orrs	r3, r2
 8001784:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a22      	ldr	r2, [pc, #136]	; (8001814 <TIM_OC3Init+0x104>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d003      	beq.n	8001796 <TIM_OC3Init+0x86>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a21      	ldr	r2, [pc, #132]	; (8001818 <TIM_OC3Init+0x108>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12b      	bne.n	80017ee <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800179c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	89db      	ldrh	r3, [r3, #14]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80017ac:	89fb      	ldrh	r3, [r7, #14]
 80017ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017b2:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	889b      	ldrh	r3, [r3, #4]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	4313      	orrs	r3, r2
 80017c0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80017c2:	89bb      	ldrh	r3, [r7, #12]
 80017c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017c8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80017ca:	89bb      	ldrh	r3, [r7, #12]
 80017cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017d0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	8a1b      	ldrh	r3, [r3, #16]
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	b29a      	uxth	r2, r3
 80017da:	89bb      	ldrh	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	8a5b      	ldrh	r3, [r3, #18]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	89bb      	ldrh	r3, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	89ba      	ldrh	r2, [r7, #12]
 80017f2:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	897a      	ldrh	r2, [r7, #10]
 80017f8:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	89fa      	ldrh	r2, [r7, #14]
 8001806:	841a      	strh	r2, [r3, #32]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40010000 	.word	0x40010000
 8001818:	40010400 	.word	0x40010400

0800181c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	81bb      	strh	r3, [r7, #12]
 800182a:	2300      	movs	r3, #0
 800182c:	817b      	strh	r3, [r7, #10]
 800182e:	2300      	movs	r3, #0
 8001830:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	8c1b      	ldrh	r3, [r3, #32]
 8001836:	b29b      	uxth	r3, r3
 8001838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800183c:	b29a      	uxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	8c1b      	ldrh	r3, [r3, #32]
 8001846:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	889b      	ldrh	r3, [r3, #4]
 800184c:	81fb      	strh	r3, [r7, #14]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	8b9b      	ldrh	r3, [r3, #28]
 8001852:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001854:	89bb      	ldrh	r3, [r7, #12]
 8001856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800185a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800185c:	89bb      	ldrh	r3, [r7, #12]
 800185e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001862:	81bb      	strh	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b29a      	uxth	r2, r3
 800186c:	89bb      	ldrh	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001872:	897b      	ldrh	r3, [r7, #10]
 8001874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001878:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	899b      	ldrh	r3, [r3, #12]
 800187e:	031b      	lsls	r3, r3, #12
 8001880:	b29a      	uxth	r2, r3
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	4313      	orrs	r3, r2
 8001886:	817b      	strh	r3, [r7, #10]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	885b      	ldrh	r3, [r3, #2]
 800188c:	031b      	lsls	r3, r3, #12
 800188e:	b29a      	uxth	r2, r3
 8001890:	897b      	ldrh	r3, [r7, #10]
 8001892:	4313      	orrs	r3, r2
 8001894:	817b      	strh	r3, [r7, #10]

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <TIM_OC4Init+0xc8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d003      	beq.n	80018a6 <TIM_OC4Init+0x8a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <TIM_OC4Init+0xcc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d10a      	bne.n	80018bc <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	8a1b      	ldrh	r3, [r3, #16]
 80018b2:	019b      	lsls	r3, r3, #6
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	89fa      	ldrh	r2, [r7, #14]
 80018c0:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	89ba      	ldrh	r2, [r7, #12]
 80018c6:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	897a      	ldrh	r2, [r7, #10]
 80018d4:	841a      	strh	r2, [r3, #32]
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40010400 	.word	0x40010400

080018ec <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001974:	b29b      	uxth	r3, r3
 8001976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800197a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }
}
 8001986:	e009      	b.n	800199c <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800198e:	b29b      	uxth	r3, r3
 8001990:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	889b      	ldrh	r3, [r3, #4]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ba:	b29b      	uxth	r3, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	095b      	lsrs	r3, r3, #5
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80019f6:	2201      	movs	r2, #1
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	899b      	ldrh	r3, [r3, #12]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e011      	b.n	8001a3a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d107      	bne.n	8001a2c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8a1b      	ldrh	r3, [r3, #16]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	4013      	ands	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e006      	b.n	8001a3a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	8a9b      	ldrh	r3, [r3, #20]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	4013      	ands	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001a42:	2201      	movs	r2, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4013      	ands	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <USART_GetITStatus+0xa4>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001a66:	2301      	movs	r3, #1
 8001a68:	74fb      	strb	r3, [r7, #19]
 8001a6a:	e001      	b.n	8001a70 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001a70:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	81fb      	strh	r3, [r7, #14]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001aa2:	89bb      	ldrh	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	801a      	strh	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 8001abe:	f000 f9b1 	bl	8001e24 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	e036      	b.n	8001b36 <Button_Init+0x7e>
		kpad[i].index = i;
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	4924      	ldr	r1, [pc, #144]	; (8001b5c <Button_Init+0xa4>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	330a      	adds	r3, #10
 8001ad8:	79fa      	ldrb	r2, [r7, #7]
 8001ada:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	491f      	ldr	r1, [pc, #124]	; (8001b5c <Button_Init+0xa4>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3310      	adds	r3, #16
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <Button_Init+0xa8>)
 8001aee:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <Button_Init+0xac>)
 8001af4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	491a      	ldr	r1, [pc, #104]	; (8001b64 <Button_Init+0xac>)
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	889b      	ldrh	r3, [r3, #4]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff f8cc 	bl	8000ca2 <GPIO_ReadInputDataBit>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <Button_Init+0xac>)
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	799b      	ldrb	r3, [r3, #6]
 8001b18:	4299      	cmp	r1, r3
 8001b1a:	d109      	bne.n	8001b30 <Button_Init+0x78>
			kpad[i].sold = PIN_ACTIVE;
 8001b1c:	79fa      	ldrb	r2, [r7, #7]
 8001b1e:	490f      	ldr	r1, [pc, #60]	; (8001b5c <Button_Init+0xa4>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	3309      	adds	r3, #9
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	3301      	adds	r3, #1
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d9c5      	bls.n	8001ac8 <Button_Init+0x10>
		}
	}

    idTaskScanButton = TimerStart("", KEY_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScan, NULL);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <Button_Init+0xb0>)
 8001b42:	22ff      	movs	r2, #255	; 0xff
 8001b44:	2105      	movs	r1, #5
 8001b46:	4809      	ldr	r0, [pc, #36]	; (8001b6c <Button_Init+0xb4>)
 8001b48:	f000 fe70 	bl	800282c <TimerStart>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <Button_Init+0xb8>)
 8001b52:	701a      	strb	r2, [r3, #0]
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200000e8 	.word	0x200000e8
 8001b60:	08001bd9 	.word	0x08001bd9
 8001b64:	20000024 	.word	0x20000024
 8001b68:	08001dd9 	.word	0x08001dd9
 8001b6c:	08006888 	.word	0x08006888
 8001b70:	20000054 	.word	0x20000054

08001b74 <Button_SetMode>:
 */
void
Button_SetMode(
    uint8_t id,
    uint8_t mode
) {
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	71fb      	strb	r3, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71bb      	strb	r3, [r7, #6]
    if (id >= BUTTON_MAX) return;
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d80a      	bhi.n	8001ba0 <Button_SetMode+0x2c>
    kpad[id].mode = mode;
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <Button_SetMode+0x38>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	330b      	adds	r3, #11
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e000      	b.n	8001ba2 <Button_SetMode+0x2e>
    if (id >= BUTTON_MAX) return;
 8001ba0:	bf00      	nop
}
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	200000e8 	.word	0x200000e8

08001bb0 <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_t buttonEvent,
    button_event_callback procbuttonEvent
) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
    pEventCallbacks[buttonEvent] = procbuttonEvent;
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4905      	ldr	r1, [pc, #20]	; (8001bd4 <Button_RegisterEventCallback+0x24>)
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000160 	.word	0x20000160

08001bd8 <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	7a9b      	ldrb	r3, [r3, #10]
 8001be8:	72fb      	strb	r3, [r7, #11]
    
    if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	4a78      	ldr	r2, [pc, #480]	; (8001dd0 <ButtonScanTypeEdge+0x1f8>)
 8001bee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	4976      	ldr	r1, [pc, #472]	; (8001dd0 <ButtonScanTypeEdge+0x1f8>)
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	889b      	ldrh	r3, [r3, #4]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f7ff f84f 	bl	8000ca2 <GPIO_ReadInputDataBit>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4619      	mov	r1, r3
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	4a71      	ldr	r2, [pc, #452]	; (8001dd0 <ButtonScanTypeEdge+0x1f8>)
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	799b      	ldrb	r3, [r3, #6]
 8001c12:	4299      	cmp	r1, r3
 8001c14:	d10a      	bne.n	8001c2c <ButtonScanTypeEdge+0x54>
        if (bt->countActive != 0xFFU) {
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	7b5b      	ldrb	r3, [r3, #13]
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d013      	beq.n	8001c46 <ButtonScanTypeEdge+0x6e>
            bt->countActive++;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	7b5b      	ldrb	r3, [r3, #13]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	735a      	strb	r2, [r3, #13]
 8001c2a:	e00c      	b.n	8001c46 <ButtonScanTypeEdge+0x6e>
        }
    }
    else {
        if (bt->countInactive != 0xFFU) {
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	7b1b      	ldrb	r3, [r3, #12]
 8001c30:	2bff      	cmp	r3, #255	; 0xff
 8001c32:	d005      	beq.n	8001c40 <ButtonScanTypeEdge+0x68>
            bt->countInactive++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	7b1b      	ldrb	r3, [r3, #12]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	731a      	strb	r2, [r3, #12]
        }
        
        bt->countActive = 0;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	735a      	strb	r2, [r3, #13]
    }
    
    if (bt->countInactive >= KEY_COUNT_IS_PRESS) {
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	7b1b      	ldrb	r3, [r3, #12]
 8001c4a:	2b09      	cmp	r3, #9
 8001c4c:	d958      	bls.n	8001d00 <ButtonScanTypeEdge+0x128>
        if (bt->sold == PIN_ACTIVE) {
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	7a5b      	ldrb	r3, [r3, #9]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d118      	bne.n	8001c88 <ButtonScanTypeEdge+0xb0>
            bt->sold = PIN_UNACTIVE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 8001c5c:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <ButtonScanTypeEdge+0xa4>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	7adb      	ldrb	r3, [r3, #11]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <ButtonScanTypeEdge+0xa4>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 8001c70:	4b58      	ldr	r3, [pc, #352]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	7afa      	ldrb	r2, [r7, #11]
 8001c76:	2101      	movs	r1, #1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4798      	blx	r3
            }
            
            bt->time = bt->countInactive;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	7b1b      	ldrb	r3, [r3, #12]
 8001c80:	461a      	mov	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e03b      	b.n	8001d00 <ButtonScanTypeEdge+0x128>
        } else {
            bt->time++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_BW2PRESS) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b4f      	cmp	r3, #79	; 0x4f
 8001c98:	d932      	bls.n	8001d00 <ButtonScanTypeEdge+0x128>
                if (bt->holdCnt != 0) {
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <ButtonScanTypeEdge+0xf0>
                    if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC)) {
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d024      	beq.n	8001cf4 <ButtonScanTypeEdge+0x11c>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	7adb      	ldrb	r3, [r3, #11]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01e      	beq.n	8001cf4 <ButtonScanTypeEdge+0x11c>
                        pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	6852      	ldr	r2, [r2, #4]
 8001cbe:	b291      	uxth	r1, r2
 8001cc0:	7afa      	ldrb	r2, [r7, #11]
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4798      	blx	r3
 8001cc6:	e015      	b.n	8001cf4 <ButtonScanTypeEdge+0x11c>
                    }
                }
                else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC) \
 8001cc8:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d011      	beq.n	8001cf4 <ButtonScanTypeEdge+0x11c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	7adb      	ldrb	r3, [r3, #11]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <ButtonScanTypeEdge+0x11c>
                         && bt->pressCnt != 0) 
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	7a1b      	ldrb	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <ButtonScanTypeEdge+0x11c>
                {
                    pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	7a12      	ldrb	r2, [r2, #8]
 8001cec:	b291      	uxth	r1, r2
 8001cee:	7afa      	ldrb	r2, [r7, #11]
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4798      	blx	r3
                }
                
                bt->holdCnt = 0;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
                bt->pressCnt = 0;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	721a      	strb	r2, [r3, #8]
            }
        }
    }
    
    if (bt->countActive >= KEY_COUNT_IS_PRESS) {
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	7b5b      	ldrb	r3, [r3, #13]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d95e      	bls.n	8001dc6 <ButtonScanTypeEdge+0x1ee>
        /* reset count inactive */
        bt->countInactive = 0; 
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	731a      	strb	r2, [r3, #12]
        
        if (bt->sold == PIN_UNACTIVE) {
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	7a5b      	ldrb	r3, [r3, #9]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11e      	bne.n	8001d54 <ButtonScanTypeEdge+0x17c>
            bt->sold = PIN_ACTIVE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <ButtonScanTypeEdge+0x164>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	7adb      	ldrb	r3, [r3, #11]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <ButtonScanTypeEdge+0x164>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	7afa      	ldrb	r2, [r7, #11]
 8001d36:	2100      	movs	r1, #0
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4798      	blx	r3
            }
            
            bt->time = bt->countActive;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	7b5b      	ldrb	r3, [r3, #13]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]
            bt->pressCnt++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	7a1b      	ldrb	r3, [r3, #8]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	721a      	strb	r2, [r3, #8]
                    }
                }
            }
        }
    }
}
 8001d52:	e038      	b.n	8001dc6 <ButtonScanTypeEdge+0x1ee>
            bt->time++;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_IS_HOLD) {
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b77      	cmp	r3, #119	; 0x77
 8001d64:	d92f      	bls.n	8001dc6 <ButtonScanTypeEdge+0x1ee>
                bt->pressCnt = 0;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	721a      	strb	r2, [r3, #8]
                bt->holdCnt = bt->time;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b78      	cmp	r3, #120	; 0x78
 8001d7a:	d012      	beq.n	8001da2 <ButtonScanTypeEdge+0x1ca>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2bc8      	cmp	r3, #200	; 0xc8
 8001d82:	d00e      	beq.n	8001da2 <ButtonScanTypeEdge+0x1ca>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d8c:	d009      	beq.n	8001da2 <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685b      	ldr	r3, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8001d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d96:	d004      	beq.n	8001da2 <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001da0:	d111      	bne.n	8001dc6 <ButtonScanTypeEdge+0x1ee>
                    if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_TYPE_LOGIC)) {
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <ButtonScanTypeEdge+0x1ee>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	7adb      	ldrb	r3, [r3, #11]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <ButtonScanTypeEdge+0x1ee>
                        pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <ButtonScanTypeEdge+0x1fc>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	6852      	ldr	r2, [r2, #4]
 8001dbe:	b291      	uxth	r1, r2
 8001dc0:	7afa      	ldrb	r2, [r7, #11]
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4798      	blx	r3
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000024 	.word	0x20000024
 8001dd4:	20000160 	.word	0x20000160

08001dd8 <ButtonScan>:
 * @retval None
 */
void
ButtonScan(
    void *arg
) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e014      	b.n	8001e10 <ButtonScan+0x38>
        kpad[i].scanBtnFunc(&kpad[i]);
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	490d      	ldr	r1, [pc, #52]	; (8001e20 <ButtonScan+0x48>)
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3310      	adds	r3, #16
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <ButtonScan+0x48>)
 8001e04:	4413      	add	r3, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	4788      	blx	r1
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d9e7      	bls.n	8001de6 <ButtonScan+0xe>
    }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200000e8 	.word	0x200000e8

08001e24 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff fa61 	bl	80012f4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001e32:	2101      	movs	r1, #1
 8001e34:	2002      	movs	r0, #2
 8001e36:	f7ff fa5d 	bl	80012f4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2004      	movs	r0, #4
 8001e3e:	f7ff fa59 	bl	80012f4 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001e42:	2300      	movs	r3, #0
 8001e44:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001e46:	2303      	movs	r3, #3
 8001e48:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8001e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e52:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001e54:	463b      	mov	r3, r7
 8001e56:	4619      	mov	r1, r3
 8001e58:	480a      	ldr	r0, [pc, #40]	; (8001e84 <BTNGPIO_Init+0x60>)
 8001e5a:	f7fe fe93 	bl	8000b84 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8001e5e:	2339      	movs	r3, #57	; 0x39
 8001e60:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e62:	463b      	mov	r3, r7
 8001e64:	4619      	mov	r1, r3
 8001e66:	4808      	ldr	r0, [pc, #32]	; (8001e88 <BTNGPIO_Init+0x64>)
 8001e68:	f7fe fe8c 	bl	8000b84 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001e70:	463b      	mov	r3, r7
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <BTNGPIO_Init+0x68>)
 8001e76:	f7fe fe85 	bl	8000b84 <GPIO_Init>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020000 	.word	0x40020000

08001e90 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 8001e94:	4915      	ldr	r1, [pc, #84]	; (8001eec <EventButton_Init+0x5c>)
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fe8a 	bl	8001bb0 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 8001e9c:	4914      	ldr	r1, [pc, #80]	; (8001ef0 <EventButton_Init+0x60>)
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7ff fe86 	bl	8001bb0 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 8001ea4:	4913      	ldr	r1, [pc, #76]	; (8001ef4 <EventButton_Init+0x64>)
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f7ff fe82 	bl	8001bb0 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 8001eac:	4912      	ldr	r1, [pc, #72]	; (8001ef8 <EventButton_Init+0x68>)
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f7ff fe7e 	bl	8001bb0 <Button_RegisterEventCallback>
    
    /* Init mode of buttons */
    Button_SetMode(BUTTON_BOARD_ID, BUTTON_TYPE_LOGIC);
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fe5c 	bl	8001b74 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID1, BUTTON_TYPE_LOGIC);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fe58 	bl	8001b74 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID2, BUTTON_TYPE_LOGIC);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f7ff fe54 	bl	8001b74 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID3, BUTTON_TYPE_LOGIC);
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f7ff fe50 	bl	8001b74 <Button_SetMode>
	Button_SetMode(BUTTON_KIT_ID4, BUTTON_TYPE_LOGIC);
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2004      	movs	r0, #4
 8001ed8:	f7ff fe4c 	bl	8001b74 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID5, BUTTON_TYPE_LOGIC);
 8001edc:	2101      	movs	r1, #1
 8001ede:	2005      	movs	r0, #5
 8001ee0:	f7ff fe48 	bl	8001b74 <Button_SetMode>

    Button_Init();
 8001ee4:	f7ff fde8 	bl	8001ab8 <Button_Init>
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	08001efd 	.word	0x08001efd
 8001ef0:	08001f31 	.word	0x08001f31
 8001ef4:	08001f79 	.word	0x08001f79
 8001ef8:	08001fd7 	.word	0x08001fd7

08001efc <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	460a      	mov	r2, r1
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 8001f0c:	88bb      	ldrh	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <ButtonProcessEventEdge+0x1e>
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_RISING + btnID;
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	3306      	adds	r3, #6
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e002      	b.n	8001f20 <ButtonProcessEventEdge+0x24>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_FALLING + btnID;
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	330c      	adds	r3, #12
 8001f1e:	73fb      	strb	r3, [r7, #15]
    }

    EventSchedulerAdd(event);
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fbe2 	bl	80026ec <EventSchedulerAdd>
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t time
) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == 1)
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <ButtonProcessEventPress+0x1c>
	{
		event = EVENT_OF_BUTTON_0_PRESS_LOGIC + btnID;
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e00c      	b.n	8001f66 <ButtonProcessEventPress+0x36>
	}
	else if (time == 2)
 8001f4c:	88bb      	ldrh	r3, [r7, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d103      	bne.n	8001f5a <ButtonProcessEventPress+0x2a>
	{
		event = EVENT_OF_BUTTON_0_PRESS_2_TIMES + btnID;
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	3312      	adds	r3, #18
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e005      	b.n	8001f66 <ButtonProcessEventPress+0x36>
	}
	else if (time == 5)
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d107      	bne.n	8001f70 <ButtonProcessEventPress+0x40>
	{
		event = EVENT_OF_BUTTON_0_PRESS_5_TIMES + btnID;
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	3318      	adds	r3, #24
 8001f64:	73fb      	strb	r3, [r7, #15]
	}
	else return;

    EventSchedulerAdd(event);
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fbbf 	bl	80026ec <EventSchedulerAdd>
 8001f6e:	e000      	b.n	8001f72 <ButtonProcessEventPress+0x42>
	else return;
 8001f70:	bf00      	nop
}
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460a      	mov	r2, r1
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	4613      	mov	r3, r2
 8001f86:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 8001f88:	88bb      	ldrh	r3, [r7, #4]
 8001f8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f8e:	d103      	bne.n	8001f98 <ButtonProcessEventHold+0x20>
	{
		event = EVENT_OF_BUTTON_0_HOLD_10S + btnID;
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	3330      	adds	r3, #48	; 0x30
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	e015      	b.n	8001fc4 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD5S)
 8001f98:	88bb      	ldrh	r3, [r7, #4]
 8001f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f9e:	d103      	bne.n	8001fa8 <ButtonProcessEventHold+0x30>
	{
		event = EVENT_OF_BUTTON_0_HOLD_5S + btnID;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	332a      	adds	r3, #42	; 0x2a
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	e00d      	b.n	8001fc4 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD3S)
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001fae:	d103      	bne.n	8001fb8 <ButtonProcessEventHold+0x40>
	{
		event = EVENT_OF_BUTTON_0_HOLD_3S + btnID;
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	3324      	adds	r3, #36	; 0x24
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e005      	b.n	8001fc4 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD1S)
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	2bc8      	cmp	r3, #200	; 0xc8
 8001fbc:	d107      	bne.n	8001fce <ButtonProcessEventHold+0x56>
	{
		event = EVENT_OF_BUTTON_0_HOLD_1S + btnID;
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	331e      	adds	r3, #30
 8001fc2:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb90 	bl	80026ec <EventSchedulerAdd>
 8001fcc:	e000      	b.n	8001fd0 <ButtonProcessEventHold+0x58>
	else return;
 8001fce:	bf00      	nop
}
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	460a      	mov	r2, r1
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8001fe6:	88bb      	ldrh	r3, [r7, #4]
 8001fe8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fec:	d303      	bcc.n	8001ff6 <ButtonProcessEventRelease+0x20>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_10S + btnID;
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	3348      	adds	r3, #72	; 0x48
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e015      	b.n	8002022 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD5S)
 8001ff6:	88bb      	ldrh	r3, [r7, #4]
 8001ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ffc:	d303      	bcc.n	8002006 <ButtonProcessEventRelease+0x30>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_5S + btnID;
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	3342      	adds	r3, #66	; 0x42
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	e00d      	b.n	8002022 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD3S)
 8002006:	88bb      	ldrh	r3, [r7, #4]
 8002008:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800200c:	d303      	bcc.n	8002016 <ButtonProcessEventRelease+0x40>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_3S + btnID;
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	333c      	adds	r3, #60	; 0x3c
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e005      	b.n	8002022 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD1S)
 8002016:	88bb      	ldrh	r3, [r7, #4]
 8002018:	2bc7      	cmp	r3, #199	; 0xc7
 800201a:	d907      	bls.n	800202c <ButtonProcessEventRelease+0x56>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_1S + btnID;
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	3336      	adds	r3, #54	; 0x36
 8002020:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fb61 	bl	80026ec <EventSchedulerAdd>
 800202a:	e000      	b.n	800202e <ButtonProcessEventRelease+0x58>
	else return;
 800202c:	bf00      	nop
}
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <BuzzerControl_Init>:
 * @brief  Initialize module buzzer
 * @param  None
 * @retval None
 */
void
BuzzerControl_Init(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	BUZZTIM_InitTimer(0, 32, 5000);
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	2120      	movs	r1, #32
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f8a6 	bl	8002190 <BUZZTIM_InitTimer>
	BUZZTIM_InitPWMChannel(pinBuzz);
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <BuzzerControl_Init+0x24>)
 8002046:	e893 0003 	ldmia.w	r3, {r0, r1}
 800204a:	f000 f8c9 	bl	80021e0 <BUZZTIM_InitPWMChannel>
    bBuzzInit = 1;
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <BuzzerControl_Init+0x28>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	080069cc 	.word	0x080069cc
 800205c:	20000170 	.word	0x20000170

08002060 <BuzzOff>:
 * @retval None
 */
static void
BuzzOff(
    void *arg
) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    idBuzz = NO_TIMER;
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <BuzzOff+0x54>)
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	701a      	strb	r2, [r3, #0]
    gpToneList++;  /* Next Element */
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <BuzzOff+0x58>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3304      	adds	r3, #4
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <BuzzOff+0x58>)
 8002076:	6013      	str	r3, [r2, #0]
    if ((gpToneList->freq == 0) && (gpToneList->duration == 0)) {
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <BuzzOff+0x58>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <BuzzOff+0x34>
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <BuzzOff+0x58>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	885b      	ldrh	r3, [r3, #2]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d103      	bne.n	8002094 <BuzzOff+0x34>
    	BuzzerControl_SetDutyCycle(0);
 800208c:	2000      	movs	r0, #0
 800208e:	f000 f8ef 	bl	8002270 <BuzzerControl_SetDutyCycle>
 8002092:	e00a      	b.n	80020aa <BuzzOff+0x4a>
    }
    else {
        BuzzPlay(gpToneList->freq, gpToneList->duration);
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <BuzzOff+0x58>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <BuzzOff+0x58>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	885b      	ldrh	r3, [r3, #2]
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f000 f80a 	bl	80020bc <BuzzPlay>
    }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000055 	.word	0x20000055
 80020b8:	20000174 	.word	0x20000174

080020bc <BuzzPlay>:
 */
static void
BuzzPlay(
    uint16_t freq,
	uint16_t duration
) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	4603      	mov	r3, r0
 80020c4:	460a      	mov	r2, r1
 80020c6:	80fb      	strh	r3, [r7, #6]
 80020c8:	4613      	mov	r3, r2
 80020ca:	80bb      	strh	r3, [r7, #4]
    if (freq == 0) {
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <BuzzPlay+0x1e>
    	BuzzerControl_SetDutyCycle(0);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f000 f8cc 	bl	8002270 <BuzzerControl_SetDutyCycle>
 80020d8:	e017      	b.n	800210a <BuzzPlay+0x4e>
    }
    else if (freq == 0xFFFFU) {
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d107      	bne.n	80020f4 <BuzzPlay+0x38>
    	BuzzerControl_SetPreriod(5000);
 80020e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80020e8:	f000 f8e0 	bl	80022ac <BuzzerControl_SetPreriod>
    	BuzzerControl_SetDutyCycle(101);
 80020ec:	2065      	movs	r0, #101	; 0x65
 80020ee:	f000 f8bf 	bl	8002270 <BuzzerControl_SetDutyCycle>
 80020f2:	e00a      	b.n	800210a <BuzzPlay+0x4e>
    }
    else {
        uint32_t period = 750000 / freq;
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	4a13      	ldr	r2, [pc, #76]	; (8002144 <BuzzPlay+0x88>)
 80020f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80020fc:	60fb      	str	r3, [r7, #12]
        BuzzerControl_SetPreriod(period);
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f8d4 	bl	80022ac <BuzzerControl_SetPreriod>
        BuzzerControl_SetDutyCycle(5);
 8002104:	2005      	movs	r0, #5
 8002106:	f000 f8b3 	bl	8002270 <BuzzerControl_SetDutyCycle>
    }

    if (idBuzz != NO_TIMER) {
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <BuzzPlay+0x8c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d007      	beq.n	8002122 <BuzzPlay+0x66>
        TimerStop(idBuzz);
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <BuzzPlay+0x8c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fbea 	bl	80028f0 <TimerStop>
        idBuzz = NO_TIMER;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <BuzzPlay+0x8c>)
 800211e:	22ff      	movs	r2, #255	; 0xff
 8002120:	701a      	strb	r2, [r3, #0]
    }

    idBuzz = TimerStart("buzz", duration, TIMER_REPEAT_ONE_TIME, BuzzOff, NULL);
 8002122:	88b9      	ldrh	r1, [r7, #4]
 8002124:	2300      	movs	r3, #0
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <BuzzPlay+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	4808      	ldr	r0, [pc, #32]	; (8002150 <BuzzPlay+0x94>)
 800212e:	f000 fb7d 	bl	800282c <TimerStart>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <BuzzPlay+0x8c>)
 8002138:	701a      	strb	r2, [r3, #0]
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	000b71b0 	.word	0x000b71b0
 8002148:	20000055 	.word	0x20000055
 800214c:	08002061 	.word	0x08002061
 8002150:	0800688c 	.word	0x0800688c

08002154 <BuzzerControl_SetMelody>:
 * @retval None
 */
void 
BuzzerControl_SetMelody(
    tone_p pListTone   
) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    if (!bBuzzInit) return;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <BuzzerControl_SetMelody+0x34>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00d      	beq.n	8002180 <BuzzerControl_SetMelody+0x2c>
    gpToneList = pListTone;
 8002164:	4a09      	ldr	r2, [pc, #36]	; (800218c <BuzzerControl_SetMelody+0x38>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]
    BuzzPlay(gpToneList->freq, gpToneList->duration); 
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <BuzzerControl_SetMelody+0x38>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <BuzzerControl_SetMelody+0x38>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	885b      	ldrh	r3, [r3, #2]
 8002176:	4619      	mov	r1, r3
 8002178:	4610      	mov	r0, r2
 800217a:	f7ff ff9f 	bl	80020bc <BuzzPlay>
 800217e:	e000      	b.n	8002182 <BuzzerControl_SetMelody+0x2e>
    if (!bBuzzInit) return;
 8002180:	bf00      	nop
}
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000170 	.word	0x20000170
 800218c:	20000174 	.word	0x20000174

08002190 <BUZZTIM_InitTimer>:
static void
BUZZTIM_InitTimer(
    uint8_t timidx,
	uint32_t prescale,
	uint32_t period
) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	73fb      	strb	r3, [r7, #15]
    TIM_TimeBaseInitTypeDef TimeBaseStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800219e:	2101      	movs	r1, #1
 80021a0:	2002      	movs	r0, #2
 80021a2:	f7ff f8c7 	bl	8001334 <RCC_APB1PeriphClockCmd>

    /* NOT For TIM 1 & TIM8 */
    TimeBaseStructure.TIM_Prescaler = prescale - 1;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	82bb      	strh	r3, [r7, #20]
    TimeBaseStructure.TIM_Period = period - 1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	61bb      	str	r3, [r7, #24]
    TimeBaseStructure.TIM_ClockDivision = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	83bb      	strh	r3, [r7, #28]
    TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80021ba:	2300      	movs	r3, #0
 80021bc:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseInit(TIM3, &TimeBaseStructure);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	4805      	ldr	r0, [pc, #20]	; (80021dc <BUZZTIM_InitTimer+0x4c>)
 80021c6:	f7ff f915 	bl	80013f4 <TIM_TimeBaseInit>

    TIM_Cmd(TIM3, ENABLE);
 80021ca:	2101      	movs	r1, #1
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <BUZZTIM_InitTimer+0x4c>)
 80021ce:	f7ff f97d 	bl	80014cc <TIM_Cmd>
}
 80021d2:	bf00      	nop
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40000400 	.word	0x40000400

080021e0 <BUZZTIM_InitPWMChannel>:
 * @retval None
 */
static void
BUZZTIM_InitPWMChannel(
    pwmPin pin
) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	463b      	mov	r3, r7
 80021e8:	e883 0003 	stmia.w	r3, {r0, r1}
    GPIO_InitTypeDef GPIO_InitStructure;
    TIM_OCInitTypeDef TIM_OCInitStructure;

    /* GPIO Peripheral clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80021ec:	2101      	movs	r1, #1
 80021ee:	2004      	movs	r0, #4
 80021f0:	f7ff f880 	bl	80012f4 <RCC_AHB1PeriphClockCmd>

    /* Configure pin in output push-pull mode */
    GPIO_InitStructure.GPIO_Pin = BUZZER_PIN;
 80021f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002200:	2302      	movs	r3, #2
 8002202:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 800220c:	2301      	movs	r3, #1
 800220e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    GPIO_Init(BUZZER_PORT, &GPIO_InitStructure);
 8002212:	f107 0320 	add.w	r3, r7, #32
 8002216:	4619      	mov	r1, r3
 8002218:	4813      	ldr	r0, [pc, #76]	; (8002268 <BUZZTIM_InitPWMChannel+0x88>)
 800221a:	f7fe fcb3 	bl	8000b84 <GPIO_Init>

    GPIO_PinAFConfig(BUZZER_PORT, GPIO_PinSource9, GPIO_AF_TIM3);
 800221e:	2202      	movs	r2, #2
 8002220:	2109      	movs	r1, #9
 8002222:	4811      	ldr	r0, [pc, #68]	; (8002268 <BUZZTIM_InitPWMChannel+0x88>)
 8002224:	f7fe fd8d 	bl	8000d42 <GPIO_PinAFConfig>

    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; /* PWM1 Mode */
 8002228:	2360      	movs	r3, #96	; 0x60
 800222a:	81bb      	strh	r3, [r7, #12]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800222c:	2301      	movs	r3, #1
 800222e:	81fb      	strh	r3, [r7, #14]
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8002230:	2304      	movs	r3, #4
 8002232:	823b      	strh	r3, [r7, #16]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002234:	2300      	movs	r3, #0
 8002236:	833b      	strh	r3, [r7, #24]
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8002238:	2308      	movs	r3, #8
 800223a:	837b      	strh	r3, [r7, #26]
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 800223c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002240:	83bb      	strh	r3, [r7, #28]
    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8002242:	2300      	movs	r3, #0
 8002244:	83fb      	strh	r3, [r7, #30]
    TIM_OCInitStructure.TIM_Pulse = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]

    TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4619      	mov	r1, r3
 8002250:	4806      	ldr	r0, [pc, #24]	; (800226c <BUZZTIM_InitPWMChannel+0x8c>)
 8002252:	f7ff fae3 	bl	800181c <TIM_OC4Init>

    TIM_CtrlPWMOutputs(TIM3, ENABLE);
 8002256:	2101      	movs	r1, #1
 8002258:	4804      	ldr	r0, [pc, #16]	; (800226c <BUZZTIM_InitPWMChannel+0x8c>)
 800225a:	f7ff fb7f 	bl	800195c <TIM_CtrlPWMOutputs>
}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40020800 	.word	0x40020800
 800226c:	40000400 	.word	0x40000400

08002270 <BuzzerControl_SetDutyCycle>:
 * @retval None
 */
void
BuzzerControl_SetDutyCycle(
    uint8_t dutycycle
) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
	uint32_t val;
    uint32_t maxval;

    maxval = TIM3->ARR;
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <BuzzerControl_SetDutyCycle+0x34>)
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	60fb      	str	r3, [r7, #12]
    val = dutycycle * maxval / 100;
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <BuzzerControl_SetDutyCycle+0x38>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	60bb      	str	r3, [r7, #8]

	TIM_SetCompare4(TIM3, val);
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4803      	ldr	r0, [pc, #12]	; (80022a4 <BuzzerControl_SetDutyCycle+0x34>)
 8002296:	f7ff fb53 	bl	8001940 <TIM_SetCompare4>
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40000400 	.word	0x40000400
 80022a8:	51eb851f 	.word	0x51eb851f

080022ac <BuzzerControl_SetPreriod>:
 * @retval None
 */
void
BuzzerControl_SetPreriod(
	uint32_t period
) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    TIM3->ARR = period - 1;
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <BuzzerControl_SetPreriod+0x1c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40000400 	.word	0x40000400

080022cc <LedControl_Init>:
 * @brief  Initializes module led
 * @param  None
 * @retval None
 */
void
LedControl_Init(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	// Initialize pins GPIO led
	LEDGPIO_Config();
 80022d0:	f000 f930 	bl	8002534 <LEDGPIO_Config>

	// Initialize TIMER led
	LEDTIM_Config();
 80022d4:	f000 f978 	bl	80025c8 <LEDTIM_Config>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <LedControl_SetColorIndividual>:
void
LedControl_SetColorIndividual(
	uint8_t led_id,
	led_color_t led_color,
	uint8_t led_level
) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
 80022e6:	460b      	mov	r3, r1
 80022e8:	71bb      	strb	r3, [r7, #6]
 80022ea:	4613      	mov	r3, r2
 80022ec:	717b      	strb	r3, [r7, #5]
	uint32_t channelPulse;

    if ((led_id >= NUM_OF_LED) || !isTypeLED(led_color) || (led_level > 100))
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d85e      	bhi.n	80023b2 <LedControl_SetColorIndividual+0xd6>
 80022f4:	79bb      	ldrb	r3, [r7, #6]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <LedControl_SetColorIndividual+0x2a>
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d002      	beq.n	8002306 <LedControl_SetColorIndividual+0x2a>
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d155      	bne.n	80023b2 <LedControl_SetColorIndividual+0xd6>
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	2b64      	cmp	r3, #100	; 0x64
 800230a:	d852      	bhi.n	80023b2 <LedControl_SetColorIndividual+0xd6>
        return;
    
    // Get brightness current
    if (led_level == 0)
 800230c:	797b      	ldrb	r3, [r7, #5]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <LedControl_SetColorIndividual+0x3e>
    {
    	g_brightnessLed = 100;
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <LedControl_SetColorIndividual+0xe0>)
 8002314:	2264      	movs	r2, #100	; 0x64
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	e002      	b.n	8002320 <LedControl_SetColorIndividual+0x44>
    }
    else
    {
    	g_brightnessLed = led_level;
 800231a:	4a28      	ldr	r2, [pc, #160]	; (80023bc <LedControl_SetColorIndividual+0xe0>)
 800231c:	797b      	ldrb	r3, [r7, #5]
 800231e:	7013      	strb	r3, [r2, #0]
    }

    // Convert value level to value pwm counter
    channelPulse = (((uint32_t) led_level * (LED_TIMER_PERIOD - 1)) / 100);
 8002320:	797b      	ldrb	r3, [r7, #5]
 8002322:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <LedControl_SetColorIndividual+0xe4>)
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	4927      	ldr	r1, [pc, #156]	; (80023c4 <LedControl_SetColorIndividual+0xe8>)
 8002328:	fba1 1202 	umull	r1, r2, r1, r2
 800232c:	0b92      	lsrs	r2, r2, #14
 800232e:	3a02      	subs	r2, #2
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <LedControl_SetColorIndividual+0xec>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	60fb      	str	r3, [r7, #12]

    if (led_id == LED_BOARD_ID)
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10c      	bne.n	800235e <LedControl_SetColorIndividual+0x82>
    {
    	if (led_level != 0)
 8002344:	797b      	ldrb	r3, [r7, #5]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <LedControl_SetColorIndividual+0x78>
    	{
    		GPIO_SetBits(LED_BOARD_PORT, LED_BOARD_PIN);
 800234a:	2120      	movs	r1, #32
 800234c:	481f      	ldr	r0, [pc, #124]	; (80023cc <LedControl_SetColorIndividual+0xf0>)
 800234e:	f7fe fcc2 	bl	8000cd6 <GPIO_SetBits>
 8002352:	e02f      	b.n	80023b4 <LedControl_SetColorIndividual+0xd8>
    	}
    	else
    	{
    		GPIO_ResetBits(LED_BOARD_PORT, LED_BOARD_PIN);
 8002354:	2120      	movs	r1, #32
 8002356:	481d      	ldr	r0, [pc, #116]	; (80023cc <LedControl_SetColorIndividual+0xf0>)
 8002358:	f7fe fccc 	bl	8000cf4 <GPIO_ResetBits>
 800235c:	e02a      	b.n	80023b4 <LedControl_SetColorIndividual+0xd8>
    	}
    }
    else if (led_id == LED_KIT_ID0)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d114      	bne.n	800238e <LedControl_SetColorIndividual+0xb2>
	{
    	if (led_color == LED_COLOR_RED)
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <LedControl_SetColorIndividual+0x98>
    	{
    		TIM_SetCompare1(TIM1, channelPulse);
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	4818      	ldr	r0, [pc, #96]	; (80023d0 <LedControl_SetColorIndividual+0xf4>)
 800236e:	f7ff fabd 	bl	80018ec <TIM_SetCompare1>
 8002372:	e01f      	b.n	80023b4 <LedControl_SetColorIndividual+0xd8>
    	}
    	else if (led_color == LED_COLOR_GREEN)
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d104      	bne.n	8002384 <LedControl_SetColorIndividual+0xa8>
    	{
    		TIM_SetCompare4(TIM1, channelPulse);
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	4814      	ldr	r0, [pc, #80]	; (80023d0 <LedControl_SetColorIndividual+0xf4>)
 800237e:	f7ff fadf 	bl	8001940 <TIM_SetCompare4>
 8002382:	e017      	b.n	80023b4 <LedControl_SetColorIndividual+0xd8>
    	}
    	else /* (led_color == LED_COLOR_BLUE) */
    	{
			TIM_SetCompare3(TIM1, channelPulse);
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	4812      	ldr	r0, [pc, #72]	; (80023d0 <LedControl_SetColorIndividual+0xf4>)
 8002388:	f7ff facc 	bl	8001924 <TIM_SetCompare3>
 800238c:	e012      	b.n	80023b4 <LedControl_SetColorIndividual+0xd8>
		}
	}
    else /* (led_id == LED_KIT_ID1) */
    {
    	if (led_color == LED_COLOR_RED)
 800238e:	79bb      	ldrb	r3, [r7, #6]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <LedControl_SetColorIndividual+0xc4>
    	{
    		TIM_SetCompare2(TIM2, channelPulse);
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800239a:	f7ff fab5 	bl	8001908 <TIM_SetCompare2>
 800239e:	e009      	b.n	80023b4 <LedControl_SetColorIndividual+0xd8>
    	}
    	else if (led_color == LED_COLOR_GREEN)
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d106      	bne.n	80023b4 <LedControl_SetColorIndividual+0xd8>
    	{
    		TIM_SetCompare1(TIM2, channelPulse);
 80023a6:	68f9      	ldr	r1, [r7, #12]
 80023a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023ac:	f7ff fa9e 	bl	80018ec <TIM_SetCompare1>
 80023b0:	e000      	b.n	80023b4 <LedControl_SetColorIndividual+0xd8>
        return;
 80023b2:	bf00      	nop
    	}
    	else /* (led_color == LED_COLOR_BLUE) */
    	{
		}
    }
}
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000178 	.word	0x20000178
 80023c0:	20000000 	.word	0x20000000
 80023c4:	eeb83a0d 	.word	0xeeb83a0d
 80023c8:	51eb851f 	.word	0x51eb851f
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40010000 	.word	0x40010000

080023d4 <LedControl_SetColorGeneral>:
void
LedControl_SetColorGeneral(
	uint8_t led_id,
	led_color_t led_color,
	uint8_t led_level
) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	460b      	mov	r3, r1
 80023e0:	71bb      	strb	r3, [r7, #6]
 80023e2:	4613      	mov	r3, r2
 80023e4:	717b      	strb	r3, [r7, #5]
    switch (led_color) {
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	f200 8081 	bhi.w	80024f0 <LedControl_SetColorGeneral+0x11c>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <LedControl_SetColorGeneral+0x20>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	0800240d 	.word	0x0800240d
 80023f8:	08002433 	.word	0x08002433
 80023fc:	08002459 	.word	0x08002459
 8002400:	0800247f 	.word	0x0800247f
 8002404:	080024cb 	.word	0x080024cb
 8002408:	080024a5 	.word	0x080024a5
        case LED_COLOR_RED:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 800240c:	797a      	ldrb	r2, [r7, #5]
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff62 	bl	80022dc <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	2200      	movs	r2, #0
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff5c 	bl	80022dc <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2200      	movs	r2, #0
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff56 	bl	80022dc <LedControl_SetColorIndividual>
            break;
 8002430:	e05f      	b.n	80024f2 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_GREEN:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 8002432:	797a      	ldrb	r2, [r7, #5]
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff4f 	bl	80022dc <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff49 	bl	80022dc <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2200      	movs	r2, #0
 800244e:	2102      	movs	r1, #2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff43 	bl	80022dc <LedControl_SetColorIndividual>
			break;
 8002456:	e04c      	b.n	80024f2 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_BLUE:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, led_level);
 8002458:	797a      	ldrb	r2, [r7, #5]
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff3c 	bl	80022dc <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff36 	bl	80022dc <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	2200      	movs	r2, #0
 8002474:	2101      	movs	r1, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff30 	bl	80022dc <LedControl_SetColorIndividual>
            break;
 800247c:	e039      	b.n	80024f2 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_WHITE:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, led_level);
 800247e:	797a      	ldrb	r2, [r7, #5]
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff29 	bl	80022dc <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 800248a:	797a      	ldrb	r2, [r7, #5]
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff23 	bl	80022dc <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 8002496:	797a      	ldrb	r2, [r7, #5]
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2101      	movs	r1, #1
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff1d 	bl	80022dc <LedControl_SetColorIndividual>
        	break;
 80024a2:	e026      	b.n	80024f2 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_YELLOW:
			LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2102      	movs	r1, #2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff16 	bl	80022dc <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 80024b0:	797a      	ldrb	r2, [r7, #5]
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff10 	bl	80022dc <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 80024bc:	797a      	ldrb	r2, [r7, #5]
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2101      	movs	r1, #1
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff0a 	bl	80022dc <LedControl_SetColorIndividual>
			break;
 80024c8:	e013      	b.n	80024f2 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_BLACK:
			LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2102      	movs	r1, #2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff03 	bl	80022dc <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fefd 	bl	80022dc <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fef7 	bl	80022dc <LedControl_SetColorIndividual>
			break;
 80024ee:	e000      	b.n	80024f2 <LedControl_SetColorGeneral+0x11e>

        default:
            break;
 80024f0:	bf00      	nop
    }
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop

080024fc <LedControl_SetAllColor>:
 */
void
LedControl_SetAllColor(
	uint8_t led_color,
	uint8_t led_level
) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	460a      	mov	r2, r1
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	4613      	mov	r3, r2
 800250a:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < NUM_OF_LED; i++) {
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	e008      	b.n	8002524 <LedControl_SetAllColor+0x28>
    	LedControl_SetColorGeneral(i, led_color, led_level);
 8002512:	79ba      	ldrb	r2, [r7, #6]
 8002514:	79f9      	ldrb	r1, [r7, #7]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5b 	bl	80023d4 <LedControl_SetColorGeneral>
    for (uint8_t i = 0; i < NUM_OF_LED; i++) {
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	3301      	adds	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d9f3      	bls.n	8002512 <LedControl_SetAllColor+0x16>
    }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <LEDGPIO_Config>:
  * @brief  Configure GPIO for led
  * @param  None
  * @retval None
  */
static void LEDGPIO_Config(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
 800253a:	2101      	movs	r1, #1
 800253c:	2003      	movs	r0, #3
 800253e:	f7fe fed9 	bl	80012f4 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 0, 1, 3, 10 and 11 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_GREEN_PIN | LED1_BLUE_PIN | LED2_RED_PIN | LED2_GREEN_PIN;
 8002542:	f640 4303 	movw	r3, #3075	; 0xc03
 8002546:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002548:	2302      	movs	r3, #2
 800254a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800254c:	2303      	movs	r3, #3
 800254e:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002550:	2300      	movs	r3, #0
 8002552:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8002554:	2301      	movs	r3, #1
 8002556:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	4818      	ldr	r0, [pc, #96]	; (80025c0 <LEDGPIO_Config+0x8c>)
 800255e:	f7fe fb11 	bl	8000b84 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2);
 8002562:	2201      	movs	r2, #1
 8002564:	2100      	movs	r1, #0
 8002566:	4816      	ldr	r0, [pc, #88]	; (80025c0 <LEDGPIO_Config+0x8c>)
 8002568:	f7fe fbeb 	bl	8000d42 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
 800256c:	2201      	movs	r2, #1
 800256e:	2101      	movs	r1, #1
 8002570:	4813      	ldr	r0, [pc, #76]	; (80025c0 <LEDGPIO_Config+0x8c>)
 8002572:	f7fe fbe6 	bl	8000d42 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);
 8002576:	2201      	movs	r2, #1
 8002578:	210b      	movs	r1, #11
 800257a:	4811      	ldr	r0, [pc, #68]	; (80025c0 <LEDGPIO_Config+0x8c>)
 800257c:	f7fe fbe1 	bl	8000d42 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_TIM1);
 8002580:	2201      	movs	r2, #1
 8002582:	210a      	movs	r1, #10
 8002584:	480e      	ldr	r0, [pc, #56]	; (80025c0 <LEDGPIO_Config+0x8c>)
 8002586:	f7fe fbdc 	bl	8000d42 <GPIO_PinAFConfig>

	/* GPIOB Configuration: Channel 13 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_RED_PIN;
 800258a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	480b      	ldr	r0, [pc, #44]	; (80025c4 <LEDGPIO_Config+0x90>)
 8002596:	f7fe faf5 	bl	8000b84 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_TIM1);
 800259a:	2201      	movs	r2, #1
 800259c:	210d      	movs	r1, #13
 800259e:	4809      	ldr	r0, [pc, #36]	; (80025c4 <LEDGPIO_Config+0x90>)
 80025a0:	f7fe fbcf 	bl	8000d42 <GPIO_PinAFConfig>

	/* GPIOA Configuration: Board STM32 */
	GPIO_InitStructure.GPIO_Pin = LED_BOARD_PIN;
 80025a4:	2320      	movs	r3, #32
 80025a6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80025a8:	2301      	movs	r3, #1
 80025aa:	713b      	strb	r3, [r7, #4]
	GPIO_Init(LED_BOARD_PORT, &GPIO_InitStructure);
 80025ac:	463b      	mov	r3, r7
 80025ae:	4619      	mov	r1, r3
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <LEDGPIO_Config+0x8c>)
 80025b2:	f7fe fae7 	bl	8000b84 <GPIO_Init>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400

080025c8 <LEDTIM_Config>:
  * @brief  Configure the TIM1 and TIM2 Pins.
  * @param  None
  * @retval None
  */
static void LEDTIM_Config(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	uint16_t ChannelPulse = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Compute CCR1 value to generate a duty cycle at 50% for channel 1 and 1N */
	ChannelPulse = (uint16_t) (((uint32_t) 0 * (LED_TIMER_PERIOD - 1)) / 100);
 80025d2:	2300      	movs	r3, #0
 80025d4:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* TIM1 and TIM2 clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80025d6:	2101      	movs	r1, #1
 80025d8:	2001      	movs	r0, #1
 80025da:	f7fe fecb 	bl	8001374 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80025de:	2101      	movs	r1, #1
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7fe fea7 	bl	8001334 <RCC_APB1PeriphClockCmd>

	/* Time Base configuration */
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80025ea:	2300      	movs	r3, #0
 80025ec:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_Period = LED_TIMER_PERIOD;
 80025ee:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <LEDTIM_Config+0xe0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2e      	ldr	r2, [pc, #184]	; (80026ac <LEDTIM_Config+0xe4>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	0b9b      	lsrs	r3, r3, #14
 80025fa:	3b01      	subs	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	843b      	strh	r3, [r7, #32]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8002608:	f107 0318 	add.w	r3, r7, #24
 800260c:	4619      	mov	r1, r3
 800260e:	4828      	ldr	r0, [pc, #160]	; (80026b0 <LEDTIM_Config+0xe8>)
 8002610:	f7fe fef0 	bl	80013f4 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	4619      	mov	r1, r3
 800261a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800261e:	f7fe fee9 	bl	80013f4 <TIM_TimeBaseInit>

	/* Channel 1, 2, 3 and 4 Configuration in PWM mode */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002622:	2370      	movs	r3, #112	; 0x70
 8002624:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002626:	2301      	movs	r3, #1
 8002628:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 800262a:	2304      	movs	r3, #4
 800262c:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_Pulse = ChannelPulse;
 800262e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002630:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002632:	2302      	movs	r3, #2
 8002634:	823b      	strh	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8002636:	2300      	movs	r3, #0
 8002638:	827b      	strh	r3, [r7, #18]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 800263a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263e:	82bb      	strh	r3, [r7, #20]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8002640:	2300      	movs	r3, #0
 8002642:	82fb      	strh	r3, [r7, #22]

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4819      	ldr	r0, [pc, #100]	; (80026b0 <LEDTIM_Config+0xe8>)
 800264a:	f7fe ff5f 	bl	800150c <TIM_OC1Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4817      	ldr	r0, [pc, #92]	; (80026b0 <LEDTIM_Config+0xe8>)
 8002654:	f7ff f85c 	bl	8001710 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4814      	ldr	r0, [pc, #80]	; (80026b0 <LEDTIM_Config+0xe8>)
 800265e:	f7ff f8dd 	bl	800181c <TIM_OC4Init>

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	4619      	mov	r1, r3
 8002666:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800266a:	f7fe ff4f 	bl	800150c <TIM_OC1Init>
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	4619      	mov	r1, r3
 8002672:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002676:	f7fe ffc3 	bl	8001600 <TIM_OC2Init>

	/* TIM1 and TIM2 counter enable */
	TIM_Cmd(TIM1, ENABLE);
 800267a:	2101      	movs	r1, #1
 800267c:	480c      	ldr	r0, [pc, #48]	; (80026b0 <LEDTIM_Config+0xe8>)
 800267e:	f7fe ff25 	bl	80014cc <TIM_Cmd>
	TIM_Cmd(TIM2, ENABLE);
 8002682:	2101      	movs	r1, #1
 8002684:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002688:	f7fe ff20 	bl	80014cc <TIM_Cmd>

	/* TIM1 and TIM2 Main Output Enable */
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800268c:	2101      	movs	r1, #1
 800268e:	4808      	ldr	r0, [pc, #32]	; (80026b0 <LEDTIM_Config+0xe8>)
 8002690:	f7ff f964 	bl	800195c <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8002694:	2101      	movs	r1, #1
 8002696:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800269a:	f7ff f95f 	bl	800195c <TIM_CtrlPWMOutputs>
}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	; 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000
 80026ac:	eeb83a0d 	.word	0xeeb83a0d
 80026b0:	40010000 	.word	0x40010000

080026b4 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <EventSchedulerInit+0x2c>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6013      	str	r3, [r2, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 80026c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026cc:	2201      	movs	r2, #1
 80026ce:	4905      	ldr	r1, [pc, #20]	; (80026e4 <EventSchedulerInit+0x30>)
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <EventSchedulerInit+0x34>)
 80026d2:	f002 ff1d 	bl	8005510 <bufInit>
    }
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000017c 	.word	0x2000017c
 80026e4:	20000280 	.word	0x20000280
 80026e8:	20000180 	.word	0x20000180

080026ec <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 80026f6:	1dfb      	adds	r3, r7, #7
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <EventSchedulerAdd+0x28>)
 80026fc:	f002 ff6e 	bl	80055dc <bufEnDat>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <EventSchedulerAdd+0x1e>
        return SUCCESS;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <EventSchedulerAdd+0x20>
    }
    
    return FAIL;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000280 	.word	0x20000280

08002718 <processEventScheduler>:
 * @brief  Proccess event in queue
 * @param  None
 * @retval None
 */
void
processEventScheduler(void) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
	uint8_t event;
    
    if (pAppStateFunc != NULL) {
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <processEventScheduler+0x30>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <processEventScheduler+0x28>
        if (bufDeDat(&eventQueue, (uint8_t *)&event) == ERR_OK) {
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	4619      	mov	r1, r3
 800272a:	4808      	ldr	r0, [pc, #32]	; (800274c <processEventScheduler+0x34>)
 800272c:	f002 ffa6 	bl	800567c <bufDeDat>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d104      	bne.n	8002740 <processEventScheduler+0x28>
            pAppStateFunc(event);
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <processEventScheduler+0x30>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	79fa      	ldrb	r2, [r7, #7]
 800273c:	4610      	mov	r0, r2
 800273e:	4798      	blx	r3
        }
    }
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000017c 	.word	0x2000017c
 800274c:	20000280 	.word	0x20000280

08002750 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	da0b      	bge.n	800277c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <NVIC_SetPriority+0x4c>)
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	3b04      	subs	r3, #4
 8002772:	0112      	lsls	r2, r2, #4
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	440b      	add	r3, r1
 8002778:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800277a:	e009      	b.n	8002790 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <NVIC_SetPriority+0x50>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	0112      	lsls	r2, r2, #4
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	440b      	add	r3, r1
 800278c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f7ff ffc2 	bl	8002750 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 80027ee:	463b      	mov	r3, r7
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fcd1 	bl	8001198 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <TimerInit+0x3c>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ffcf 	bl	80027a4 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8002806:	2101      	movs	r1, #1
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	f7ff ffa0 	bl	8002750 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8002810:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002814:	2100      	movs	r1, #0
 8002816:	4804      	ldr	r0, [pc, #16]	; (8002828 <TimerInit+0x40>)
 8002818:	f002 ff75 	bl	8005706 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	10624dd3 	.word	0x10624dd3
 8002828:	20000290 	.word	0x20000290

0800282c <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	75fb      	strb	r3, [r7, #23]
 8002840:	e04c      	b.n	80028dc <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 8002842:	7dfa      	ldrb	r2, [r7, #23]
 8002844:	4929      	ldr	r1, [pc, #164]	; (80028ec <TimerStart+0xc0>)
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	3310      	adds	r3, #16
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d13e      	bne.n	80028d6 <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8002858:	7dfa      	ldrb	r2, [r7, #23]
 800285a:	4924      	ldr	r1, [pc, #144]	; (80028ec <TimerStart+0xc0>)
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 800286a:	7dfa      	ldrb	r2, [r7, #23]
 800286c:	491f      	ldr	r1, [pc, #124]	; (80028ec <TimerStart+0xc0>)
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	3310      	adds	r3, #16
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 800287e:	7dfa      	ldrb	r2, [r7, #23]
 8002880:	491a      	ldr	r1, [pc, #104]	; (80028ec <TimerStart+0xc0>)
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	330c      	adds	r3, #12
 800288e:	79fa      	ldrb	r2, [r7, #7]
 8002890:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8002892:	7dfa      	ldrb	r2, [r7, #23]
 8002894:	4915      	ldr	r1, [pc, #84]	; (80028ec <TimerStart+0xc0>)
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	3314      	adds	r3, #20
 80028a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028a4:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 80028a6:	7dfc      	ldrb	r4, [r7, #23]
 80028a8:	f000 f872 	bl	8002990 <GetMilSecTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	490f      	ldr	r1, [pc, #60]	; (80028ec <TimerStart+0xc0>)
 80028b0:	4623      	mov	r3, r4
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4423      	add	r3, r4
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	3304      	adds	r3, #4
 80028bc:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 80028be:	7dfa      	ldrb	r2, [r7, #23]
 80028c0:	490a      	ldr	r1, [pc, #40]	; (80028ec <TimerStart+0xc0>)
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	3308      	adds	r3, #8
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
 80028d4:	e006      	b.n	80028e4 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	3301      	adds	r3, #1
 80028da:	75fb      	strb	r3, [r7, #23]
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	d9af      	bls.n	8002842 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 80028e2:	23ff      	movs	r3, #255	; 0xff
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	20000290 	.word	0x20000290

080028f0 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d80a      	bhi.n	8002916 <TimerStop+0x26>
 8002900:	79fa      	ldrb	r2, [r7, #7]
 8002902:	4922      	ldr	r1, [pc, #136]	; (800298c <TimerStop+0x9c>)
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3310      	adds	r3, #16
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <TimerStop+0x2a>
        return 0;
 8002916:	2300      	movs	r3, #0
 8002918:	e031      	b.n	800297e <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 800291a:	79fa      	ldrb	r2, [r7, #7]
 800291c:	491b      	ldr	r1, [pc, #108]	; (800298c <TimerStop+0x9c>)
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 800292c:	79fa      	ldrb	r2, [r7, #7]
 800292e:	4917      	ldr	r1, [pc, #92]	; (800298c <TimerStop+0x9c>)
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	3310      	adds	r3, #16
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	4912      	ldr	r1, [pc, #72]	; (800298c <TimerStop+0x9c>)
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	330c      	adds	r3, #12
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8002954:	79fa      	ldrb	r2, [r7, #7]
 8002956:	490d      	ldr	r1, [pc, #52]	; (800298c <TimerStop+0x9c>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	3308      	adds	r3, #8
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8002968:	79fa      	ldrb	r2, [r7, #7]
 800296a:	4908      	ldr	r1, [pc, #32]	; (800298c <TimerStop+0x9c>)
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3304      	adds	r3, #4
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    
    return 1;
 800297c:	2301      	movs	r3, #1
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000290 	.word	0x20000290

08002990 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <GetMilSecTick+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000410 	.word	0x20000410

080029a8 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	e068      	b.n	8002a86 <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	4938      	ldr	r1, [pc, #224]	; (8002a98 <processTimerScheduler+0xf0>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	3310      	adds	r3, #16
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d05a      	beq.n	8002a80 <processTimerScheduler+0xd8>
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f865 	bl	8002a9c <TimeExpired>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d053      	beq.n	8002a80 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	492f      	ldr	r1, [pc, #188]	; (8002a98 <processTimerScheduler+0xf0>)
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	3310      	adds	r3, #16
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	492a      	ldr	r1, [pc, #168]	; (8002a98 <processTimerScheduler+0xf0>)
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	3314      	adds	r3, #20
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	4925      	ldr	r1, [pc, #148]	; (8002a98 <processTimerScheduler+0xf0>)
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	330c      	adds	r3, #12
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2bff      	cmp	r3, #255	; 0xff
 8002a16:	d020      	beq.n	8002a5a <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	491f      	ldr	r1, [pc, #124]	; (8002a98 <processTimerScheduler+0xf0>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	330c      	adds	r3, #12
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d014      	beq.n	8002a5a <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	4919      	ldr	r1, [pc, #100]	; (8002a98 <processTimerScheduler+0xf0>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	330c      	adds	r3, #12
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b2d8      	uxtb	r0, r3
 8002a48:	4913      	ldr	r1, [pc, #76]	; (8002a98 <processTimerScheduler+0xf0>)
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	330c      	adds	r3, #12
 8002a56:	4602      	mov	r2, r0
 8002a58:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <processTimerScheduler+0xf0>)
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	330c      	adds	r3, #12
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff3b 	bl	80028f0 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	3301      	adds	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	d993      	bls.n	80029b4 <processTimerScheduler+0xc>
        }
    }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000290 	.word	0x20000290

08002a9c <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aaa:	b672      	cpsid	i
}
 8002aac:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 8002aae:	f7ff ff6f 	bl	8002990 <GetMilSecTick>
 8002ab2:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	d80a      	bhi.n	8002ad0 <TimeExpired+0x34>
 8002aba:	79fa      	ldrb	r2, [r7, #7]
 8002abc:	492b      	ldr	r1, [pc, #172]	; (8002b6c <TimeExpired+0xd0>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3310      	adds	r3, #16
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad0:	b662      	cpsie	i
}
 8002ad2:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e044      	b.n	8002b62 <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 8002ad8:	79fa      	ldrb	r2, [r7, #7]
 8002ada:	4924      	ldr	r1, [pc, #144]	; (8002b6c <TimeExpired+0xd0>)
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d30c      	bcc.n	8002b0a <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 8002af0:	79fa      	ldrb	r2, [r7, #7]
 8002af2:	491e      	ldr	r1, [pc, #120]	; (8002b6c <TimeExpired+0xd0>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	3304      	adds	r3, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e00e      	b.n	8002b28 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 8002b0a:	79fa      	ldrb	r2, [r7, #7]
 8002b0c:	4917      	ldr	r1, [pc, #92]	; (8002b6c <TimeExpired+0xd0>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	3304      	adds	r3, #4
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 8002b28:	79fa      	ldrb	r2, [r7, #7]
 8002b2a:	4910      	ldr	r1, [pc, #64]	; (8002b6c <TimeExpired+0xd0>)
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3308      	adds	r3, #8
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d203      	bcs.n	8002b48 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b40:	b662      	cpsie	i
}
 8002b42:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e00c      	b.n	8002b62 <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8002b48:	79fa      	ldrb	r2, [r7, #7]
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <TimeExpired+0xd0>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3304      	adds	r3, #4
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b5c:	b662      	cpsie	i
}
 8002b5e:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 8002b60:	2301      	movs	r3, #1
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000290 	.word	0x20000290

08002b70 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <SysTick_Handler+0x18>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <SysTick_Handler+0x18>)
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	20000410 	.word	0x20000410

08002b8c <LightSensor_Init>:
 * @retval None
 */
void
LightSensor_Init(
	ADC_READ_MODE adc_read_mode
) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b09e      	sub	sp, #120	; 0x78
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
 8002b96:	2101      	movs	r1, #1
 8002b98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b9c:	f7fe fbea 	bl	8001374 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	2004      	movs	r0, #4
 8002ba4:	f7fe fba6 	bl	80012f4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8002ba8:	2101      	movs	r1, #1
 8002baa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002bae:	f7fe fba1 	bl	80012f4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = ADC_PIN;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	GPIO_Init(ADC_PORT, &GPIO_InitStructure);
 8002bc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4843      	ldr	r0, [pc, #268]	; (8002cd8 <LightSensor_Init+0x14c>)
 8002bca:	f7fd ffdb 	bl	8000b84 <GPIO_Init>

	/* ADC Deinitialization ***************************************************/
	ADC_DeInit();
 8002bce:	f7fd fc61 	bl	8000494 <ADC_DeInit>

	/* ADC Common Init ********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	66bb      	str	r3, [r7, #104]	; 0x68
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	673b      	str	r3, [r7, #112]	; 0x70
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8002bde:	2300      	movs	r3, #0
 8002be0:	677b      	str	r3, [r7, #116]	; 0x74
	ADC_CommonInit(&ADC_CommonInitStructure);
 8002be2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcb8 	bl	800055c <ADC_CommonInit>

	/* ADC1 Init **************************************************************/
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8002bec:	2300      	movs	r3, #0
 8002bee:	653b      	str	r3, [r7, #80]	; 0x50
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002c04:	2300      	movs	r3, #0
 8002c06:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	ADC_Init(ADCx_SENSOR, &ADC_InitStructure);
 8002c0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c12:	4619      	mov	r1, r3
 8002c14:	4831      	ldr	r0, [pc, #196]	; (8002cdc <LightSensor_Init+0x150>)
 8002c16:	f7fd fc4b 	bl	80004b0 <ADC_Init>

	if (adc_read_mode == ADC_READ_MODE_POLLING)
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d110      	bne.n	8002c42 <LightSensor_Init+0xb6>
	{
		ADC_EOCOnEachRegularChannelCmd(ADCx_SENSOR, ENABLE);
 8002c20:	2101      	movs	r1, #1
 8002c22:	482e      	ldr	r0, [pc, #184]	; (8002cdc <LightSensor_Init+0x150>)
 8002c24:	f7fd fdb8 	bl	8000798 <ADC_EOCOnEachRegularChannelCmd>
		ADC_ContinuousModeCmd(ADCx_SENSOR, DISABLE);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	482c      	ldr	r0, [pc, #176]	; (8002cdc <LightSensor_Init+0x150>)
 8002c2c:	f7fd fdd0 	bl	80007d0 <ADC_ContinuousModeCmd>
		ADC_DiscModeChannelCountConfig(ADCx_SENSOR, 1);
 8002c30:	2101      	movs	r1, #1
 8002c32:	482a      	ldr	r0, [pc, #168]	; (8002cdc <LightSensor_Init+0x150>)
 8002c34:	f7fd fde8 	bl	8000808 <ADC_DiscModeChannelCountConfig>
		ADC_DiscModeCmd(ADCx_SENSOR, ENABLE);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4828      	ldr	r0, [pc, #160]	; (8002cdc <LightSensor_Init+0x150>)
 8002c3c:	f7fd fe06 	bl	800084c <ADC_DiscModeCmd>
 8002c40:	e036      	b.n	8002cb0 <LightSensor_Init+0x124>
	}
	else
	{
		/* DMA2_Stream0 channel0 configuration ********************************/
		DMA_DeInit(DMA2_Stream0);
 8002c42:	4827      	ldr	r0, [pc, #156]	; (8002ce0 <LightSensor_Init+0x154>)
 8002c44:	f7fd fe56 	bl	80008f4 <DMA_DeInit>
		DMA_InitStructure.DMA_Channel = DMA_CHANNELx;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADCx_DR_ADDRESS;
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <LightSensor_Init+0x158>)
 8002c4e:	613b      	str	r3, [r7, #16]
		DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&uhADCConvertedValue;
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <LightSensor_Init+0x15c>)
 8002c52:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
		DMA_InitStructure.DMA_BufferSize = 1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	623b      	str	r3, [r7, #32]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8002c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8002c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8002c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
		DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
		DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8002c80:	2301      	movs	r3, #1
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
		DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002c84:	2300      	movs	r3, #0
 8002c86:	643b      	str	r3, [r7, #64]	; 0x40
		DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	647b      	str	r3, [r7, #68]	; 0x44
		DMA_Init(DMA_STREAMx, &DMA_InitStructure);
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	4619      	mov	r1, r3
 8002c92:	4813      	ldr	r0, [pc, #76]	; (8002ce0 <LightSensor_Init+0x154>)
 8002c94:	f7fd ff02 	bl	8000a9c <DMA_Init>

		/* DMA2_Stream0 enable */
		DMA_Cmd(DMA_STREAMx, ENABLE);
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4811      	ldr	r0, [pc, #68]	; (8002ce0 <LightSensor_Init+0x154>)
 8002c9c:	f7fd ff56 	bl	8000b4c <DMA_Cmd>

		/* Enable DMA request after last transfer (Single-ADC mode) */
		ADC_DMARequestAfterLastTransferCmd(ADCx_SENSOR, ENABLE);
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	480e      	ldr	r0, [pc, #56]	; (8002cdc <LightSensor_Init+0x150>)
 8002ca4:	f7fd fe0a 	bl	80008bc <ADC_DMARequestAfterLastTransferCmd>

		/* Enable ADC1 DMA */
		ADC_DMACmd(ADCx_SENSOR, ENABLE);
 8002ca8:	2101      	movs	r1, #1
 8002caa:	480c      	ldr	r0, [pc, #48]	; (8002cdc <LightSensor_Init+0x150>)
 8002cac:	f7fd fdea 	bl	8000884 <ADC_DMACmd>
	}

	/* ADC1 regular channel15 configuration ************************************/
	ADC_RegularChannelConfig(ADCx_SENSOR, ADC_Channel_15, 1, ADC_SampleTime_15Cycles);
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	210f      	movs	r1, #15
 8002cb6:	4809      	ldr	r0, [pc, #36]	; (8002cdc <LightSensor_Init+0x150>)
 8002cb8:	f7fd fc94 	bl	80005e4 <ADC_RegularChannelConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADCx_SENSOR, ENABLE);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4807      	ldr	r0, [pc, #28]	; (8002cdc <LightSensor_Init+0x150>)
 8002cc0:	f7fd fc74 	bl	80005ac <ADC_Cmd>

	if (adc_read_mode == ADC_READ_MODE_DMA)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <LightSensor_Init+0x144>
	{
		/* Start ADC1 Software Conversion */
		ADC_SoftwareStartConv(ADCx_SENSOR);
 8002cca:	4804      	ldr	r0, [pc, #16]	; (8002cdc <LightSensor_Init+0x150>)
 8002ccc:	f7fd fd54 	bl	8000778 <ADC_SoftwareStartConv>
	}
}
 8002cd0:	bf00      	nop
 8002cd2:	3778      	adds	r7, #120	; 0x78
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40020800 	.word	0x40020800
 8002cdc:	40012000 	.word	0x40012000
 8002ce0:	40026410 	.word	0x40026410
 8002ce4:	4001204c 	.word	0x4001204c
 8002ce8:	20000414 	.word	0x20000414

08002cec <LightSensor_MeasureUseDMAMode>:
 * @brief  Measure value ADC in mode DMA
 * @param  None
 * @retval Value of ADC
 */
uint16_t
LightSensor_MeasureUseDMAMode(void) {
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
	return uhADCConvertedValue;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <LightSensor_MeasureUseDMAMode+0x14>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	20000414 	.word	0x20000414

08002d04 <TemHumSensor_Init>:
 * @brief  Initialize module SI7020
 * @param  None
 * @retval None
 */
void TemHumSensor_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
    BYTE CMDR_USERREG1[2] = { 2, 0xE7 };
    BYTE CMDR_HEATERCTR[2] = { 2, 0x11 };
    #endif

    /* Initialized module i2c */
    i2c_config();
 8002d08:	f000 f8be 	bl	8002e88 <i2c_config>

    Si7020GetVerFW();

    Si7020GetSerialNum(pReg);
    #endif /* SI7020_DEBUG */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <TemHumSensor_GetTemp>:
 * @brief   Get value temperature
 * @param   None
 * @retval  Temperature
 */
uint32_t TemHumSensor_GetTemp(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af02      	add	r7, sp, #8
	uint32_t wRetval;
    uint8_t pByRetval[3] = { 0 };
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <TemHumSensor_GetTemp+0x70>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	80bb      	strh	r3, [r7, #4]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	71bb      	strb	r3, [r7, #6]
    uint8_t byCheckCRC = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]

    uint8_t CMD_MEASURE_TEMP[2] =  { 2, 0xE3 };
 8002d24:	f24e 3302 	movw	r3, #58114	; 0xe302
 8002d28:	803b      	strh	r3, [r7, #0]

    i2c_read_reg_expand(SI7020_ADDR, CMD_MEASURE_TEMP, pByRetval, 3, g_byTimeWaitGetTemp);
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <TemHumSensor_GetTemp+0x74>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	1d3a      	adds	r2, r7, #4
 8002d32:	4639      	mov	r1, r7
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2303      	movs	r3, #3
 8002d38:	2040      	movs	r0, #64	; 0x40
 8002d3a:	f000 f8ef 	bl	8002f1c <i2c_read_reg_expand>
    byCheckCRC = CalculateCRC8(pByRetval, 2);
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f85c 	bl	8002e00 <CalculateCRC8>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]

    /* Check CRC value */
    if (byCheckCRC == pByRetval[2]) {
 8002d4c:	79bb      	ldrb	r3, [r7, #6]
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <TemHumSensor_GetTemp+0x48>
    }
    else {
        return 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e00f      	b.n	8002d78 <TemHumSensor_GetTemp+0x68>
    }

    wRetval = (pByRetval[0] << 8) + pByRetval[1];
 8002d58:	793b      	ldrb	r3, [r7, #4]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	797a      	ldrb	r2, [r7, #5]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60bb      	str	r3, [r7, #8]
    wRetval = ((wRetval * 17572) >> 16) - 4685;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f244 42a4 	movw	r2, #17572	; 0x44a4
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f5a3 5392 	sub.w	r3, r3, #4672	; 0x1240
 8002d72:	3b0d      	subs	r3, #13
 8002d74:	60bb      	str	r3, [r7, #8]

    return wRetval;
 8002d76:	68bb      	ldr	r3, [r7, #8]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	080068a0 	.word	0x080068a0
 8002d84:	20000060 	.word	0x20000060

08002d88 <TemHumSensor_GetHumi>:
 * @brief   Get value humidity
 * @param   None
 * @retval  Humidity
 */
uint32_t TemHumSensor_GetHumi(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af02      	add	r7, sp, #8
	uint32_t wRetval;
	uint8_t pByRetval[3] = { 0 };
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <TemHumSensor_GetHumi+0x70>)
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	80bb      	strh	r3, [r7, #4]
 8002d94:	2300      	movs	r3, #0
 8002d96:	71bb      	strb	r3, [r7, #6]
	uint8_t byCheckCRC = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]

	uint8_t CMD_MEASURE_RH[2] =  { 2, 0xE5 };
 8002d9c:	f24e 5302 	movw	r3, #58626	; 0xe502
 8002da0:	803b      	strh	r3, [r7, #0]

    i2c_read_reg_expand(SI7020_ADDR, CMD_MEASURE_RH, pByRetval, 3, g_byTimeWaitGetHumi);
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <TemHumSensor_GetHumi+0x74>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	1d3a      	adds	r2, r7, #4
 8002daa:	4639      	mov	r1, r7
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2303      	movs	r3, #3
 8002db0:	2040      	movs	r0, #64	; 0x40
 8002db2:	f000 f8b3 	bl	8002f1c <i2c_read_reg_expand>
    byCheckCRC = CalculateCRC8(pByRetval, 2);
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2102      	movs	r1, #2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f820 	bl	8002e00 <CalculateCRC8>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	73fb      	strb	r3, [r7, #15]

    /* Check CRC value */
    if (byCheckCRC == pByRetval[2]) {
 8002dc4:	79bb      	ldrb	r3, [r7, #6]
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <TemHumSensor_GetHumi+0x48>
    }
    else {
        return 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e00e      	b.n	8002dee <TemHumSensor_GetHumi+0x66>
    }

    wRetval = (pByRetval[0] << 8) + pByRetval[1];
 8002dd0:	793b      	ldrb	r3, [r7, #4]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	797a      	ldrb	r2, [r7, #5]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60bb      	str	r3, [r7, #8]
    wRetval = ((wRetval * 12500) >> 16) - 600;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dea:	60bb      	str	r3, [r7, #8]

    return wRetval;
 8002dec:	68bb      	ldr	r3, [r7, #8]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	080068a0 	.word	0x080068a0
 8002dfc:	20000061 	.word	0x20000061

08002e00 <CalculateCRC8>:
 * @brief  CRC-8 use x^8 + x^5 + x^4 + 1
 * @param  None
 * @retval None
 */
uint8_t CalculateCRC8(uint8_t *pByData, uint8_t byLength)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
    uint8_t i, j = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73bb      	strb	r3, [r7, #14]
    uint16_t wCrc = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	81bb      	strh	r3, [r7, #12]
    uint8_t *pByCurrData = pByData;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	60bb      	str	r3, [r7, #8]

    for (j = 0; j < byLength; j++, pByCurrData++) {
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73bb      	strb	r3, [r7, #14]
 8002e1c:	e025      	b.n	8002e6a <CalculateCRC8+0x6a>
        wCrc ^= ((uint16_t)(*pByCurrData) << 8);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e2a:	4053      	eors	r3, r2
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 8; i++) {
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e010      	b.n	8002e58 <CalculateCRC8+0x58>
            if ((wCrc & 0x8000) != 0)
 8002e36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da06      	bge.n	8002e4c <CalculateCRC8+0x4c>
                wCrc ^= (0x1310 << 3);
 8002e3e:	89bb      	ldrh	r3, [r7, #12]
 8002e40:	f483 43ce 	eor.w	r3, r3, #26368	; 0x6700
 8002e44:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	81bb      	strh	r3, [r7, #12]
            wCrc <<= 1;
 8002e4c:	89bb      	ldrh	r3, [r7, #12]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 8; i++) {
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	3301      	adds	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b07      	cmp	r3, #7
 8002e5c:	d9eb      	bls.n	8002e36 <CalculateCRC8+0x36>
    for (j = 0; j < byLength; j++, pByCurrData++) {
 8002e5e:	7bbb      	ldrb	r3, [r7, #14]
 8002e60:	3301      	adds	r3, #1
 8002e62:	73bb      	strb	r3, [r7, #14]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	3301      	adds	r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	7bba      	ldrb	r2, [r7, #14]
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3d5      	bcc.n	8002e1e <CalculateCRC8+0x1e>
        }
    }
    return ((wCrc >> 8) & 0xFF);
 8002e72:	89bb      	ldrh	r3, [r7, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <i2c_config>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
void i2c_config(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
	// Initialization struct
	I2C_InitTypeDef I2C_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	// Step 1: Initialize I2C
	RCC_APB1PeriphClockCmd(I2Cx_RCC, ENABLE);
 8002e8e:	2101      	movs	r1, #1
 8002e90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002e94:	f7fe fa4e 	bl	8001334 <RCC_APB1PeriphClockCmd>
	I2C_InitStruct.I2C_ClockSpeed = 400000;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <i2c_config+0x88>)
 8002e9a:	60bb      	str	r3, [r7, #8]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	81bb      	strh	r3, [r7, #12]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8002ea0:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002ea4:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8002eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eae:	827b      	strh	r3, [r7, #18]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eb4:	82bb      	strh	r3, [r7, #20]
	I2C_Init(I2Cx_SENSOR, &I2C_InitStruct);
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4815      	ldr	r0, [pc, #84]	; (8002f14 <i2c_config+0x8c>)
 8002ebe:	f7fd ff89 	bl	8000dd4 <I2C_Init>
	I2C_Cmd(I2Cx_SENSOR, ENABLE);
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4813      	ldr	r0, [pc, #76]	; (8002f14 <i2c_config+0x8c>)
 8002ec6:	f7fe f847 	bl	8000f58 <I2C_Cmd>

	// Step 2: Initialize GPIO as open drain alternate function
	RCC_AHB1PeriphClockCmd(I2C_GPIO_RCC, ENABLE);
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f7fe fa11 	bl	80012f4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Pin = I2C_PIN_SCL | I2C_PIN_SDA;
 8002ed2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ed6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002edc:	2302      	movs	r3, #2
 8002ede:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(I2C_GPIO, &GPIO_InitStruct);
 8002ee8:	463b      	mov	r3, r7
 8002eea:	4619      	mov	r1, r3
 8002eec:	480a      	ldr	r0, [pc, #40]	; (8002f18 <i2c_config+0x90>)
 8002eee:	f7fd fe49 	bl	8000b84 <GPIO_Init>

	/* Connect PXx to I2C_SCL */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource8, GPIO_AF_I2C1);
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	2108      	movs	r1, #8
 8002ef6:	4808      	ldr	r0, [pc, #32]	; (8002f18 <i2c_config+0x90>)
 8002ef8:	f7fd ff23 	bl	8000d42 <GPIO_PinAFConfig>

	/* Connect PXx to I2C_SDA */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource9, GPIO_AF_I2C1);
 8002efc:	2204      	movs	r2, #4
 8002efe:	2109      	movs	r1, #9
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <i2c_config+0x90>)
 8002f02:	f7fd ff1e 	bl	8000d42 <GPIO_PinAFConfig>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	00061a80 	.word	0x00061a80
 8002f14:	40005400 	.word	0x40005400
 8002f18:	40020400 	.word	0x40020400

08002f1c <i2c_read_reg_expand>:
    uint8_t address,
    uint8_t* pAddressReg,
    uint8_t* pDataRead,
    uint8_t byLengthData,
    uint16_t wDelay
) {
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	73bb      	strb	r3, [r7, #14]
    uint8_t byLenCmd = pAddressReg[0];
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	757b      	strb	r3, [r7, #21]

    i2c_start();
 8002f36:	f000 f847 	bl	8002fc8 <i2c_start>
	i2c_address_direction(address << 1, I2C_Direction_Transmitter);
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f868 	bl	8003018 <i2c_address_direction>

    for (uint8_t i = 1; i < byLenCmd; i++) {
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
 8002f4c:	e009      	b.n	8002f62 <i2c_read_reg_expand+0x46>
        i2c_transmit(pAddressReg[i]);
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	4413      	add	r3, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f88e 	bl	8003078 <i2c_transmit>
    for (uint8_t i = 1; i < byLenCmd; i++) {
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
 8002f62:	7dfa      	ldrb	r2, [r7, #23]
 8002f64:	7d7b      	ldrb	r3, [r7, #21]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3f1      	bcc.n	8002f4e <i2c_read_reg_expand+0x32>

//    if (wDelay > 0) {
//        delay_ms(wDelay);
//    }

	i2c_stop();
 8002f6a:	f000 f84b 	bl	8003004 <i2c_stop>
	i2c_start();
 8002f6e:	f000 f82b 	bl	8002fc8 <i2c_start>
    i2c_address_direction(address << 1, I2C_Direction_Receiver);
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f84c 	bl	8003018 <i2c_address_direction>

    for (uint8_t i = 0; i < byLengthData; i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	75bb      	strb	r3, [r7, #22]
 8002f84:	e016      	b.n	8002fb4 <i2c_read_reg_expand+0x98>
	{
		if (i == (byLengthData - 1))
 8002f86:	7dba      	ldrb	r2, [r7, #22]
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d107      	bne.n	8002fa0 <i2c_read_reg_expand+0x84>
		{
			pDataRead[i] = i2c_receive_nack();
 8002f90:	7dbb      	ldrb	r3, [r7, #22]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	18d4      	adds	r4, r2, r3
 8002f96:	f000 f8a3 	bl	80030e0 <i2c_receive_nack>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	7023      	strb	r3, [r4, #0]
 8002f9e:	e006      	b.n	8002fae <i2c_read_reg_expand+0x92>
		}
		else
		{
			pDataRead[i] = i2c_receive_ack();
 8002fa0:	7dbb      	ldrb	r3, [r7, #22]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	18d4      	adds	r4, r2, r3
 8002fa6:	f000 f883 	bl	80030b0 <i2c_receive_ack>
 8002faa:	4603      	mov	r3, r0
 8002fac:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < byLengthData; i++)
 8002fae:	7dbb      	ldrb	r3, [r7, #22]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	75bb      	strb	r3, [r7, #22]
 8002fb4:	7dba      	ldrb	r2, [r7, #22]
 8002fb6:	7bbb      	ldrb	r3, [r7, #14]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3e4      	bcc.n	8002f86 <i2c_read_reg_expand+0x6a>
		}
	}
	i2c_stop();
 8002fbc:	f000 f822 	bl	8003004 <i2c_stop>
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd90      	pop	{r4, r7, pc}

08002fc8 <i2c_start>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
void i2c_start(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	// Wait until I2Cx is not busy anymore
	while (I2C_GetFlagStatus(I2Cx_SENSOR, I2C_FLAG_BUSY));
 8002fcc:	bf00      	nop
 8002fce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002fd2:	480a      	ldr	r0, [pc, #40]	; (8002ffc <i2c_start+0x34>)
 8002fd4:	f7fe f8ac 	bl	8001130 <I2C_GetFlagStatus>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f7      	bne.n	8002fce <i2c_start+0x6>

	// Generate start condition
	I2C_GenerateSTART(I2Cx_SENSOR, ENABLE);
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4806      	ldr	r0, [pc, #24]	; (8002ffc <i2c_start+0x34>)
 8002fe2:	f7fd ffd9 	bl	8000f98 <I2C_GenerateSTART>

	// Wait for I2C EV5.
	// It means that the start condition has been correctly released
	// on the I2C bus (the bus is free, no other devices is communicating))
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_MODE_SELECT));
 8002fe6:	bf00      	nop
 8002fe8:	4905      	ldr	r1, [pc, #20]	; (8003000 <i2c_start+0x38>)
 8002fea:	4804      	ldr	r0, [pc, #16]	; (8002ffc <i2c_start+0x34>)
 8002fec:	f7fe f870 	bl	80010d0 <I2C_CheckEvent>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f8      	beq.n	8002fe8 <i2c_start+0x20>
}
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40005400 	.word	0x40005400
 8003000:	00030001 	.word	0x00030001

08003004 <i2c_stop>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
void i2c_stop(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	// Generate I2C stop condition
	I2C_GenerateSTOP(I2Cx_SENSOR, ENABLE);
 8003008:	2101      	movs	r1, #1
 800300a:	4802      	ldr	r0, [pc, #8]	; (8003014 <i2c_stop+0x10>)
 800300c:	f7fd ffe4 	bl	8000fd8 <I2C_GenerateSTOP>
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40005400 	.word	0x40005400

08003018 <i2c_address_direction>:
	* @param	I2C direction (transmitter or receiver)
  * @retval	None
  ******************************************************************************
  */
void i2c_address_direction(uint8_t address, uint8_t direction)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	460a      	mov	r2, r1
 8003022:	71fb      	strb	r3, [r7, #7]
 8003024:	4613      	mov	r3, r2
 8003026:	71bb      	strb	r3, [r7, #6]
	// Send slave address
	I2C_Send7bitAddress(I2Cx_SENSOR, address, direction);
 8003028:	79ba      	ldrb	r2, [r7, #6]
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	4619      	mov	r1, r3
 800302e:	480f      	ldr	r0, [pc, #60]	; (800306c <i2c_address_direction+0x54>)
 8003030:	f7fd fff2 	bl	8001018 <I2C_Send7bitAddress>

	// Wait for I2C EV6
	// It means that a slave acknowledges his address
	if (direction == I2C_Direction_Transmitter)
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d108      	bne.n	800304c <i2c_address_direction+0x34>
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800303a:	bf00      	nop
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <i2c_address_direction+0x58>)
 800303e:	480b      	ldr	r0, [pc, #44]	; (800306c <i2c_address_direction+0x54>)
 8003040:	f7fe f846 	bl	80010d0 <I2C_CheckEvent>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f8      	beq.n	800303c <i2c_address_direction+0x24>
	}
	else if (direction == I2C_Direction_Receiver)
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	}
}
 800304a:	e00a      	b.n	8003062 <i2c_address_direction+0x4a>
	else if (direction == I2C_Direction_Receiver)
 800304c:	79bb      	ldrb	r3, [r7, #6]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <i2c_address_direction+0x4a>
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8003052:	bf00      	nop
 8003054:	4907      	ldr	r1, [pc, #28]	; (8003074 <i2c_address_direction+0x5c>)
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <i2c_address_direction+0x54>)
 8003058:	f7fe f83a 	bl	80010d0 <I2C_CheckEvent>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f8      	beq.n	8003054 <i2c_address_direction+0x3c>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40005400 	.word	0x40005400
 8003070:	00070082 	.word	0x00070082
 8003074:	00030002 	.word	0x00030002

08003078 <i2c_transmit>:
  * @param	Data byte to transmit
  * @retval	None
  ******************************************************************************
  */
void i2c_transmit(uint8_t byte)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
	// Send data byte
	I2C_SendData(I2Cx_SENSOR, byte);
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4619      	mov	r1, r3
 8003086:	4808      	ldr	r0, [pc, #32]	; (80030a8 <i2c_transmit+0x30>)
 8003088:	f7fe f804 	bl	8001094 <I2C_SendData>
	// Wait for I2C EV8_2.
	// It means that the data has been physically shifted out and
	// output on the bus)
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800308c:	bf00      	nop
 800308e:	4907      	ldr	r1, [pc, #28]	; (80030ac <i2c_transmit+0x34>)
 8003090:	4805      	ldr	r0, [pc, #20]	; (80030a8 <i2c_transmit+0x30>)
 8003092:	f7fe f81d 	bl	80010d0 <I2C_CheckEvent>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f8      	beq.n	800308e <i2c_transmit+0x16>
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40005400 	.word	0x40005400
 80030ac:	00070084 	.word	0x00070084

080030b0 <i2c_receive_ack>:
  * @param	None
  * @retval	Received data byte
  ******************************************************************************
  */
uint8_t i2c_receive_ack(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
	// Enable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, ENABLE);
 80030b4:	2101      	movs	r1, #1
 80030b6:	4808      	ldr	r0, [pc, #32]	; (80030d8 <i2c_receive_ack+0x28>)
 80030b8:	f7fd ffcc 	bl	8001054 <I2C_AcknowledgeConfig>
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));
 80030bc:	bf00      	nop
 80030be:	4907      	ldr	r1, [pc, #28]	; (80030dc <i2c_receive_ack+0x2c>)
 80030c0:	4805      	ldr	r0, [pc, #20]	; (80030d8 <i2c_receive_ack+0x28>)
 80030c2:	f7fe f805 	bl	80010d0 <I2C_CheckEvent>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f8      	beq.n	80030be <i2c_receive_ack+0xe>

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <i2c_receive_ack+0x28>)
 80030ce:	f7fd fff1 	bl	80010b4 <I2C_ReceiveData>
 80030d2:	4603      	mov	r3, r0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40005400 	.word	0x40005400
 80030dc:	00030040 	.word	0x00030040

080030e0 <i2c_receive_nack>:
  * @param	None
  * @retval	Received data byte
  ******************************************************************************
  */
uint8_t i2c_receive_nack(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	// Disable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, DISABLE);
 80030e4:	2100      	movs	r1, #0
 80030e6:	4808      	ldr	r0, [pc, #32]	; (8003108 <i2c_receive_nack+0x28>)
 80030e8:	f7fd ffb4 	bl	8001054 <I2C_AcknowledgeConfig>
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));
 80030ec:	bf00      	nop
 80030ee:	4907      	ldr	r1, [pc, #28]	; (800310c <i2c_receive_nack+0x2c>)
 80030f0:	4805      	ldr	r0, [pc, #20]	; (8003108 <i2c_receive_nack+0x28>)
 80030f2:	f7fd ffed 	bl	80010d0 <I2C_CheckEvent>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f8      	beq.n	80030ee <i2c_receive_nack+0xe>

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <i2c_receive_nack+0x28>)
 80030fe:	f7fd ffd9 	bl	80010b4 <I2C_ReceiveData>
 8003102:	4603      	mov	r3, r0
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40005400 	.word	0x40005400
 800310c:	00030040 	.word	0x00030040

08003110 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003116:	b672      	cpsid	i
}
 8003118:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 800311a:	f240 5125 	movw	r1, #1317	; 0x525
 800311e:	480f      	ldr	r0, [pc, #60]	; (800315c <USART2_IRQHandler+0x4c>)
 8003120:	f7fe fc52 	bl	80019c8 <USART_GetITStatus>
 8003124:	4603      	mov	r3, r0
 8003126:	2b01      	cmp	r3, #1
 8003128:	d112      	bne.n	8003150 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <USART2_IRQHandler+0x50>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8003130:	480a      	ldr	r0, [pc, #40]	; (800315c <USART2_IRQHandler+0x4c>)
 8003132:	f7fe fc39 	bl	80019a8 <USART_ReceiveData>
 8003136:	4603      	mov	r3, r0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 800313c:	1cfb      	adds	r3, r7, #3
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f002 fa4b 	bl	80055dc <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8003146:	f240 5125 	movw	r1, #1317	; 0x525
 800314a:	4804      	ldr	r0, [pc, #16]	; (800315c <USART2_IRQHandler+0x4c>)
 800314c:	f7fe fc97 	bl	8001a7e <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8003150:	b662      	cpsie	i
}
 8003152:	bf00      	nop
    }
    __enable_irq();
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40004400 	.word	0x40004400
 8003160:	20000418 	.word	0x20000418

08003164 <delayMicroseconds>:
//ucg_int_t get_tx(void) { return tx; };
//ucg_int_t get_ty(void) { return ty; };
//ucg_t *get_ucg(void) { return &ucg; };

static void delayMicroseconds(uint32_t microseconds)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
//	}
//	uint32_t i;
//	for( i = 0; i < microseconds; i++ )
//	{
//	}
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <ucg_gpio_init>:

static void ucg_gpio_init(void) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 800317e:	2101      	movs	r1, #1
 8003180:	2007      	movs	r0, #7
 8003182:	f7fe f8b7 	bl	80012f4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003186:	2301      	movs	r3, #1
 8003188:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800318a:	2303      	movs	r3, #3
 800318c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800318e:	2300      	movs	r3, #0
 8003190:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 8003196:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800319a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800319c:	463b      	mov	r3, r7
 800319e:	4619      	mov	r1, r3
 80031a0:	480a      	ldr	r0, [pc, #40]	; (80031cc <ucg_gpio_init+0x54>)
 80031a2:	f7fd fcef 	bl	8000b84 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 80031a6:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80031aa:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80031ac:	463b      	mov	r3, r7
 80031ae:	4619      	mov	r1, r3
 80031b0:	4807      	ldr	r0, [pc, #28]	; (80031d0 <ucg_gpio_init+0x58>)
 80031b2:	f7fd fce7 	bl	8000b84 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80031ba:	463b      	mov	r3, r7
 80031bc:	4619      	mov	r1, r3
 80031be:	4805      	ldr	r0, [pc, #20]	; (80031d4 <ucg_gpio_init+0x5c>)
 80031c0:	f7fd fce0 	bl	8000b84 <GPIO_Init>
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020400 	.word	0x40020400
 80031d4:	40020800 	.word	0x40020800

080031d8 <ucg_com_arduino_send_generic_SW_SPI>:

static void ucg_com_arduino_send_generic_SW_SPI(ucg_t *ucg, uint8_t data)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 80031e4:	2308      	movs	r3, #8
 80031e6:	73fb      	strb	r3, [r7, #15]

  do
  {
    if ( data & 128 )
 80031e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da05      	bge.n	80031fc <ucg_com_arduino_send_generic_SW_SPI+0x24>
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 80031f0:	2201      	movs	r2, #1
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	4814      	ldr	r0, [pc, #80]	; (8003248 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80031f6:	f7fd fd8c 	bl	8000d12 <GPIO_WriteBit>
 80031fa:	e004      	b.n	8003206 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
    }
    else
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	4811      	ldr	r0, [pc, #68]	; (8003248 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8003202:	f7fd fd86 	bl	8000d12 <GPIO_WriteBit>
    }
    // no delay required, also Arduino Due is slow enough
    // delay required for ESP32
    delayMicroseconds(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f7ff ffac 	bl	8003164 <delayMicroseconds>
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 1);
 800320c:	2201      	movs	r2, #1
 800320e:	2120      	movs	r1, #32
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8003212:	f7fd fd7e 	bl	8000d12 <GPIO_WriteBit>
    delayMicroseconds(1);
 8003216:	2001      	movs	r0, #1
 8003218:	f7ff ffa4 	bl	8003164 <delayMicroseconds>
    i--;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	3b01      	subs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2120      	movs	r1, #32
 8003226:	4808      	ldr	r0, [pc, #32]	; (8003248 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8003228:	f7fd fd73 	bl	8000d12 <GPIO_WriteBit>
    delayMicroseconds(1);
 800322c:	2001      	movs	r0, #1
 800322e:	f7ff ff99 	bl	8003164 <delayMicroseconds>
    data <<= 1;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	70fb      	strb	r3, [r7, #3]
  } while( i > 0 );
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1d4      	bne.n	80031e8 <ucg_com_arduino_send_generic_SW_SPI+0x10>
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40020000 	.word	0x40020000

0800324c <ucg_com_arduino_generic_SW_SPI>:

static int16_t ucg_com_arduino_generic_SW_SPI(ucg_t *ucg, int16_t msg, uint16_t arg, uint8_t *data)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	4613      	mov	r3, r2
 800325c:	813b      	strh	r3, [r7, #8]
  switch(msg)
 800325e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003262:	3b0a      	subs	r3, #10
 8003264:	2b0b      	cmp	r3, #11
 8003266:	f200 80dc 	bhi.w	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800326a:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <ucg_com_arduino_generic_SW_SPI+0x24>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	080032a1 	.word	0x080032a1
 8003274:	08003423 	.word	0x08003423
 8003278:	080032f3 	.word	0x080032f3
 800327c:	080032fd 	.word	0x080032fd
 8003280:	0800330d 	.word	0x0800330d
 8003284:	0800331d 	.word	0x0800331d
 8003288:	0800332f 	.word	0x0800332f
 800328c:	0800334f 	.word	0x0800334f
 8003290:	08003377 	.word	0x08003377
 8003294:	080033ad 	.word	0x080033ad
 8003298:	080033cb 	.word	0x080033cb
 800329c:	0800341b 	.word	0x0800341b
      /* "data" is a pointer to ucg_com_info_t structure with the following information: */
      /*	((ucg_com_info_t *)data)->serial_clk_speed value in nanoseconds */
      /*	((ucg_com_info_t *)data)->parallel_clk_speed value in nanoseconds */
    
      /* setup pins */
      ucg_gpio_init();
 80032a0:	f7ff ff6a 	bl	8003178 <ucg_gpio_init>

      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 80032a4:	2201      	movs	r2, #1
 80032a6:	2180      	movs	r1, #128	; 0x80
 80032a8:	4860      	ldr	r0, [pc, #384]	; (800342c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80032aa:	f7fd fd32 	bl	8000d12 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, 1);
 80032ae:	2201      	movs	r2, #1
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	485f      	ldr	r0, [pc, #380]	; (8003430 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80032b4:	f7fd fd2d 	bl	8000d12 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, 1);
 80032b8:	2201      	movs	r2, #1
 80032ba:	2180      	movs	r1, #128	; 0x80
 80032bc:	485d      	ldr	r0, [pc, #372]	; (8003434 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80032be:	f7fd fd28 	bl	8000d12 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 80032c2:	2201      	movs	r2, #1
 80032c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032c8:	4858      	ldr	r0, [pc, #352]	; (800342c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80032ca:	f7fd fd22 	bl	8000d12 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2120      	movs	r1, #32
 80032d2:	4856      	ldr	r0, [pc, #344]	; (800342c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80032d4:	f7fd fd1d 	bl	8000d12 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_ENABLE_PORT, SPI1_ENABLE_PIN, 1);
 80032d8:	2201      	movs	r2, #1
 80032da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032de:	4854      	ldr	r0, [pc, #336]	; (8003430 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80032e0:	f7fd fd17 	bl	8000d12 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_MODE_PORT, SPI1_MODE_PIN, 1);
 80032e4:	2201      	movs	r2, #1
 80032e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ea:	4850      	ldr	r0, [pc, #320]	; (800342c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80032ec:	f7fd fd11 	bl	8000d12 <GPIO_WriteBit>
      break;
 80032f0:	e097      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_POWER_DOWN:
      break;

    case UCG_COM_MSG_DELAY:
      delayMicroseconds(arg);
 80032f2:	893b      	ldrh	r3, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff35 	bl	8003164 <delayMicroseconds>
      break;
 80032fa:	e092      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_RESET_LINE:
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, arg);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	484b      	ldr	r0, [pc, #300]	; (8003434 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8003306:	f7fd fd04 	bl	8000d12 <GPIO_WriteBit>
      break;
 800330a:	e08a      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CS_LINE:
	  GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, arg);
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	2140      	movs	r1, #64	; 0x40
 8003314:	4846      	ldr	r0, [pc, #280]	; (8003430 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8003316:	f7fd fcfc 	bl	8000d12 <GPIO_WriteBit>
      break;
 800331a:	e082      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CD_LINE:
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, arg);
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003326:	4841      	ldr	r0, [pc, #260]	; (800342c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003328:	f7fd fcf3 	bl	8000d12 <GPIO_WriteBit>
      break;
 800332c:	e079      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_BYTE:
      ucg_com_arduino_send_generic_SW_SPI(ucg, arg);
 800332e:	893b      	ldrh	r3, [r7, #8]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	4619      	mov	r1, r3
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff ff4f 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
      break;
 800333a:	e072      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_1_BYTE:
      while( arg > 0 ) {
	    ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f7ff ff48 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
	    arg--;
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	3b01      	subs	r3, #1
 800334c:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 800334e:	893b      	ldrh	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f3      	bne.n	800333c <ucg_com_arduino_generic_SW_SPI+0xf0>
      }
      break;
 8003354:	e065      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_2_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff ff3b 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3301      	adds	r3, #1
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff ff34 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8003370:	893b      	ldrh	r3, [r7, #8]
 8003372:	3b01      	subs	r3, #1
 8003374:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8003376:	893b      	ldrh	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ec      	bne.n	8003356 <ucg_com_arduino_generic_SW_SPI+0x10a>
      }
      break;
 800337c:	e051      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_3_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	4619      	mov	r1, r3
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff ff27 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3301      	adds	r3, #1
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ff20 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[2]);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3302      	adds	r3, #2
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff ff19 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 80033a6:	893b      	ldrh	r3, [r7, #8]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 80033ac:	893b      	ldrh	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e5      	bne.n	800337e <ucg_com_arduino_generic_SW_SPI+0x132>
      }
      break;
 80033b2:	e036      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_STR:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data++);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	4619      	mov	r1, r3
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff ff0a 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 80033c4:	893b      	ldrh	r3, [r7, #8]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 80033ca:	893b      	ldrh	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f1      	bne.n	80033b4 <ucg_com_arduino_generic_SW_SPI+0x168>
      }
      break;
 80033d0:	e027      	b.n	8003422 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_CD_DATA_SEQUENCE:
      while(arg > 0)
      {
		if ( *data != 0 )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d010      	beq.n	80033fc <ucg_com_arduino_generic_SW_SPI+0x1b0>
		{
		  if ( *data == 1 )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d106      	bne.n	80033f0 <ucg_com_arduino_generic_SW_SPI+0x1a4>
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e8:	4810      	ldr	r0, [pc, #64]	; (800342c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80033ea:	f7fd fc92 	bl	8000d12 <GPIO_WriteBit>
 80033ee:	e005      	b.n	80033fc <ucg_com_arduino_generic_SW_SPI+0x1b0>
		  }
		  else
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 80033f0:	2201      	movs	r2, #1
 80033f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033f6:	480d      	ldr	r0, [pc, #52]	; (800342c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80033f8:	f7fd fc8b 	bl	8000d12 <GPIO_WriteBit>
		  }
		}
		data++;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3301      	adds	r3, #1
 8003400:	607b      	str	r3, [r7, #4]
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff fee5 	bl	80031d8 <ucg_com_arduino_send_generic_SW_SPI>
		data++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3301      	adds	r3, #1
 8003412:	607b      	str	r3, [r7, #4]
		arg--;
 8003414:	893b      	ldrh	r3, [r7, #8]
 8003416:	3b01      	subs	r3, #1
 8003418:	813b      	strh	r3, [r7, #8]
      while(arg > 0)
 800341a:	893b      	ldrh	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1d8      	bne.n	80033d2 <ucg_com_arduino_generic_SW_SPI+0x186>
      }
      break;
 8003420:	bf00      	nop
  }
  return 1;
 8003422:	2301      	movs	r3, #1
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40020000 	.word	0x40020000
 8003430:	40020400 	.word	0x40020400
 8003434:	40020800 	.word	0x40020800

08003438 <Ucglib4WireSWSPI_begin>:

void Ucglib4WireSWSPI_begin(ucg_t *ucg, uint8_t is_transparent)
{ 
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	70fb      	strb	r3, [r7, #3]
  ucg_Init(ucg, ucg_dev_st7735_18x128x128, ucg_ext_st7735_18, ucg_com_arduino_generic_SW_SPI);
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <Ucglib4WireSWSPI_begin+0x2c>)
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <Ucglib4WireSWSPI_begin+0x30>)
 8003448:	4908      	ldr	r1, [pc, #32]	; (800346c <Ucglib4WireSWSPI_begin+0x34>)
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f001 febc 	bl	80051c8 <ucg_Init>
  ucg_SetFontMode(ucg, is_transparent);
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f001 fca0 	bl	8004d9a <ucg_SetFontMode>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	0800324d 	.word	0x0800324d
 8003468:	080044c9 	.word	0x080044c9
 800346c:	080045f1 	.word	0x080045f1

08003470 <ucg_DrawBox>:
*/

#include "ucg.h"

void ucg_DrawBox(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	4608      	mov	r0, r1
 800347a:	4611      	mov	r1, r2
 800347c:	461a      	mov	r2, r3
 800347e:	4603      	mov	r3, r0
 8003480:	817b      	strh	r3, [r7, #10]
 8003482:	460b      	mov	r3, r1
 8003484:	813b      	strh	r3, [r7, #8]
 8003486:	4613      	mov	r3, r2
 8003488:	80fb      	strh	r3, [r7, #6]
  while( h > 0 )
 800348a:	e014      	b.n	80034b6 <ucg_DrawBox+0x46>
  {
    ucg_DrawHLine(ucg, x, y, w);
 800348c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003490:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003494:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f001 ff07 	bl	80052ac <ucg_DrawHLine>
    h--;
 800349e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	833b      	strh	r3, [r7, #24]
    y++;
 80034aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	813b      	strh	r3, [r7, #8]
  while( h > 0 )
 80034b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dce6      	bgt.n	800348c <ucg_DrawBox+0x1c>
  }  
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <ucg_ClearScreen>:
  - clear the screen with black color
  - reset clip range to max
  - set draw color to white
*/
void ucg_ClearScreen(ucg_t *ucg)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	6078      	str	r0, [r7, #4]
  ucg_SetColor(ucg, 0, 0, 0, 0);
 80034d0:	2300      	movs	r3, #0
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 ff04 	bl	80052e8 <ucg_SetColor>
  ucg_SetMaxClipRange(ucg);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f001 f84c 	bl	800457e <ucg_SetMaxClipRange>
  ucg_DrawBox(ucg, 0, 0, ucg_GetWidth(ucg), ucg_GetHeight(ucg));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	2100      	movs	r1, #0
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffb8 	bl	8003470 <ucg_DrawBox>
  ucg_SetColor(ucg, 0, 255, 255, 255);
 8003500:	23ff      	movs	r3, #255	; 0xff
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	23ff      	movs	r3, #255	; 0xff
 8003506:	22ff      	movs	r2, #255	; 0xff
 8003508:	2100      	movs	r1, #0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f001 feec 	bl	80052e8 <ucg_SetColor>
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <ucg_ccs_init>:
/*
  Setup change from "start" to "end" with a specified amount of "steps".
  After calling this procedure, ccs->current will contain the "start" value.
*/
void ucg_ccs_init(ucg_ccs_t *ccs, uint8_t start, uint8_t end, ucg_int_t steps)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	70fb      	strb	r3, [r7, #3]
 800352a:	460b      	mov	r3, r1
 800352c:	70bb      	strb	r3, [r7, #2]
 800352e:	4613      	mov	r3, r2
 8003530:	803b      	strh	r3, [r7, #0]
  ccs->start = start;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	705a      	strb	r2, [r3, #1]
  ccs->num = end-start;
 8003538:	78bb      	ldrb	r3, [r7, #2]
 800353a:	b29a      	uxth	r2, r3
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	b29b      	uxth	r3, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	b21a      	sxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	809a      	strh	r2, [r3, #4]
  ccs->den = steps-1;
 800354a:	883b      	ldrh	r3, [r7, #0]
 800354c:	3b01      	subs	r3, #1
 800354e:	b29b      	uxth	r3, r3
 8003550:	b21a      	sxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	811a      	strh	r2, [r3, #8]
  ccs->dir = 1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	805a      	strh	r2, [r3, #2]
  
  ccs->quot = ccs->num / ccs->den;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003562:	461a      	mov	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800356a:	fb92 f3f3 	sdiv	r3, r2, r3
 800356e:	b21a      	sxth	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	80da      	strh	r2, [r3, #6]
  if ( ccs->num < 0 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	da0c      	bge.n	8003598 <ucg_ccs_init+0x80>
  {
    ccs->num = -ccs->num;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003584:	b29b      	uxth	r3, r3
 8003586:	425b      	negs	r3, r3
 8003588:	b29b      	uxth	r3, r3
 800358a:	b21a      	sxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	809a      	strh	r2, [r3, #4]
    ccs->dir = -1;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003596:	805a      	strh	r2, [r3, #2]
  }
  ccs->rem = ccs->num % ccs->den;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80035a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80035a8:	fb01 f202 	mul.w	r2, r1, r2
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	b21a      	sxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	815a      	strh	r2, [r3, #10]
  
  ccs->frac = ccs->den/2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035ba:	0fda      	lsrs	r2, r3, #31
 80035bc:	4413      	add	r3, r2
 80035be:	105b      	asrs	r3, r3, #1
 80035c0:	b21a      	sxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	819a      	strh	r2, [r3, #12]
  ccs->current = start;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	701a      	strb	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <ucg_ccs_step>:
/*
  Make one step towards the "end" value. 
  ccs->curront will contain the updated value.
*/
void ucg_ccs_step(ucg_ccs_t *ccs)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  
  ccs->current += ccs->quot;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	701a      	strb	r2, [r3, #0]
  ccs->frac += ccs->rem;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003602:	b29b      	uxth	r3, r3
 8003604:	4413      	add	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	b21a      	sxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	819a      	strh	r2, [r3, #12]
  if ( ccs->frac >= ccs->den )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	db16      	blt.n	800364c <ucg_ccs_step+0x74>
  {
    ccs->current += ccs->dir;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4413      	add	r3, r2
 800362c:	b2da      	uxtb	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	701a      	strb	r2, [r3, #0]
    ccs->frac -= ccs->den;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003638:	b29a      	uxth	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003640:	b29b      	uxth	r3, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	b21a      	sxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	819a      	strh	r2, [r3, #12]
  }  
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <ucg_ccs_seek>:
  
  Seek to the specified "pos"ition.
  "pos" must be between 0 and "end"-1
*/
void ucg_ccs_seek(ucg_ccs_t *ccs, ucg_int_t pos)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]
  ucg_int_t p;
  ccs->current = ccs->quot;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	701a      	strb	r2, [r3, #0]
  ccs->current *= pos;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	fb12 f303 	smulbb	r3, r2, r3
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	701a      	strb	r2, [r3, #0]
  p = ccs->rem * pos  + ccs->den/2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003688:	b29a      	uxth	r2, r3
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	fb12 f303 	smulbb	r3, r2, r3
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003698:	0fd9      	lsrs	r1, r3, #31
 800369a:	440b      	add	r3, r1
 800369c:	105b      	asrs	r3, r3, #1
 800369e:	b21b      	sxth	r3, r3
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	81fb      	strh	r3, [r7, #14]
  if ( ccs->dir >= 0 )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db0e      	blt.n	80036d0 <ucg_ccs_seek+0x78>
    ccs->current += p / ccs->den;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80036c0:	fb93 f3f1 	sdiv	r3, r3, r1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e00d      	b.n	80036ec <ucg_ccs_seek+0x94>
  else
    ccs->current -= p / ccs->den;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80036de:	fb93 f3f1 	sdiv	r3, r3, r1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	701a      	strb	r2, [r3, #0]
  ccs->frac = p % ccs->den;
 80036ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80036f6:	fb93 f1f2 	sdiv	r1, r3, r2
 80036fa:	fb01 f202 	mul.w	r2, r1, r2
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	b21a      	sxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	819a      	strh	r2, [r3, #12]
  ccs->current += ccs->start;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	785b      	ldrb	r3, [r3, #1]
 800370e:	4413      	add	r3, r2
 8003710:	b2da      	uxtb	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	701a      	strb	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <ucg_clip_is_x_visible>:

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg) UCG_NOINLINE;
static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg) UCG_NOINLINE;

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.x;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800372e:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.x;
 8003730:	89fa      	ldrh	r2, [r7, #14]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8003738:	b29b      	uxth	r3, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	b29b      	uxth	r3, r3
 800373e:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8003740:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003744:	2b00      	cmp	r3, #0
 8003746:	da01      	bge.n	800374c <ucg_clip_is_x_visible+0x2a>
    return 0;
 8003748:	2300      	movs	r3, #0
 800374a:	e009      	b.n	8003760 <ucg_clip_is_x_visible+0x3e>
  if ( t >= ucg->clip_box.size.w )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8003752:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003756:	429a      	cmp	r2, r3
 8003758:	db01      	blt.n	800375e <ucg_clip_is_x_visible+0x3c>
    return 0;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <ucg_clip_is_x_visible+0x3e>
  
  return 1;
 800375e:	2301      	movs	r3, #1
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <ucg_clip_is_y_visible>:

static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.y;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003778:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.y;
 800377a:	89fa      	ldrh	r2, [r7, #14]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8003782:	b29b      	uxth	r3, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	b29b      	uxth	r3, r3
 8003788:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 800378a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800378e:	2b00      	cmp	r3, #0
 8003790:	da01      	bge.n	8003796 <ucg_clip_is_y_visible+0x2a>
    return 0;
 8003792:	2300      	movs	r3, #0
 8003794:	e009      	b.n	80037aa <ucg_clip_is_y_visible+0x3e>
  if ( t >= ucg->clip_box.size.h )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800379c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	db01      	blt.n	80037a8 <ucg_clip_is_y_visible+0x3c>
    return 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <ucg_clip_is_y_visible+0x3e>
  
  return 1;
 80037a8:	2301      	movs	r3, #1
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <ucg_clip_intersection>:
  Assumptions:
    a <= b
    c <= d
*/
static ucg_int_t ucg_clip_intersection(ucg_int_t *ap, ucg_int_t *bp, ucg_int_t c, ucg_int_t d)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	4611      	mov	r1, r2
 80037c2:	461a      	mov	r2, r3
 80037c4:	460b      	mov	r3, r1
 80037c6:	80fb      	strh	r3, [r7, #6]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80bb      	strh	r3, [r7, #4]
  ucg_int_t a = *ap;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	82fb      	strh	r3, [r7, #22]
  ucg_int_t b = *bp;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	82bb      	strh	r3, [r7, #20]
  
  if ( a >= d )
 80037d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80037dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	db01      	blt.n	80037e8 <ucg_clip_intersection+0x32>
    return 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e01a      	b.n	800381e <ucg_clip_intersection+0x68>
  if ( b <= c )
 80037e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80037ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	dc01      	bgt.n	80037f8 <ucg_clip_intersection+0x42>
    return 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	e012      	b.n	800381e <ucg_clip_intersection+0x68>
  if ( a < c )
 80037f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80037fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003800:	429a      	cmp	r2, r3
 8003802:	da02      	bge.n	800380a <ucg_clip_intersection+0x54>
    *ap = c;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 800380a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800380e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	dd02      	ble.n	800381c <ucg_clip_intersection+0x66>
    *bp = d;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	88ba      	ldrh	r2, [r7, #4]
 800381a:	801a      	strh	r2, [r3, #0]
  return 1;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <ucg_clip_is_pixel_visible>:

ucg_int_t ucg_clip_is_pixel_visible(ucg_t *ucg)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  if ( ucg_clip_is_x_visible(ucg) == 0 )
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ff75 	bl	8003722 <ucg_clip_is_x_visible>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <ucg_clip_is_pixel_visible+0x18>
    return 0;
 800383e:	2300      	movs	r3, #0
 8003840:	e008      	b.n	8003854 <ucg_clip_is_pixel_visible+0x2a>
  if ( ucg_clip_is_y_visible(ucg) == 0 )
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff92 	bl	800376c <ucg_clip_is_y_visible>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <ucg_clip_is_pixel_visible+0x28>
    return 0;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <ucg_clip_is_pixel_visible+0x2a>
  return 1;
 8003852:	2301      	movs	r3, #1
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <ucg_clip_l90fx>:
/*
  assumes, that ucg->arg contains data for l90fx and does clipping 
  against ucg->clip_box
*/
ucg_int_t ucg_clip_l90fx(ucg_t *ucg)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  ucg_int_t a;
  ucg_int_t b;
  ucg->arg.offset = 0;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	861a      	strh	r2, [r3, #48]	; 0x30
  switch(ucg->arg.dir)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003870:	2b03      	cmp	r3, #3
 8003872:	f200 816d 	bhi.w	8003b50 <ucg_clip_l90fx+0x2f4>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <ucg_clip_l90fx+0x20>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	0800388d 	.word	0x0800388d
 8003880:	08003933 	.word	0x08003933
 8003884:	080039d9 	.word	0x080039d9
 8003888:	08003a95 	.word	0x08003a95
  {
    case 0:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff6d 	bl	800376c <ucg_clip_is_y_visible>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <ucg_clip_l90fx+0x40>
	return 0; 
 8003898:	2300      	movs	r3, #0
 800389a:	e15a      	b.n	8003b52 <ucg_clip_l90fx+0x2f6>
      a = ucg->arg.pixel.pos.x;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80038a2:	81fb      	strh	r3, [r7, #14]
      b = a;
 80038a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038a8:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b21b      	sxth	r3, r3
 80038be:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	b29b      	uxth	r3, r3
 80038da:	b21b      	sxth	r3, r3
 80038dc:	f107 010c 	add.w	r1, r7, #12
 80038e0:	f107 000e 	add.w	r0, r7, #14
 80038e4:	4622      	mov	r2, r4
 80038e6:	f7ff ff66 	bl	80037b6 <ucg_clip_intersection>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <ucg_clip_l90fx+0x98>
	return 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e12e      	b.n	8003b52 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.offset = a - ucg->arg.pixel.pos.x;
 80038f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003900:	b29b      	uxth	r3, r3
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	b29b      	uxth	r3, r3
 8003906:	b21a      	sxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = a;
 800390c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	849a      	strh	r2, [r3, #36]	; 0x24
      b -= a;
 8003914:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003918:	b29a      	uxth	r2, r3
 800391a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800391e:	b29b      	uxth	r3, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	b21b      	sxth	r3, r3
 8003926:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 8003928:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 8003930:	e10e      	b.n	8003b50 <ucg_clip_l90fx+0x2f4>
    case 1:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fef5 	bl	8003722 <ucg_clip_is_x_visible>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <ucg_clip_l90fx+0xe6>
	return 0;
 800393e:	2300      	movs	r3, #0
 8003940:	e107      	b.n	8003b52 <ucg_clip_l90fx+0x2f6>
      
      a = ucg->arg.pixel.pos.y;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003948:	81fb      	strh	r3, [r7, #14]
      b = a;
 800394a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800394e:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003956:	b29a      	uxth	r2, r3
 8003958:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800395c:	b29b      	uxth	r3, r3
 800395e:	4413      	add	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	b21b      	sxth	r3, r3
 8003964:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800397a:	b29b      	uxth	r3, r3
 800397c:	4413      	add	r3, r2
 800397e:	b29b      	uxth	r3, r3
 8003980:	b21b      	sxth	r3, r3
 8003982:	f107 010c 	add.w	r1, r7, #12
 8003986:	f107 000e 	add.w	r0, r7, #14
 800398a:	4622      	mov	r2, r4
 800398c:	f7ff ff13 	bl	80037b6 <ucg_clip_intersection>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <ucg_clip_l90fx+0x13e>
	return 0;
 8003996:	2300      	movs	r3, #0
 8003998:	e0db      	b.n	8003b52 <ucg_clip_l90fx+0x2f6>

      ucg->arg.offset = a - ucg->arg.pixel.pos.y;
 800399a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	b21a      	sxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = a;
 80039b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	84da      	strh	r2, [r3, #38]	; 0x26
      b -= a;
 80039ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	b21b      	sxth	r3, r3
 80039cc:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 80039ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 80039d6:	e0bb      	b.n	8003b50 <ucg_clip_l90fx+0x2f4>
    case 2:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff fec7 	bl	800376c <ucg_clip_is_y_visible>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <ucg_clip_l90fx+0x18c>
	return 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e0b4      	b.n	8003b52 <ucg_clip_l90fx+0x2f6>
      
      b = ucg->arg.pixel.pos.x;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80039ee:	81bb      	strh	r3, [r7, #12]
      b++;
 80039f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 80039fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a02:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 8003a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	b21b      	sxth	r3, r3
 8003a18:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	f107 010c 	add.w	r1, r7, #12
 8003a3a:	f107 000e 	add.w	r0, r7, #14
 8003a3e:	4622      	mov	r2, r4
 8003a40:	f7ff feb9 	bl	80037b6 <ucg_clip_intersection>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <ucg_clip_l90fx+0x1f2>
	return 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e081      	b.n	8003b52 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8003a4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	b21a      	sxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8003a64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b21b      	sxth	r3, r3
 8003a70:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.x-b;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	b21a      	sxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = b;
 8003a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	849a      	strh	r2, [r3, #36]	; 0x24
      
      break;
 8003a92:	e05d      	b.n	8003b50 <ucg_clip_l90fx+0x2f4>
    case 3:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fe44 	bl	8003722 <ucg_clip_is_x_visible>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <ucg_clip_l90fx+0x248>
	return 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e056      	b.n	8003b52 <ucg_clip_l90fx+0x2f6>

      b = ucg->arg.pixel.pos.y;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003aaa:	81bb      	strh	r3, [r7, #12]
      b++;
 8003aac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 8003aba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003abe:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 8003ac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	b21b      	sxth	r3, r3
 8003af2:	f107 010c 	add.w	r1, r7, #12
 8003af6:	f107 000e 	add.w	r0, r7, #14
 8003afa:	4622      	mov	r2, r4
 8003afc:	f7ff fe5b 	bl	80037b6 <ucg_clip_intersection>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <ucg_clip_l90fx+0x2ae>
	return 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e023      	b.n	8003b52 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8003b0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b21a      	sxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8003b20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	b21b      	sxth	r3, r3
 8003b2c:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.y-b;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	b21a      	sxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = b;
 8003b46:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	84da      	strh	r2, [r3, #38]	; 0x26
      
      
      break;
 8003b4e:	bf00      	nop
  }

  return 1;
 8003b50:	2301      	movs	r3, #1
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd90      	pop	{r4, r7, pc}
 8003b5a:	bf00      	nop

08003b5c <ucg_clip_l90se>:
  return 1;
}
*/

ucg_int_t ucg_clip_l90se(ucg_t *ucg)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if ( ucg_clip_l90fx(ucg) == 0 )
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fe79 	bl	800385c <ucg_clip_l90fx>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <ucg_clip_l90se+0x18>
      return 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e019      	b.n	8003ba8 <ucg_clip_l90se+0x4c>
  for ( i = 0; i < 3; i++ )
 8003b74:	2300      	movs	r3, #0
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e012      	b.n	8003ba0 <ucg_clip_l90se+0x44>
  {
    ucg_ccs_seek(ucg->arg.ccs_line+i, ucg->arg.offset);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	18ca      	adds	r2, r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f7ff fd5f 	bl	8003658 <ucg_ccs_seek>
  for ( i = 0; i < 3; i++ )
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d9e9      	bls.n	8003b7a <ucg_clip_l90se+0x1e>
  }  
  return 1;
 8003ba6:	2301      	movs	r3, #1
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <ucg_com_PowerDown>:
  return 1;
}


void ucg_com_PowerDown(ucg_t *ucg)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if ( (ucg->com_status & UCG_COM_STATUS_MASK_POWER) != 0 )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <ucg_com_PowerDown+0x24>
    ucg->com_cb(ucg, UCG_COM_MSG_POWER_DOWN, 0, NULL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69dc      	ldr	r4, [r3, #28]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2200      	movs	r2, #0
 8003bce:	210b      	movs	r1, #11
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	47a0      	blx	r4
  ucg->com_status &= ~UCG_COM_STATUS_MASK_POWER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003bda:	f023 0308 	bic.w	r3, r3, #8
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd90      	pop	{r4, r7, pc}

08003bee <ucg_com_PowerUp>:

/*
  clk_speed in nano-seconds, range: 0..4095
*/
int16_t ucg_com_PowerUp(ucg_t *ucg, uint16_t serial_clk_speed, uint16_t parallel_clk_speed)
{
 8003bee:	b590      	push	{r4, r7, lr}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	807b      	strh	r3, [r7, #2]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	803b      	strh	r3, [r7, #0]
  int16_t r;
  ucg_com_info_t com_info;
  com_info.serial_clk_speed = serial_clk_speed;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	813b      	strh	r3, [r7, #8]
  com_info.parallel_clk_speed = parallel_clk_speed;
 8003c02:	883b      	ldrh	r3, [r7, #0]
 8003c04:	817b      	strh	r3, [r7, #10]
  
  ucg_com_PowerDown(ucg);  
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ffd2 	bl	8003bb0 <ucg_com_PowerDown>
  ucg->com_initial_change_sent = 0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  r = ucg->com_cb(ucg, UCG_COM_MSG_POWER_UP, 0UL, (uint8_t *)&com_info);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69dc      	ldr	r4, [r3, #28]
 8003c18:	f107 0308 	add.w	r3, r7, #8
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	210a      	movs	r1, #10
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	47a0      	blx	r4
 8003c24:	4603      	mov	r3, r0
 8003c26:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8003c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <ucg_com_PowerUp+0x54>
  {
    ucg->com_status |= UCG_COM_STATUS_MASK_POWER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003c36:	f043 0308 	orr.w	r3, r3, #8
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  }
  return r;
 8003c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd90      	pop	{r4, r7, pc}

08003c4e <ucg_com_SetLineStatus>:

void ucg_com_SetLineStatus(ucg_t *ucg, uint8_t level, uint8_t mask, uint8_t msg)
{
 8003c4e:	b590      	push	{r4, r7, lr}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	4608      	mov	r0, r1
 8003c58:	4611      	mov	r1, r2
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	70fb      	strb	r3, [r7, #3]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70bb      	strb	r3, [r7, #2]
 8003c64:	4613      	mov	r3, r2
 8003c66:	707b      	strb	r3, [r7, #1]
  if ( level == 0 )
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d131      	bne.n	8003cd2 <ucg_com_SetLineStatus+0x84>
  {
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == mask )
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003c74:	78bb      	ldrb	r3, [r7, #2]
 8003c76:	4013      	ands	r3, r2
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <ucg_com_SetLineStatus+0x42>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8003c84:	78bb      	ldrb	r3, [r7, #2]
 8003c86:	4013      	ands	r3, r2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	78ba      	ldrb	r2, [r7, #2]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d14b      	bne.n	8003d28 <ucg_com_SetLineStatus+0xda>
    {
      ucg->com_cb(ucg, msg, level, NULL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69dc      	ldr	r4, [r3, #28]
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	b219      	sxth	r1, r3
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	47a0      	blx	r4
      ucg->com_status &= ~mask;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003ca8:	b25a      	sxtb	r2, r3
 8003caa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	b25b      	sxtb	r3, r3
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003cc4:	78bb      	ldrb	r3, [r7, #2]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
      ucg->com_cb(ucg, msg, level, NULL);
      ucg->com_status |= mask;
      ucg->com_initial_change_sent |= mask;
    }
  }
}
 8003cd0:	e02a      	b.n	8003d28 <ucg_com_SetLineStatus+0xda>
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == 0 )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003cd8:	78bb      	ldrb	r3, [r7, #2]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <ucg_com_SetLineStatus+0xa4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8003ce8:	78bb      	ldrb	r3, [r7, #2]
 8003cea:	4013      	ands	r3, r2
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11a      	bne.n	8003d28 <ucg_com_SetLineStatus+0xda>
      ucg->com_cb(ucg, msg, level, NULL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69dc      	ldr	r4, [r3, #28]
 8003cf6:	787b      	ldrb	r3, [r7, #1]
 8003cf8:	b219      	sxth	r1, r3
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	47a0      	blx	r4
      ucg->com_status |= mask;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8003d0a:	78bb      	ldrb	r3, [r7, #2]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003d1c:	78bb      	ldrb	r3, [r7, #2]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <ucg_com_SetResetLineStatus>:

void ucg_com_SetResetLineStatus(ucg_t *ucg, uint8_t level)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_RESET, UCG_COM_MSG_CHANGE_RESET_LINE);
 8003d3c:	78f9      	ldrb	r1, [r7, #3]
 8003d3e:	230d      	movs	r3, #13
 8003d40:	2204      	movs	r2, #4
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff ff83 	bl	8003c4e <ucg_com_SetLineStatus>
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <ucg_com_SetCSLineStatus>:

void ucg_com_SetCSLineStatus(ucg_t *ucg, uint8_t level)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CS, UCG_COM_MSG_CHANGE_CS_LINE);
 8003d5c:	78f9      	ldrb	r1, [r7, #3]
 8003d5e:	230e      	movs	r3, #14
 8003d60:	2202      	movs	r2, #2
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ff73 	bl	8003c4e <ucg_com_SetLineStatus>
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <ucg_com_SetCDLineStatus>:

void ucg_com_SetCDLineStatus(ucg_t *ucg, uint8_t level)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CD, UCG_COM_MSG_CHANGE_CD_LINE);
 8003d7c:	78f9      	ldrb	r1, [r7, #3]
 8003d7e:	230f      	movs	r3, #15
 8003d80:	2201      	movs	r2, #1
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff63 	bl	8003c4e <ucg_com_SetLineStatus>
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <ucg_com_DelayMicroseconds>:

/* delay in microseconds */
void ucg_com_DelayMicroseconds(ucg_t *ucg, uint16_t delay)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
  ucg->com_cb(ucg, UCG_COM_MSG_DELAY, delay, NULL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69dc      	ldr	r4, [r3, #28]
 8003da0:	887a      	ldrh	r2, [r7, #2]
 8003da2:	2300      	movs	r3, #0
 8003da4:	210c      	movs	r1, #12
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	47a0      	blx	r4
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd90      	pop	{r4, r7, pc}

08003db2 <ucg_com_DelayMilliseconds>:

/* delay in milliseconds */
void ucg_com_DelayMilliseconds(ucg_t *ucg, uint16_t delay)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 8003dbe:	e007      	b.n	8003dd0 <ucg_com_DelayMilliseconds+0x1e>
  {
    ucg_com_DelayMicroseconds(ucg, 1000);
 8003dc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ffe3 	bl	8003d90 <ucg_com_DelayMicroseconds>
    delay--;
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 8003dd0:	887b      	ldrh	r3, [r7, #2]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f4      	bne.n	8003dc0 <ucg_com_DelayMilliseconds+0xe>
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <ucg_com_SendByte>:


#ifndef ucg_com_SendByte
void ucg_com_SendByte(ucg_t *ucg, uint8_t byte)
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, byte, NULL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69dc      	ldr	r4, [r3, #28]
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	2300      	movs	r3, #0
 8003df6:	2110      	movs	r1, #16
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	47a0      	blx	r4
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd90      	pop	{r4, r7, pc}

08003e04 <ucg_com_SendStringP>:
{
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_STR, cnt, (uint8_t *)byte_ptr);
}

void ucg_com_SendStringP(ucg_t *ucg, uint16_t cnt, const ucg_pgm_uint8_t *byte_ptr)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	817b      	strh	r3, [r7, #10]
  uint8_t b;
  while( cnt > 0 )
 8003e12:	e010      	b.n	8003e36 <ucg_com_SendStringP+0x32>
  {
    b = ucg_pgm_read(byte_ptr);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	75fb      	strb	r3, [r7, #23]
    //b = *byte_ptr;
    ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, b, NULL);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	69dc      	ldr	r4, [r3, #28]
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	2300      	movs	r3, #0
 8003e24:	2110      	movs	r1, #16
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	47a0      	blx	r4
    byte_ptr++;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	607b      	str	r3, [r7, #4]
    cnt--;
 8003e30:	897b      	ldrh	r3, [r7, #10]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	817b      	strh	r3, [r7, #10]
  while( cnt > 0 )
 8003e36:	897b      	ldrh	r3, [r7, #10]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1eb      	bne.n	8003e14 <ucg_com_SendStringP+0x10>
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd90      	pop	{r4, r7, pc}

08003e46 <ucg_com_SendCmdArg>:
#define END()					0x00

*/

static void ucg_com_SendCmdArg(ucg_t *ucg, const ucg_pgm_uint8_t *data, uint8_t cmd_cnt, uint8_t arg_cnt)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	4611      	mov	r1, r2
 8003e52:	461a      	mov	r2, r3
 8003e54:	460b      	mov	r3, r1
 8003e56:	71fb      	strb	r3, [r7, #7]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	71bb      	strb	r3, [r7, #6]
  ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd>>1)&1 );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff ff7e 	bl	8003d70 <ucg_com_SetCDLineStatus>
  ucg_com_SendStringP(ucg, cmd_cnt, data);
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff ffc1 	bl	8003e04 <ucg_com_SendStringP>
  if ( arg_cnt > 0 )
 8003e82:	79bb      	ldrb	r3, [r7, #6]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d014      	beq.n	8003eb2 <ucg_com_SendCmdArg+0x6c>
  {
    data += cmd_cnt;
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
    ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff ff66 	bl	8003d70 <ucg_com_SetCDLineStatus>
    ucg_com_SendStringP(ucg, arg_cnt, data);
 8003ea4:	79bb      	ldrb	r3, [r7, #6]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff ffa9 	bl	8003e04 <ucg_com_SendStringP>
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <ucg_com_SendCmdSeq>:


//void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint8_t hi;
  uint8_t lo;

  for(;;)
  {
    b = ucg_pgm_read(data);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	73fb      	strb	r3, [r7, #15]
    //b = *data;
    hi = (b) >> 4;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	73bb      	strb	r3, [r7, #14]
    lo = (b) & 0x0f;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	737b      	strb	r3, [r7, #13]
    switch( hi )
 8003eda:	7bbb      	ldrb	r3, [r7, #14]
 8003edc:	2b0f      	cmp	r3, #15
 8003ede:	f200 8127 	bhi.w	8004130 <ucg_com_SendCmdSeq+0x274>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <ucg_com_SendCmdSeq+0x2c>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08004131 	.word	0x08004131
 8003eec:	08003f29 	.word	0x08003f29
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08004131 	.word	0x08004131
 8003efc:	08004131 	.word	0x08004131
 8003f00:	08003f49 	.word	0x08003f49
 8003f04:	08003f7b 	.word	0x08003f7b
 8003f08:	08003fbf 	.word	0x08003fbf
 8003f0c:	08003feb 	.word	0x08003feb
 8003f10:	08004017 	.word	0x08004017
 8003f14:	08004077 	.word	0x08004077
 8003f18:	08004131 	.word	0x08004131
 8003f1c:	08004131 	.word	0x08004131
 8003f20:	08004131 	.word	0x08004131
 8003f24:	080040d7 	.word	0x080040d7
      case 0:
	return;		/* end marker */
      case 1:
      case 2:
      case 3:
	ucg_com_SendCmdArg(ucg, data+1, hi, lo);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1c59      	adds	r1, r3, #1
 8003f2c:	7b7b      	ldrb	r3, [r7, #13]
 8003f2e:	7bba      	ldrb	r2, [r7, #14]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff88 	bl	8003e46 <ucg_com_SendCmdArg>
	data+=1+hi+lo;
 8003f36:	7bbb      	ldrb	r3, [r7, #14]
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	7b7b      	ldrb	r3, [r7, #13]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	603b      	str	r3, [r7, #0]
	break;
 8003f46:	e0f2      	b.n	800412e <ucg_com_SendCmdSeq+0x272>
      case 6:
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ff0a 	bl	8003d70 <ucg_com_SetCDLineStatus>
	ucg_com_SendStringP(ucg, lo, data+1);
 8003f5c:	7b7b      	ldrb	r3, [r7, #13]
 8003f5e:	b299      	uxth	r1, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	461a      	mov	r2, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff4c 	bl	8003e04 <ucg_com_SendStringP>
	data+=1+lo;      
 8003f6c:	7b7b      	ldrb	r3, [r7, #13]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	461a      	mov	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	603b      	str	r3, [r7, #0]
	break;
 8003f78:	e0d9      	b.n	800412e <ucg_com_SendCmdSeq+0x272>
      case 7:	/* note: 0x070 is used to set data line status */
	ucg_com_SetCDLineStatus(ucg, ((ucg->com_cfg_cd>>1)&1)^1 );
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff feeb 	bl	8003d70 <ucg_com_SetCDLineStatus>
	if ( lo > 0 )
 8003f9a:	7b7b      	ldrb	r3, [r7, #13]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <ucg_com_SendCmdSeq+0xf4>
	  ucg_com_SendStringP(ucg, lo, data+1);
 8003fa0:	7b7b      	ldrb	r3, [r7, #13]
 8003fa2:	b299      	uxth	r1, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff2a 	bl	8003e04 <ucg_com_SendStringP>
	data+=1+lo;      
 8003fb0:	7b7b      	ldrb	r3, [r7, #13]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	603b      	str	r3, [r7, #0]
	break;
 8003fbc:	e0b7      	b.n	800412e <ucg_com_SendCmdSeq+0x272>
      case 8:
	data++;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMilliseconds(ucg, (((uint16_t)lo)<<8) + b );
 8003fca:	7b7b      	ldrb	r3, [r7, #13]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fee8 	bl	8003db2 <ucg_com_DelayMilliseconds>
	data++;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	603b      	str	r3, [r7, #0]
	break;
 8003fe8:	e0a1      	b.n	800412e <ucg_com_SendCmdSeq+0x272>
      case 9:
	data++;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMicroseconds(ucg, (((uint16_t)lo)<<8) + b );
 8003ff6:	7b7b      	ldrb	r3, [r7, #13]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	b29b      	uxth	r3, r3
 8004002:	4413      	add	r3, r2
 8004004:	b29b      	uxth	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fec1 	bl	8003d90 <ucg_com_DelayMicroseconds>
	data++;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	603b      	str	r3, [r7, #0]
	break;
 8004014:	e08b      	b.n	800412e <ucg_com_SendCmdSeq+0x272>
      case 10:
	data++;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	73fb      	strb	r3, [r7, #15]
	data++;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	733b      	strb	r3, [r7, #12]
	data++;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fe94 	bl	8003d70 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004056:	441a      	add	r2, r3
 8004058:	7b7b      	ldrb	r3, [r7, #13]
 800405a:	fa42 f303 	asr.w	r3, r2, r3
 800405e:	b2da      	uxtb	r2, r3
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	4013      	ands	r3, r2
 8004064:	b2da      	uxtb	r2, r3
 8004066:	7b3b      	ldrb	r3, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff feb6 	bl	8003de0 <ucg_com_SendByte>
	//data+=2;
	break;
 8004074:	e05b      	b.n	800412e <ucg_com_SendCmdSeq+0x272>
      case 11:
	data++;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	73fb      	strb	r3, [r7, #15]
	data++;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	733b      	strb	r3, [r7, #12]
	data++;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fe64 	bl	8003d70 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80040ae:	461a      	mov	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80040b6:	441a      	add	r2, r3
 80040b8:	7b7b      	ldrb	r3, [r7, #13]
 80040ba:	fa42 f303 	asr.w	r3, r2, r3
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	4013      	ands	r3, r2
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	7b3b      	ldrb	r3, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fe86 	bl	8003de0 <ucg_com_SendByte>
	//data+=2;
	break;
 80040d4:	e02b      	b.n	800412e <ucg_com_SendCmdSeq+0x272>
      case 15:
	hi = lo >> 2;
 80040d6:	7b7b      	ldrb	r3, [r7, #13]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	73bb      	strb	r3, [r7, #14]
	lo &= 3;
 80040dc:	7b7b      	ldrb	r3, [r7, #13]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	737b      	strb	r3, [r7, #13]
	switch(hi)
 80040e4:	7bbb      	ldrb	r3, [r7, #14]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d018      	beq.n	800411c <ucg_com_SendCmdSeq+0x260>
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	dc1b      	bgt.n	8004126 <ucg_com_SendCmdSeq+0x26a>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <ucg_com_SendCmdSeq+0x23c>
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d009      	beq.n	800410a <ucg_com_SendCmdSeq+0x24e>
 80040f6:	e016      	b.n	8004126 <ucg_com_SendCmdSeq+0x26a>
	{
	  case 0:
	    ucg_com_SetResetLineStatus(ucg, lo&1);
 80040f8:	7b7b      	ldrb	r3, [r7, #13]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe14 	bl	8003d30 <ucg_com_SetResetLineStatus>
	    break;
 8004108:	e00d      	b.n	8004126 <ucg_com_SendCmdSeq+0x26a>
	  case 1:
	    ucg_com_SetCSLineStatus(ucg, lo&1);
 800410a:	7b7b      	ldrb	r3, [r7, #13]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fe1b 	bl	8003d50 <ucg_com_SetCSLineStatus>
	    break;
 800411a:	e004      	b.n	8004126 <ucg_com_SendCmdSeq+0x26a>
	  case 3:
	    ucg->com_cfg_cd = lo;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7b7a      	ldrb	r2, [r7, #13]
 8004120:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	    break;
 8004124:	bf00      	nop
	}
	data++;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	603b      	str	r3, [r7, #0]
	break;
 800412c:	bf00      	nop
    b = ucg_pgm_read(data);
 800412e:	e6ca      	b.n	8003ec6 <ucg_com_SendCmdSeq+0xa>
      default:
	return;
 8004130:	bf00      	nop
    }  
  }
}
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <ucg_dev_default_cb>:
  this should be (finally) called by any other device callback to handle
  messages, which are not yet handled.
*/

ucg_int_t ucg_dev_default_cb(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	460b      	mov	r3, r1
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8004146:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800414a:	2b0c      	cmp	r3, #12
 800414c:	d00a      	beq.n	8004164 <ucg_dev_default_cb+0x2c>
 800414e:	2b17      	cmp	r3, #23
 8004150:	d10f      	bne.n	8004172 <ucg_dev_default_cb+0x3a>
  {
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	4798      	blx	r3
 8004160:	4603      	mov	r3, r0
 8004162:	e007      	b.n	8004174 <ucg_dev_default_cb+0x3c>
    case UCG_MSG_SET_CLIP_BOX:
      ucg->clip_box = *(ucg_box_t *)data;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	3370      	adds	r3, #112	; 0x70
 800416a:	6810      	ldr	r0, [r2, #0]
 800416c:	6851      	ldr	r1, [r2, #4]
 800416e:	c303      	stmia	r3!, {r0, r1}
      break;
 8004170:	bf00      	nop
  }
  return 1;	/* all ok */
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <ucg_ext_none>:

/*
  will be used as default cb if no extentions callback is provided
*/
ucg_int_t ucg_ext_none(ucg_t *ucg, ucg_int_t msg, void *data)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	460b      	mov	r3, r1
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	817b      	strh	r3, [r7, #10]
  return 1;	/* all ok */  
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <ucg_handle_st7735_l90fx>:
  UCG_DATA(),								/* change to data mode */
  UCG_END()
};

ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  if ( ucg_clip_l90fx(ucg) != 0 )
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fb5b 	bl	800385c <ucg_clip_l90fx>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d056      	beq.n	800425a <ucg_handle_st7735_l90fx+0xc2>
  {
    switch(ucg->arg.dir)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d010      	beq.n	80041d8 <ucg_handle_st7735_l90fx+0x40>
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	dc20      	bgt.n	80041fc <ucg_handle_st7735_l90fx+0x64>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <ucg_handle_st7735_l90fx+0x2c>
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d005      	beq.n	80041ce <ucg_handle_st7735_l90fx+0x36>
 80041c2:	e01b      	b.n	80041fc <ucg_handle_st7735_l90fx+0x64>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 80041c4:	4927      	ldr	r1, [pc, #156]	; (8004264 <ucg_handle_st7735_l90fx+0xcc>)
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fe78 	bl	8003ebc <ucg_com_SendCmdSeq>
	break;
 80041cc:	e028      	b.n	8004220 <ucg_handle_st7735_l90fx+0x88>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 80041ce:	4926      	ldr	r1, [pc, #152]	; (8004268 <ucg_handle_st7735_l90fx+0xd0>)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fe73 	bl	8003ebc <ucg_com_SendCmdSeq>
	break;
 80041d6:	e023      	b.n	8004220 <ucg_handle_st7735_l90fx+0x88>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041dc:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.x = 127-tmp;
 80041de:	89fb      	ldrh	r3, [r7, #14]
 80041e0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	b21a      	sxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 80041ec:	491f      	ldr	r1, [pc, #124]	; (800426c <ucg_handle_st7735_l90fx+0xd4>)
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fe64 	bl	8003ebc <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	89fa      	ldrh	r2, [r7, #14]
 80041f8:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 80041fa:	e011      	b.n	8004220 <ucg_handle_st7735_l90fx+0x88>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004200:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.y = 127-tmp;
 8004202:	89fb      	ldrh	r3, [r7, #14]
 8004204:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8004208:	b29b      	uxth	r3, r3
 800420a:	b21a      	sxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8004210:	4917      	ldr	r1, [pc, #92]	; (8004270 <ucg_handle_st7735_l90fx+0xd8>)
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fe52 	bl	8003ebc <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	89fa      	ldrh	r2, [r7, #14]
 800421c:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 800421e:	bf00      	nop
    }
    c[0] = ucg->arg.pixel.rgb.color[0];
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004226:	723b      	strb	r3, [r7, #8]
    c[1] = ucg->arg.pixel.rgb.color[1];
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800422e:	727b      	strb	r3, [r7, #9]
    c[2] = ucg->arg.pixel.rgb.color[2];
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004236:	72bb      	strb	r3, [r7, #10]
    ucg_com_SendRepeat3Bytes(ucg, ucg->arg.len, c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69dc      	ldr	r4, [r3, #28]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004242:	b29a      	uxth	r2, r3
 8004244:	f107 0308 	add.w	r3, r7, #8
 8004248:	2113      	movs	r1, #19
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	47a0      	blx	r4
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 800424e:	2101      	movs	r1, #1
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fd7d 	bl	8003d50 <ucg_com_SetCSLineStatus>
    return 1;
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <ucg_handle_st7735_l90fx+0xc4>
  }
  return 0;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	bd90      	pop	{r4, r7, pc}
 8004264:	080069f4 	.word	0x080069f4
 8004268:	08006a14 	.word	0x08006a14
 800426c:	08006a38 	.word	0x08006a38
 8004270:	08006a5c 	.word	0x08006a5c

08004274 <ucg_handle_st7735_l90se>:
  return 0;
}


ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  
  /* Setup ccs for l90se. This will be updated by ucg_clip_l90se if required */
  
  for ( i = 0; i < 3; i++ )
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]
 8004280:	e01a      	b.n	80042b8 <ucg_handle_st7735_l90se+0x44>
  {
    ucg_ccs_init(ucg->arg.ccs_line+i, ucg->arg.rgb[0].color[i], ucg->arg.rgb[1].color[i], ucg->arg.len);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8004288:	7dfa      	ldrb	r2, [r7, #23]
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	18c8      	adds	r0, r1, r3
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	4413      	add	r3, r2
 80042a4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80042ae:	f7ff f933 	bl	8003518 <ucg_ccs_init>
  for ( i = 0; i < 3; i++ )
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	3301      	adds	r3, #1
 80042b6:	75fb      	strb	r3, [r7, #23]
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d9e1      	bls.n	8004282 <ucg_handle_st7735_l90se+0xe>
  }
  
  /* check if the line is visible */
  
  if ( ucg_clip_l90se(ucg) != 0 )
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fc4c 	bl	8003b5c <ucg_clip_l90se>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d074      	beq.n	80043b4 <ucg_handle_st7735_l90se+0x140>
  {
    ucg_int_t i;
    switch(ucg->arg.dir)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d010      	beq.n	80042f6 <ucg_handle_st7735_l90se+0x82>
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	dc20      	bgt.n	800431a <ucg_handle_st7735_l90se+0xa6>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <ucg_handle_st7735_l90se+0x6e>
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d005      	beq.n	80042ec <ucg_handle_st7735_l90se+0x78>
 80042e0:	e01b      	b.n	800431a <ucg_handle_st7735_l90se+0xa6>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 80042e2:	4937      	ldr	r1, [pc, #220]	; (80043c0 <ucg_handle_st7735_l90se+0x14c>)
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fde9 	bl	8003ebc <ucg_com_SendCmdSeq>
	break;
 80042ea:	e028      	b.n	800433e <ucg_handle_st7735_l90se+0xca>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 80042ec:	4935      	ldr	r1, [pc, #212]	; (80043c4 <ucg_handle_st7735_l90se+0x150>)
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fde4 	bl	8003ebc <ucg_com_SendCmdSeq>
	break;
 80042f4:	e023      	b.n	800433e <ucg_handle_st7735_l90se+0xca>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042fa:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.x = 127-tmp;
 80042fc:	8a7b      	ldrh	r3, [r7, #18]
 80042fe:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8004302:	b29b      	uxth	r3, r3
 8004304:	b21a      	sxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 800430a:	492f      	ldr	r1, [pc, #188]	; (80043c8 <ucg_handle_st7735_l90se+0x154>)
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fdd5 	bl	8003ebc <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8a7a      	ldrh	r2, [r7, #18]
 8004316:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8004318:	e011      	b.n	800433e <ucg_handle_st7735_l90se+0xca>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800431e:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.y = 127-tmp;
 8004320:	8a7b      	ldrh	r3, [r7, #18]
 8004322:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8004326:	b29b      	uxth	r3, r3
 8004328:	b21a      	sxth	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 800432e:	4927      	ldr	r1, [pc, #156]	; (80043cc <ucg_handle_st7735_l90se+0x158>)
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fdc3 	bl	8003ebc <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8a7a      	ldrh	r2, [r7, #18]
 800433a:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 800433c:	bf00      	nop
    }
    
    for( i = 0; i < ucg->arg.len; i++ )
 800433e:	2300      	movs	r3, #0
 8004340:	82bb      	strh	r3, [r7, #20]
 8004342:	e02a      	b.n	800439a <ucg_handle_st7735_l90se+0x126>
    {
      c[0] = ucg->arg.ccs_line[0].current;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800434a:	733b      	strb	r3, [r7, #12]
      c[1] = ucg->arg.ccs_line[1].current; 
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004352:	737b      	strb	r3, [r7, #13]
      c[2] = ucg->arg.ccs_line[2].current;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800435a:	73bb      	strb	r3, [r7, #14]
      ucg_com_SendRepeat3Bytes(ucg, 1, c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69dc      	ldr	r4, [r3, #28]
 8004360:	f107 030c 	add.w	r3, r7, #12
 8004364:	2201      	movs	r2, #1
 8004366:	2113      	movs	r1, #19
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	47a0      	blx	r4
      ucg_ccs_step(ucg->arg.ccs_line+0);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3346      	adds	r3, #70	; 0x46
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff f931 	bl	80035d8 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3346      	adds	r3, #70	; 0x46
 800437a:	330e      	adds	r3, #14
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff f92b 	bl	80035d8 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3346      	adds	r3, #70	; 0x46
 8004386:	331c      	adds	r3, #28
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff f925 	bl	80035d8 <ucg_ccs_step>
    for( i = 0; i < ucg->arg.len; i++ )
 800438e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004392:	b29b      	uxth	r3, r3
 8004394:	3301      	adds	r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	82bb      	strh	r3, [r7, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80043a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	dbcd      	blt.n	8004344 <ucg_handle_st7735_l90se+0xd0>
    }
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 80043a8:	2101      	movs	r1, #1
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fcd0 	bl	8003d50 <ucg_com_SetCSLineStatus>
    return 1;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <ucg_handle_st7735_l90se+0x142>
  }
  return 0;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd90      	pop	{r4, r7, pc}
 80043be:	bf00      	nop
 80043c0:	080069f4 	.word	0x080069f4
 80043c4:	08006a14 	.word	0x08006a14
 80043c8:	08006a38 	.word	0x08006a38
 80043cc:	08006a5c 	.word	0x08006a5c

080043d0 <ucg_dev_ic_st7735_18>:
	UCG_CS(1),					/* disable chip */
	UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	460b      	mov	r3, r1
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80043de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043e2:	3b0a      	subs	r3, #10
 80043e4:	2b0b      	cmp	r3, #11
 80043e6:	d85f      	bhi.n	80044a8 <ucg_dev_ic_st7735_18+0xd8>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <ucg_dev_ic_st7735_18+0x20>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004421 	.word	0x08004421
 80043f4:	0800443b 	.word	0x0800443b
 80043f8:	080044a9 	.word	0x080044a9
 80043fc:	080044a9 	.word	0x080044a9
 8004400:	080044a9 	.word	0x080044a9
 8004404:	08004447 	.word	0x08004447
 8004408:	080044a9 	.word	0x080044a9
 800440c:	080044a9 	.word	0x080044a9
 8004410:	080044a9 	.word	0x080044a9
 8004414:	080044a9 	.word	0x080044a9
 8004418:	08004457 	.word	0x08004457
 800441c:	0800449f 	.word	0x0800449f
  {
    case UCG_MSG_DEV_POWER_UP:
      /* setup com interface and provide information on the clock speed */
      /* of the serial and parallel interface. Values are nanoseconds. */
	  ucg->display_offset.x = 2;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2202      	movs	r2, #2
 8004424:	841a      	strh	r2, [r3, #32]
	  ucg->display_offset.y = 1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	845a      	strh	r2, [r3, #34]	; 0x22
      return ucg_com_PowerUp(ucg, 100, 66);
 800442c:	2242      	movs	r2, #66	; 0x42
 800442e:	2164      	movs	r1, #100	; 0x64
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fbdc 	bl	8003bee <ucg_com_PowerUp>
 8004436:	4603      	mov	r3, r0
 8004438:	e03e      	b.n	80044b8 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DEV_POWER_DOWN:
      ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
 800443a:	4921      	ldr	r1, [pc, #132]	; (80044c0 <ucg_dev_ic_st7735_18+0xf0>)
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fd3d 	bl	8003ebc <ucg_com_SendCmdSeq>
      return 1;
 8004442:	2301      	movs	r3, #1
 8004444:	e038      	b.n	80044b8 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2280      	movs	r2, #128	; 0x80
 800444a:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2280      	movs	r2, #128	; 0x80
 8004450:	805a      	strh	r2, [r3, #2]
      return 1;
 8004452:	2301      	movs	r3, #1
 8004454:	e030      	b.n	80044b8 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_PIXEL:
      if ( ucg_clip_is_pixel_visible(ucg) !=0 )
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff f9e7 	bl	800382a <ucg_clip_is_pixel_visible>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01b      	beq.n	800449a <ucg_dev_ic_st7735_18+0xca>
      {
	uint8_t c[3];
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_seq);	
 8004462:	4918      	ldr	r1, [pc, #96]	; (80044c4 <ucg_dev_ic_st7735_18+0xf4>)
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff fd29 	bl	8003ebc <ucg_com_SendCmdSeq>
	c[0] = ucg->arg.pixel.rgb.color[0];
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004470:	753b      	strb	r3, [r7, #20]
	c[1] = ucg->arg.pixel.rgb.color[1];
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004478:	757b      	strb	r3, [r7, #21]
	c[2] = ucg->arg.pixel.rgb.color[2];
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004480:	75bb      	strb	r3, [r7, #22]
	ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	69dc      	ldr	r4, [r3, #28]
 8004486:	f107 0314 	add.w	r3, r7, #20
 800448a:	2201      	movs	r2, #1
 800448c:	2113      	movs	r1, #19
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	47a0      	blx	r4
	ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8004492:	2101      	movs	r1, #1
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fc5b 	bl	8003d50 <ucg_com_SetCSLineStatus>
      }
      return 1;
 800449a:	2301      	movs	r3, #1
 800449c:	e00c      	b.n	80044b8 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_L90FX:
      //ucg_handle_l90fx(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90fx(ucg);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff fe7a 	bl	8004198 <ucg_handle_st7735_l90fx>
      return 1;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e007      	b.n	80044b8 <ucg_dev_ic_st7735_18+0xe8>
    /*
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
    */
  }
  return ucg_dev_default_cb(ucg, msg, data);  
 80044a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4619      	mov	r1, r3
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff fe41 	bl	8004138 <ucg_dev_default_cb>
 80044b6:	4603      	mov	r3, r0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd90      	pop	{r4, r7, pc}
 80044c0:	08006a80 	.word	0x08006a80
 80044c4:	080069d4 	.word	0x080069d4

080044c8 <ucg_ext_st7735_18>:

ucg_int_t ucg_ext_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	460b      	mov	r3, r1
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80044d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044da:	2b17      	cmp	r3, #23
 80044dc:	d103      	bne.n	80044e6 <ucg_ext_st7735_18+0x1e>
  {
    case UCG_MSG_DRAW_L90SE:
      //ucg_handle_l90se(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90se(ucg);
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff fec8 	bl	8004274 <ucg_handle_st7735_l90se>
      break;
 80044e4:	bf00      	nop
  }
  return 1;
 80044e6:	2301      	movs	r3, #1
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <ucg_PowerDown>:

#include "ucg.h"
#include <stddef.h>

void ucg_PowerDown(ucg_t *ucg)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if ( ucg->is_power_up != 0 )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <ucg_PowerDown+0x2c>
  {
    ucg->device_cb(ucg, UCG_MSG_DEV_POWER_DOWN, NULL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	210b      	movs	r1, #11
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
    ucg->is_power_up = 0;
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	7813      	ldrb	r3, [r2, #0]
 8004516:	f36f 0300 	bfc	r3, #0, #1
 800451a:	7013      	strb	r3, [r2, #0]
  }
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <ucg_PowerUp>:

ucg_int_t ucg_PowerUp(ucg_t *ucg)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  ucg_int_t r;
  /* power down first. will do nothing if power is already down */
  ucg_PowerDown(ucg);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ffdf 	bl	80044f0 <ucg_PowerDown>
  /* now try to power up the display */
  r = ucg->device_cb(ucg, UCG_MSG_DEV_POWER_UP, NULL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2200      	movs	r2, #0
 8004538:	210a      	movs	r1, #10
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
 800453e:	4603      	mov	r3, r0
 8004540:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8004542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <ucg_PowerUp+0x30>
  {
    ucg->is_power_up = 1;
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	7813      	ldrb	r3, [r2, #0]
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	7013      	strb	r3, [r2, #0]
  }
  return r;
 8004554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <ucg_SetClipBox>:

void ucg_SetClipBox(ucg_t *ucg, ucg_box_t *clip_box)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  ucg->device_cb(ucg, UCG_MSG_SET_CLIP_BOX, (void *)(clip_box));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	210c      	movs	r1, #12
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <ucg_SetMaxClipRange>:
  clip_box.size.h = h;
  ucg_SetClipBox(ucg, &clip_box);
}

void ucg_SetMaxClipRange(ucg_t *ucg)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  ucg_box_t new_clip_box;
  new_clip_box.size = ucg->dimension;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	f107 030c 	add.w	r3, r7, #12
 800458c:	3202      	adds	r2, #2
 800458e:	6810      	ldr	r0, [r2, #0]
 8004590:	6018      	str	r0, [r3, #0]
  new_clip_box.ul.x = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	813b      	strh	r3, [r7, #8]
  new_clip_box.ul.y = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	817b      	strh	r3, [r7, #10]
  ucg_SetClipBox(ucg, &new_clip_box);
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ffdd 	bl	8004560 <ucg_SetClipBox>
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <ucg_GetDimension>:
/* 
  Query the display dimension from the driver, reset clip window to maximum 
  new dimension
*/
void ucg_GetDimension(ucg_t *ucg)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_GET_DIMENSION, &(ucg->dimension));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	3202      	adds	r2, #2
 80045be:	210f      	movs	r1, #15
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
  ucg_SetMaxClipRange(ucg);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ffda 	bl	800457e <ucg_SetMaxClipRange>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <ucg_DrawL90FXWithArg>:
{
  ucg->device_cb(ucg, UCG_MSG_DRAW_PIXEL, NULL);
}

void ucg_DrawL90FXWithArg(ucg_t *ucg)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_L90FX, &(ucg->arg));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	3224      	adds	r2, #36	; 0x24
 80045e2:	2115      	movs	r1, #21
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	4798      	blx	r3
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <ucg_dev_st7735_18x128x128>:
  UCG_CS(1),					/* disable chip */
  UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_st7735_18x128x128(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	460b      	mov	r3, r1
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80045fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	d021      	beq.n	800464a <ucg_dev_st7735_18x128x128+0x5a>
 8004606:	2b0f      	cmp	r3, #15
 8004608:	dc27      	bgt.n	800465a <ucg_dev_st7735_18x128x128+0x6a>
 800460a:	2b0a      	cmp	r3, #10
 800460c:	d002      	beq.n	8004614 <ucg_dev_st7735_18x128x128+0x24>
 800460e:	2b0b      	cmp	r3, #11
 8004610:	d012      	beq.n	8004638 <ucg_dev_st7735_18x128x128+0x48>
 8004612:	e022      	b.n	800465a <ucg_dev_st7735_18x128x128+0x6a>
  {
    case UCG_MSG_DEV_POWER_UP:
      /* 1. Call to the controller procedures to setup the com interface */
      if ( ucg_dev_ic_st7735_18(ucg, msg, data) == 0 )
 8004614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4619      	mov	r1, r3
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff fed7 	bl	80043d0 <ucg_dev_ic_st7735_18>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <ucg_dev_st7735_18x128x128+0x3c>
	return 0;
 8004628:	2300      	movs	r3, #0
 800462a:	e01e      	b.n	800466a <ucg_dev_st7735_18x128x128+0x7a>

      /* 2. Send specific init sequence for this display module */
      ucg_com_SendCmdSeq(ucg, ucg_tft_128x160_st7735_init_seq);
 800462c:	4911      	ldr	r1, [pc, #68]	; (8004674 <ucg_dev_st7735_18x128x128+0x84>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fc44 	bl	8003ebc <ucg_com_SendCmdSeq>
      
      return 1;
 8004634:	2301      	movs	r3, #1
 8004636:	e018      	b.n	800466a <ucg_dev_st7735_18x128x128+0x7a>
      
    case UCG_MSG_DEV_POWER_DOWN:
      /* let do power down by the conroller procedures */
      return ucg_dev_ic_st7735_18(ucg, msg, data);  
 8004638:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4619      	mov	r1, r3
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff fec5 	bl	80043d0 <ucg_dev_ic_st7735_18>
 8004646:	4603      	mov	r3, r0
 8004648:	e00f      	b.n	800466a <ucg_dev_st7735_18x128x128+0x7a>
    
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2280      	movs	r2, #128	; 0x80
 8004654:	805a      	strh	r2, [r3, #2]
      return 1;
 8004656:	2301      	movs	r3, #1
 8004658:	e007      	b.n	800466a <ucg_dev_st7735_18x128x128+0x7a>
  }
  
  /* all other messages are handled by the controller procedures */
  return ucg_dev_ic_st7735_18(ucg, msg, data);  
 800465a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4619      	mov	r1, r3
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff feb4 	bl	80043d0 <ucg_dev_ic_st7735_18>
 8004668:	4603      	mov	r3, r0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	08006a88 	.word	0x08006a88

08004678 <ucg_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE;
static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	607b      	str	r3, [r7, #4]
  return ucg_pgm_read( (ucg_pgm_uint8_t *)font );  
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	781b      	ldrb	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <ucg_font_get_word>:

static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE; 
static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	607b      	str	r3, [r7, #4]
    pos = ucg_pgm_read( (ucg_pgm_uint8_t *)font );
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	81fb      	strh	r3, [r7, #14]
    font++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3301      	adds	r3, #1
 80046ba:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80046bc:	89fb      	ldrh	r3, [r7, #14]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	81fb      	strh	r3, [r7, #14]
    pos += ucg_pgm_read( (ucg_pgm_uint8_t *)font);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	89fb      	ldrh	r3, [r7, #14]
 80046ca:	4413      	add	r3, r2
 80046cc:	81fb      	strh	r3, [r7, #14]
    return pos;
 80046ce:	89fb      	ldrh	r3, [r7, #14]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <ucg_read_font_info>:

/*========================================================================*/
/* new font format */
void ucg_read_font_info(ucg_font_info_t *font_info, const ucg_fntpgm_uint8_t *font)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = ucg_font_get_byte(font, 0);
 80046e6:	2100      	movs	r1, #0
 80046e8:	6838      	ldr	r0, [r7, #0]
 80046ea:	f7ff ffc5 	bl	8004678 <ucg_font_get_byte>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = ucg_font_get_byte(font, 1);
 80046f6:	2101      	movs	r1, #1
 80046f8:	6838      	ldr	r0, [r7, #0]
 80046fa:	f7ff ffbd 	bl	8004678 <ucg_font_get_byte>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = ucg_font_get_byte(font, 2);
 8004706:	2102      	movs	r1, #2
 8004708:	6838      	ldr	r0, [r7, #0]
 800470a:	f7ff ffb5 	bl	8004678 <ucg_font_get_byte>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = ucg_font_get_byte(font, 3);
 8004716:	2103      	movs	r1, #3
 8004718:	6838      	ldr	r0, [r7, #0]
 800471a:	f7ff ffad 	bl	8004678 <ucg_font_get_byte>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = ucg_font_get_byte(font, 4);
 8004726:	2104      	movs	r1, #4
 8004728:	6838      	ldr	r0, [r7, #0]
 800472a:	f7ff ffa5 	bl	8004678 <ucg_font_get_byte>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = ucg_font_get_byte(font, 5);
 8004736:	2105      	movs	r1, #5
 8004738:	6838      	ldr	r0, [r7, #0]
 800473a:	f7ff ff9d 	bl	8004678 <ucg_font_get_byte>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = ucg_font_get_byte(font, 6);
 8004746:	2106      	movs	r1, #6
 8004748:	6838      	ldr	r0, [r7, #0]
 800474a:	f7ff ff95 	bl	8004678 <ucg_font_get_byte>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = ucg_font_get_byte(font, 7);
 8004756:	2107      	movs	r1, #7
 8004758:	6838      	ldr	r0, [r7, #0]
 800475a:	f7ff ff8d 	bl	8004678 <ucg_font_get_byte>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = ucg_font_get_byte(font, 8);
 8004766:	2108      	movs	r1, #8
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	f7ff ff85 	bl	8004678 <ucg_font_get_byte>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = ucg_font_get_byte(font, 9);
 8004776:	2109      	movs	r1, #9
 8004778:	6838      	ldr	r0, [r7, #0]
 800477a:	f7ff ff7d 	bl	8004678 <ucg_font_get_byte>
 800477e:	4603      	mov	r3, r0
 8004780:	b25a      	sxtb	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = ucg_font_get_byte(font, 10);
 8004786:	210a      	movs	r1, #10
 8004788:	6838      	ldr	r0, [r7, #0]
 800478a:	f7ff ff75 	bl	8004678 <ucg_font_get_byte>
 800478e:	4603      	mov	r3, r0
 8004790:	b25a      	sxtb	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = ucg_font_get_byte(font, 11);
 8004796:	210b      	movs	r1, #11
 8004798:	6838      	ldr	r0, [r7, #0]
 800479a:	f7ff ff6d 	bl	8004678 <ucg_font_get_byte>
 800479e:	4603      	mov	r3, r0
 80047a0:	b25a      	sxtb	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = ucg_font_get_byte(font, 12);
 80047a6:	210c      	movs	r1, #12
 80047a8:	6838      	ldr	r0, [r7, #0]
 80047aa:	f7ff ff65 	bl	8004678 <ucg_font_get_byte>
 80047ae:	4603      	mov	r3, r0
 80047b0:	b25a      	sxtb	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = ucg_font_get_byte(font, 13);
 80047b6:	210d      	movs	r1, #13
 80047b8:	6838      	ldr	r0, [r7, #0]
 80047ba:	f7ff ff5d 	bl	8004678 <ucg_font_get_byte>
 80047be:	4603      	mov	r3, r0
 80047c0:	b25a      	sxtb	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = ucg_font_get_byte(font, 14);
 80047c6:	210e      	movs	r1, #14
 80047c8:	6838      	ldr	r0, [r7, #0]
 80047ca:	f7ff ff55 	bl	8004678 <ucg_font_get_byte>
 80047ce:	4603      	mov	r3, r0
 80047d0:	b25a      	sxtb	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = ucg_font_get_byte(font, 15);
 80047d6:	210f      	movs	r1, #15
 80047d8:	6838      	ldr	r0, [r7, #0]
 80047da:	f7ff ff4d 	bl	8004678 <ucg_font_get_byte>
 80047de:	4603      	mov	r3, r0
 80047e0:	b25a      	sxtb	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = ucg_font_get_byte(font, 16);
 80047e6:	2110      	movs	r1, #16
 80047e8:	6838      	ldr	r0, [r7, #0]
 80047ea:	f7ff ff45 	bl	8004678 <ucg_font_get_byte>
 80047ee:	4603      	mov	r3, r0
 80047f0:	b25a      	sxtb	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = ucg_font_get_word(font, 17);
 80047f6:	2111      	movs	r1, #17
 80047f8:	6838      	ldr	r0, [r7, #0]
 80047fa:	f7ff ff4f 	bl	800469c <ucg_font_get_word>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = ucg_font_get_word(font, 19);  
 8004806:	2113      	movs	r1, #19
 8004808:	6838      	ldr	r0, [r7, #0]
 800480a:	f7ff ff47 	bl	800469c <ucg_font_get_word>
 800480e:	4603      	mov	r3, r0
 8004810:	461a      	mov	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	829a      	strh	r2, [r3, #20]
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <ucg_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t ucg_font_decode_get_unsigned_bits(ucg_font_decode_t *f, uint8_t cnt) 
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	460b      	mov	r3, r1
 8004828:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	7b1b      	ldrb	r3, [r3, #12]
 800482e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) );  
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	7b7b      	ldrb	r3, [r7, #13]
 800483c:	fa42 f303 	asr.w	r3, r2, r3
 8004840:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004842:	7b7b      	ldrb	r3, [r7, #13]
 8004844:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8004846:	7bba      	ldrb	r2, [r7, #14]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	4413      	add	r3, r2
 800484c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800484e:	7bbb      	ldrb	r3, [r7, #14]
 8004850:	2b07      	cmp	r3, #7
 8004852:	d91a      	bls.n	800488a <ucg_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004854:	2308      	movs	r3, #8
 8004856:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8004858:	7b3a      	ldrb	r2, [r7, #12]
 800485a:	7b7b      	ldrb	r3, [r7, #13]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) ) << (s);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	7b3b      	ldrb	r3, [r7, #12]
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	b25a      	sxtb	r2, r3
 800487a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800487e:	4313      	orrs	r3, r2
 8004880:	b25b      	sxtb	r3, r3
 8004882:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	3b08      	subs	r3, #8
 8004888:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	b2da      	uxtb	r2, r3
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	4013      	ands	r3, r2
 800489e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7bba      	ldrb	r2, [r7, #14]
 80048a4:	731a      	strb	r2, [r3, #12]
  return val;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <ucg_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t ucg_font_decode_get_signed_bits(ucg_font_decode_t *f, uint8_t cnt)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt);
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ffaa 	bl	800481e <ucg_font_decode_get_unsigned_bits>
 80048ca:	4603      	mov	r3, r0
 80048cc:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80048d8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80048e4:	7bfa      	ldrb	r2, [r7, #15]
 80048e6:	7bbb      	ldrb	r3, [r7, #14]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	73fb      	strb	r3, [r7, #15]
  return v;
 80048ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <ucg_add_vector_y>:
}
*/

static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80048fa:	b490      	push	{r4, r7}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4604      	mov	r4, r0
 8004902:	4608      	mov	r0, r1
 8004904:	4611      	mov	r1, r2
 8004906:	461a      	mov	r2, r3
 8004908:	4623      	mov	r3, r4
 800490a:	80fb      	strh	r3, [r7, #6]
 800490c:	4603      	mov	r3, r0
 800490e:	717b      	strb	r3, [r7, #5]
 8004910:	460b      	mov	r3, r1
 8004912:	713b      	strb	r3, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d016      	beq.n	800494c <ucg_add_vector_y+0x52>
 800491e:	2b02      	cmp	r3, #2
 8004920:	dc1c      	bgt.n	800495c <ucg_add_vector_y+0x62>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <ucg_add_vector_y+0x32>
 8004926:	2b01      	cmp	r3, #1
 8004928:	d008      	beq.n	800493c <ucg_add_vector_y+0x42>
 800492a:	e017      	b.n	800495c <ucg_add_vector_y+0x62>
  {
    case 0:
      dy += y;
 800492c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004930:	b29a      	uxth	r2, r3
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	4413      	add	r3, r2
 8004936:	b29b      	uxth	r3, r3
 8004938:	80fb      	strh	r3, [r7, #6]
      break;
 800493a:	e017      	b.n	800496c <ucg_add_vector_y+0x72>
    case 1:
      dy += x;
 800493c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004940:	b29a      	uxth	r2, r3
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	4413      	add	r3, r2
 8004946:	b29b      	uxth	r3, r3
 8004948:	80fb      	strh	r3, [r7, #6]
      break;
 800494a:	e00f      	b.n	800496c <ucg_add_vector_y+0x72>
    case 2:
      dy -= y;
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004952:	b29b      	uxth	r3, r3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	b29b      	uxth	r3, r3
 8004958:	80fb      	strh	r3, [r7, #6]
      break;
 800495a:	e007      	b.n	800496c <ucg_add_vector_y+0x72>
    default:
      dy -= x;
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004962:	b29b      	uxth	r3, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	80fb      	strh	r3, [r7, #6]
      break;      
 800496a:	bf00      	nop
  }
  return dy;
 800496c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bc90      	pop	{r4, r7}
 8004978:	4770      	bx	lr

0800497a <ucg_add_vector_x>:

static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800497a:	b490      	push	{r4, r7}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	4604      	mov	r4, r0
 8004982:	4608      	mov	r0, r1
 8004984:	4611      	mov	r1, r2
 8004986:	461a      	mov	r2, r3
 8004988:	4623      	mov	r3, r4
 800498a:	80fb      	strh	r3, [r7, #6]
 800498c:	4603      	mov	r3, r0
 800498e:	717b      	strb	r3, [r7, #5]
 8004990:	460b      	mov	r3, r1
 8004992:	713b      	strb	r3, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d016      	beq.n	80049cc <ucg_add_vector_x+0x52>
 800499e:	2b02      	cmp	r3, #2
 80049a0:	dc1c      	bgt.n	80049dc <ucg_add_vector_x+0x62>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <ucg_add_vector_x+0x32>
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d008      	beq.n	80049bc <ucg_add_vector_x+0x42>
 80049aa:	e017      	b.n	80049dc <ucg_add_vector_x+0x62>
  {
    case 0:
      dx += x;
 80049ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	4413      	add	r3, r2
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	80fb      	strh	r3, [r7, #6]
      break;
 80049ba:	e017      	b.n	80049ec <ucg_add_vector_x+0x72>
    case 1:
      dx -= y;
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	80fb      	strh	r3, [r7, #6]
      break;
 80049ca:	e00f      	b.n	80049ec <ucg_add_vector_x+0x72>
    case 2:
      dx -= x;
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	80fb      	strh	r3, [r7, #6]
      break;
 80049da:	e007      	b.n	80049ec <ucg_add_vector_x+0x72>
    default:
      dx += y;
 80049dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	4413      	add	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	80fb      	strh	r3, [r7, #6]
      break;      
 80049ea:	bf00      	nop
  }
  return dx;
 80049ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc90      	pop	{r4, r7}
 80049f8:	4770      	bx	lr

080049fa <ucg_font_decode_len>:
  Called by:
    ucg_font_decode_glyph()
*/
/* optimized */
void ucg_font_decode_len(ucg_t *ucg, uint8_t len, uint8_t is_foreground)
{
 80049fa:	b590      	push	{r4, r7, lr}
 80049fc:	b089      	sub	sp, #36	; 0x24
 80049fe:	af02      	add	r7, sp, #8
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
 8004a06:	4613      	mov	r3, r2
 8004a08:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  ucg_int_t x, y;
  
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3380      	adds	r3, #128	; 0x80
 8004a0e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004a1a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004a22:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004a2a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8004a2c:	7bfa      	ldrb	r2, [r7, #15]
 8004a2e:	7d7b      	ldrb	r3, [r7, #21]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004a38:	7dfa      	ldrb	r2, [r7, #23]
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d201      	bcs.n	8004a44 <ucg_font_decode_len+0x4a>
      current = cnt;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //ucg_font_decode_draw_pixel(ucg, lx, ly, current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	889b      	ldrh	r3, [r3, #4]
 8004a48:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	88db      	ldrh	r3, [r3, #6]
 8004a4e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
    x = ucg_add_vector_x(x, lx, ly, decode->dir);
 8004a50:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004a54:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	7b9b      	ldrb	r3, [r3, #14]
 8004a5c:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8004a60:	f7ff ff8b 	bl	800497a <ucg_add_vector_x>
 8004a64:	4603      	mov	r3, r0
 8004a66:	81bb      	strh	r3, [r7, #12]
    y = ucg_add_vector_y(y, lx, ly, decode->dir);
 8004a68:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004a6c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	7b9b      	ldrb	r3, [r3, #14]
 8004a74:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8004a78:	f7ff ff3f 	bl	80048fa <ucg_add_vector_y>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8004a80:	78bb      	ldrb	r3, [r7, #2]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d010      	beq.n	8004aa8 <ucg_font_decode_len+0xae>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 0);
 8004a86:	7dbb      	ldrb	r3, [r7, #22]
 8004a88:	b218      	sxth	r0, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	7b9b      	ldrb	r3, [r3, #14]
 8004a8e:	b21b      	sxth	r3, r3
 8004a90:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004a94:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004a98:	2400      	movs	r4, #0
 8004a9a:	9401      	str	r4, [sp, #4]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fbbf 	bl	8005224 <ucg_Draw90Line>
 8004aa6:	e013      	b.n	8004ad0 <ucg_font_decode_len+0xd6>
    }
    else if ( decode->is_transparent == 0 )    
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	7b5b      	ldrb	r3, [r3, #13]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10f      	bne.n	8004ad0 <ucg_font_decode_len+0xd6>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 1);
 8004ab0:	7dbb      	ldrb	r3, [r7, #22]
 8004ab2:	b218      	sxth	r0, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	7b9b      	ldrb	r3, [r3, #14]
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004abe:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004ac2:	2401      	movs	r4, #1
 8004ac4:	9401      	str	r4, [sp, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	4603      	mov	r3, r0
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fbaa 	bl	8005224 <ucg_Draw90Line>
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004ad0:	7dfa      	ldrb	r2, [r7, #23]
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d309      	bcc.n	8004aec <ucg_font_decode_len+0xf2>
      break;
    cnt -= rem;
 8004ad8:	7dfa      	ldrb	r2, [r7, #23]
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	757b      	strb	r3, [r7, #21]
    ly++;
 8004ae4:	7d3b      	ldrb	r3, [r7, #20]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004aea:	e79b      	b.n	8004a24 <ucg_font_decode_len+0x2a>
      break;
 8004aec:	bf00      	nop
  }
  //ucg_font_decode_draw_pixel(ucg, x,y, cnt, is_foreground);
  lx += cnt;
 8004aee:	7d7a      	ldrb	r2, [r7, #21]
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	4413      	add	r3, r2
 8004af4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004af6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8004afe:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	725a      	strb	r2, [r3, #9]
  
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd90      	pop	{r4, r7, pc}

08004b0e <ucg_font_setup_decode>:

static void ucg_font_setup_decode(ucg_t *ucg, const uint8_t *glyph_data)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3380      	adds	r3, #128	; 0x80
 8004b1c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	731a      	strb	r2, [r3, #12]
  
  decode->decode_ptr += 1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	601a      	str	r2, [r3, #0]
  decode->decode_ptr += 1;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	601a      	str	r2, [r3, #0]
  
  decode->glyph_width = ucg_font_decode_get_unsigned_bits(decode, ucg->font_info.bits_per_char_width);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004b44:	4619      	mov	r1, r3
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff fe69 	bl	800481e <ucg_font_decode_get_unsigned_bits>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	b25a      	sxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = ucg_font_decode_get_unsigned_bits(decode,ucg->font_info.bits_per_char_height);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fe5e 	bl	800481e <ucg_font_decode_get_unsigned_bits>
 8004b62:	4603      	mov	r3, r0
 8004b64:	b25a      	sxtb	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	72da      	strb	r2, [r3, #11]
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <ucg_font_decode_glyph>:
    ucg_font_decode_len()
*/
/* optimized */

int8_t ucg_font_decode_glyph(ucg_t *ucg, const uint8_t *glyph_data)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
  int8_t d;
  int8_t h;
//  ucg_scan = ucg;
//  decode = &(ucg_scan->font_decode);
    
  ucg_font_setup_decode(ucg, glyph_data);
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ffc5 	bl	8004b0e <ucg_font_setup_decode>
  h = ucg->font_decode.glyph_height;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8004b8a:	73fb      	strb	r3, [r7, #15]
  
  x = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_x);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7ff fe8a 	bl	80048b4 <ucg_font_decode_get_signed_bits>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	73bb      	strb	r3, [r7, #14]
  y = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_y);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7ff fe7e 	bl	80048b4 <ucg_font_decode_get_signed_bits>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	737b      	strb	r3, [r7, #13]
  d = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_delta_x);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f7ff fe72 	bl	80048b4 <ucg_font_decode_get_signed_bits>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	733b      	strb	r3, [r7, #12]
  
  if ( ucg->font_decode.glyph_width > 0 )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	dd69      	ble.n	8004cb2 <ucg_font_decode_glyph+0x140>
  {
	ucg->font_decode.target_x = ucg_add_vector_x(ucg->font_decode.target_x, x, -(h+y), ucg->font_decode.dir);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	7b7b      	ldrb	r3, [r7, #13]
 8004be8:	4413      	add	r3, r2
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	425b      	negs	r3, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	b25a      	sxtb	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004bf8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004bfc:	f7ff febd 	bl	800497a <ucg_add_vector_x>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ucg->font_decode.target_y = ucg_add_vector_y(ucg->font_decode.target_y, x, -(h+y), ucg->font_decode.dir);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	7b7b      	ldrb	r3, [r7, #13]
 8004c14:	4413      	add	r3, r2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	425b      	negs	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	b25a      	sxtb	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004c24:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004c28:	f7ff fe67 	bl	80048fa <ucg_add_vector_y>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    //ucg_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

    /* reset local x/y position */
	ucg->font_decode.x = 0;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	ucg->font_decode.y = 0;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    for(;;)
    {
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f7ff fde2 	bl	800481e <ucg_font_decode_get_unsigned_bits>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	72fb      	strb	r3, [r7, #11]
      b = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7ff fdd6 	bl	800481e <ucg_font_decode_get_unsigned_bits>
 8004c72:	4603      	mov	r3, r0
 8004c74:	72bb      	strb	r3, [r7, #10]
      do
      {
		ucg_font_decode_len(ucg, a, 0);
 8004c76:	7afb      	ldrb	r3, [r7, #11]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff febc 	bl	80049fa <ucg_font_decode_len>
		ucg_font_decode_len(ucg, b, 1);
 8004c82:	7abb      	ldrb	r3, [r7, #10]
 8004c84:	2201      	movs	r2, #1
 8004c86:	4619      	mov	r1, r3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff feb6 	bl	80049fa <ucg_font_decode_len>
      } while( ucg_font_decode_get_unsigned_bits(&ucg->font_decode, 1) != 0 );
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3380      	adds	r3, #128	; 0x80
 8004c92:	2101      	movs	r1, #1
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fdc2 	bl	800481e <ucg_font_decode_get_unsigned_bits>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ea      	bne.n	8004c76 <ucg_font_decode_glyph+0x104>

      if ( ucg->font_decode.y >= h )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8004ca6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	dd00      	ble.n	8004cb0 <ucg_font_decode_glyph+0x13e>
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8004cae:	e7ca      	b.n	8004c46 <ucg_font_decode_glyph+0xd4>
	    break;
 8004cb0:	bf00      	nop
    }
  }
  return d;
 8004cb2:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <ucg_font_get_glyph_data>:
    encoding: Encoding (ASCII code) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *ucg_font_get_glyph_data(ucg_t *ucg, uint8_t encoding)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
  const uint8_t *font = ucg->font;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cce:	60fb      	str	r3, [r7, #12]
  font += UCG_FONT_DATA_STRUCT_SIZE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3315      	adds	r3, #21
 8004cd4:	60fb      	str	r3, [r7, #12]
  
  if ( encoding >= 'a' )
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	2b60      	cmp	r3, #96	; 0x60
 8004cda:	d907      	bls.n	8004cec <ucg_font_get_glyph_data+0x2e>
  {
    font += ucg->font_info.start_pos_lower_a;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e009      	b.n	8004d00 <ucg_font_get_glyph_data+0x42>
  }
  else if ( encoding >= 'A' )
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d906      	bls.n	8004d00 <ucg_font_get_glyph_data+0x42>
  {
    font += ucg->font_info.start_pos_upper_A;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  }
  
  for(;;)
  {
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00e      	beq.n	8004d28 <ucg_font_get_glyph_data+0x6a>
      break;
    if ( ucg_pgm_read( (ucg_pgm_uint8_t *)font ) == encoding )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d101      	bne.n	8004d18 <ucg_font_get_glyph_data+0x5a>
    {
      return font;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	e009      	b.n	8004d2c <ucg_font_get_glyph_data+0x6e>
    }
    font += ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8004d26:	e7eb      	b.n	8004d00 <ucg_font_get_glyph_data+0x42>
      break;
 8004d28:	bf00      	nop
  }
  return NULL;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <ucg_font_draw_glyph>:

ucg_int_t ucg_font_draw_glyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	817b      	strh	r3, [r7, #10]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	813b      	strh	r3, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	71fb      	strb	r3, [r7, #7]
  ucg_int_t dx = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	82fb      	strh	r3, [r7, #22]
  ucg->font_decode.target_x = x;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	897a      	ldrh	r2, [r7, #10]
 8004d5a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  ucg->font_decode.target_y = y;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	893a      	ldrh	r2, [r7, #8]
 8004d62:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  //ucg->font_decode.is_transparent = is_transparent; this is already set
  ucg->font_decode.dir = dir;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	79fa      	ldrb	r2, [r7, #7]
 8004d6a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  const uint8_t *glyph_data = ucg_font_get_glyph_data(ucg, encoding);
 8004d6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff ffa2 	bl	8004cbe <ucg_font_get_glyph_data>
 8004d7a:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <ucg_font_draw_glyph+0x56>
  {
    dx = ucg_font_decode_glyph(ucg, glyph_data);
 8004d82:	6939      	ldr	r1, [r7, #16]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff fef4 	bl	8004b72 <ucg_font_decode_glyph>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8004d8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <ucg_SetFontMode>:
    UCG_FONT_MODE_SOLID
    UCG_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void ucg_SetFontMode(ucg_t *ucg, uint8_t is_transparent)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	70fb      	strb	r3, [r7, #3]
  ucg->font_decode.is_transparent = is_transparent;		// new font procedures
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <ucg_DrawGlyph>:

ucg_int_t ucg_DrawGlyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	71fb      	strb	r3, [r7, #7]
  switch(dir)
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d837      	bhi.n	8004e4c <ucg_DrawGlyph+0x90>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <ucg_DrawGlyph+0x28>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004e0b 	.word	0x08004e0b
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e37 	.word	0x08004e37
  {
    case 0:
      y += ucg->font_calc_vref(ucg);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	4798      	blx	r3
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	4413      	add	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	813b      	strh	r3, [r7, #8]
      break;
 8004e08:	e020      	b.n	8004e4c <ucg_DrawGlyph+0x90>
    case 1:
      x -= ucg->font_calc_vref(ucg);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	4798      	blx	r3
 8004e12:	4603      	mov	r3, r0
 8004e14:	897a      	ldrh	r2, [r7, #10]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	817b      	strh	r3, [r7, #10]
      break;
 8004e1e:	e015      	b.n	8004e4c <ucg_DrawGlyph+0x90>
    case 2:
      y -= ucg->font_calc_vref(ucg);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	4798      	blx	r3
 8004e28:	4603      	mov	r3, r0
 8004e2a:	893a      	ldrh	r2, [r7, #8]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	813b      	strh	r3, [r7, #8]
      break;
 8004e34:	e00a      	b.n	8004e4c <ucg_DrawGlyph+0x90>
    case 3:
      x += ucg->font_calc_vref(ucg);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	4798      	blx	r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	897b      	ldrh	r3, [r7, #10]
 8004e44:	4413      	add	r3, r2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	817b      	strh	r3, [r7, #10]
      break;
 8004e4a:	bf00      	nop
  }
  return ucg_font_draw_glyph(ucg, x, y, dir, encoding);
 8004e4c:	79f8      	ldrb	r0, [r7, #7]
 8004e4e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004e52:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004e56:	7e3b      	ldrb	r3, [r7, #24]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ff6b 	bl	8004d38 <ucg_font_draw_glyph>
 8004e62:	4603      	mov	r3, r0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <task_drawString>:

ucg_draw_string_t ucg_draw_str;

void task_drawString(void *arg)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	6078      	str	r0, [r7, #4]
	ucg_int_t delta = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	81fb      	strh	r3, [r7, #14]
	ucg_t *ucg = (ucg_t *)arg;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60bb      	str	r3, [r7, #8]

	static uint8_t next = 0;
	switch (next)
 8004e7c:	4b45      	ldr	r3, [pc, #276]	; (8004f94 <task_drawString+0x128>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <task_drawString+0x1e>
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d01e      	beq.n	8004ec6 <task_drawString+0x5a>
 8004e88:	e07b      	b.n	8004f82 <task_drawString+0x116>
	{
		case 0:
			if (bufNumItems(&fontQueue) != 0)
 8004e8a:	4843      	ldr	r0, [pc, #268]	; (8004f98 <task_drawString+0x12c>)
 8004e8c:	f000 fb5b 	bl	8005546 <bufNumItems>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <task_drawString+0x3a>
			{
				bufDeDat(&fontQueue, (uint8_t *)&ucg_draw_str);
 8004e96:	4941      	ldr	r1, [pc, #260]	; (8004f9c <task_drawString+0x130>)
 8004e98:	483f      	ldr	r0, [pc, #252]	; (8004f98 <task_drawString+0x12c>)
 8004e9a:	f000 fbef 	bl	800567c <bufDeDat>
				next = 1;
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <task_drawString+0x128>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
					TimerStop(idTaskScanDecodeLen);
					idTaskScanDecodeLen = NO_TIMER;
				}
				next = 0;
			}
			break;
 8004ea4:	e071      	b.n	8004f8a <task_drawString+0x11e>
				if (idTaskScanDecodeLen != NO_TIMER)
 8004ea6:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <task_drawString+0x134>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2bff      	cmp	r3, #255	; 0xff
 8004eac:	d007      	beq.n	8004ebe <task_drawString+0x52>
					TimerStop(idTaskScanDecodeLen);
 8004eae:	4b3c      	ldr	r3, [pc, #240]	; (8004fa0 <task_drawString+0x134>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fd fd1c 	bl	80028f0 <TimerStop>
					idTaskScanDecodeLen = NO_TIMER;
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <task_drawString+0x134>)
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	701a      	strb	r2, [r3, #0]
				next = 0;
 8004ebe:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <task_drawString+0x128>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
			break;
 8004ec4:	e061      	b.n	8004f8a <task_drawString+0x11e>

		case 1:
			if ( *ucg_draw_str.str != '\0' )
 8004ec6:	4b35      	ldr	r3, [pc, #212]	; (8004f9c <task_drawString+0x130>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d054      	beq.n	8004f7a <task_drawString+0x10e>
			{
				delta = ucg_DrawGlyph(ucg, ucg_draw_str.x, ucg_draw_str.y, ucg_draw_str.dir, (uint8_t)*ucg_draw_str.str);
 8004ed0:	4b32      	ldr	r3, [pc, #200]	; (8004f9c <task_drawString+0x130>)
 8004ed2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004ed6:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <task_drawString+0x130>)
 8004ed8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004edc:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <task_drawString+0x130>)
 8004ede:	7918      	ldrb	r0, [r3, #4]
 8004ee0:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <task_drawString+0x130>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	4603      	mov	r3, r0
 8004eea:	68b8      	ldr	r0, [r7, #8]
 8004eec:	f7ff ff66 	bl	8004dbc <ucg_DrawGlyph>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	81fb      	strh	r3, [r7, #14]

				switch (ucg_draw_str.dir)
 8004ef4:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <task_drawString+0x130>)
 8004ef6:	791b      	ldrb	r3, [r3, #4]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d837      	bhi.n	8004f6c <task_drawString+0x100>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <task_drawString+0x98>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f2b 	.word	0x08004f2b
 8004f0c:	08004f41 	.word	0x08004f41
 8004f10:	08004f57 	.word	0x08004f57
				{
					case 0:
						ucg_draw_str.x += delta;
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <task_drawString+0x130>)
 8004f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	89fb      	ldrh	r3, [r7, #14]
 8004f1e:	4413      	add	r3, r2
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	b21a      	sxth	r2, r3
 8004f24:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <task_drawString+0x130>)
 8004f26:	801a      	strh	r2, [r3, #0]
						break;
 8004f28:	e021      	b.n	8004f6e <task_drawString+0x102>

					case 1:
						ucg_draw_str.y += delta;
 8004f2a:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <task_drawString+0x130>)
 8004f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	89fb      	ldrh	r3, [r7, #14]
 8004f34:	4413      	add	r3, r2
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	b21a      	sxth	r2, r3
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <task_drawString+0x130>)
 8004f3c:	805a      	strh	r2, [r3, #2]
						break;
 8004f3e:	e016      	b.n	8004f6e <task_drawString+0x102>

					case 2:
						ucg_draw_str.x -= delta;
 8004f40:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <task_drawString+0x130>)
 8004f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	89fb      	ldrh	r3, [r7, #14]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	b21a      	sxth	r2, r3
 8004f50:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <task_drawString+0x130>)
 8004f52:	801a      	strh	r2, [r3, #0]
						break;
 8004f54:	e00b      	b.n	8004f6e <task_drawString+0x102>

					case 3:
						ucg_draw_str.y -= delta;
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <task_drawString+0x130>)
 8004f58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	89fb      	ldrh	r3, [r7, #14]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	b21a      	sxth	r2, r3
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <task_drawString+0x130>)
 8004f68:	805a      	strh	r2, [r3, #2]
						break;
 8004f6a:	e000      	b.n	8004f6e <task_drawString+0x102>

					default:
						break;
 8004f6c:	bf00      	nop
				}

				ucg_draw_str.str++;
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <task_drawString+0x130>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <task_drawString+0x130>)
 8004f76:	6093      	str	r3, [r2, #8]
			}
			else
			{
				next = 0;
			}
			break;
 8004f78:	e007      	b.n	8004f8a <task_drawString+0x11e>
				next = 0;
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <task_drawString+0x128>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
			break;
 8004f80:	e003      	b.n	8004f8a <task_drawString+0x11e>

		default:
			next = 0;
 8004f82:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <task_drawString+0x128>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
			break;
 8004f88:	bf00      	nop
	}
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	2000143c 	.word	0x2000143c
 8004f98:	20000420 	.word	0x20000420
 8004f9c:	20001430 	.word	0x20001430
 8004fa0:	20000062 	.word	0x20000062

08004fa4 <ucg_DrawString>:

ucg_int_t ucg_DrawString(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, const char *str)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	813b      	strh	r3, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71fb      	strb	r3, [r7, #7]
	ucg_int_t sum = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	83fb      	strh	r3, [r7, #30]
	ucg_draw_string_t drawStr;

	drawStr.x = x;
 8004fc2:	897b      	ldrh	r3, [r7, #10]
 8004fc4:	823b      	strh	r3, [r7, #16]
	drawStr.y = y;
 8004fc6:	893b      	ldrh	r3, [r7, #8]
 8004fc8:	827b      	strh	r3, [r7, #18]
	drawStr.dir = dir;
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	753b      	strb	r3, [r7, #20]
    drawStr.str = (char *)str;
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	61bb      	str	r3, [r7, #24]

	bufEnDat(&fontQueue, (uint8_t *)&drawStr);
 8004fd2:	f107 0310 	add.w	r3, r7, #16
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	480c      	ldr	r0, [pc, #48]	; (800500c <ucg_DrawString+0x68>)
 8004fda:	f000 faff 	bl	80055dc <bufEnDat>

	/* decode glyph */
	if (idTaskScanDecodeLen == NO_TIMER)
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <ucg_DrawString+0x6c>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2bff      	cmp	r3, #255	; 0xff
 8004fe4:	d10b      	bne.n	8004ffe <ucg_DrawString+0x5a>
	{
		idTaskScanDecodeLen = TimerStart("ucg_DrawString", 30, TIMER_REPEAT_FOREVER, task_drawString, ucg);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <ucg_DrawString+0x70>)
 8004fec:	22ff      	movs	r2, #255	; 0xff
 8004fee:	211e      	movs	r1, #30
 8004ff0:	4809      	ldr	r0, [pc, #36]	; (8005018 <ucg_DrawString+0x74>)
 8004ff2:	f7fd fc1b 	bl	800282c <TimerStart>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <ucg_DrawString+0x6c>)
 8004ffc:	701a      	strb	r2, [r3, #0]
	}

	return sum;
 8004ffe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000420 	.word	0x20000420
 8005010:	20000062 	.word	0x20000062
 8005014:	08004e6d 	.word	0x08004e6d
 8005018:	080068a4 	.word	0x080068a4

0800501c <ucg_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void ucg_UpdateRefHeight(ucg_t *ucg)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  if ( ucg->font == NULL )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005028:	2b00      	cmp	r3, #0
 800502a:	d05d      	beq.n	80050e8 <ucg_UpdateRefHeight+0xcc>
    return;
  ucg->font_ref_ascent = ucg->font_info.ascent_A;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  ucg->font_ref_descent = ucg->font_info.descent_g;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
  if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_TEXT )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800504a:	2b00      	cmp	r3, #0
 800504c:	d04d      	beq.n	80050ea <ucg_UpdateRefHeight+0xce>
  {
  }
  else if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_XTEXT )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8005054:	2b01      	cmp	r3, #1
 8005056:	d11c      	bne.n	8005092 <ucg_UpdateRefHeight+0x76>
  {
    if ( ucg->font_ref_ascent < ucg->font_info.ascent_para )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8005064:	429a      	cmp	r2, r3
 8005066:	da05      	bge.n	8005074 <ucg_UpdateRefHeight+0x58>
      ucg->font_ref_ascent = ucg->font_info.ascent_para;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.descent_para )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8005080:	429a      	cmp	r2, r3
 8005082:	dd32      	ble.n	80050ea <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.descent_para;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8005090:	e02b      	b.n	80050ea <ucg_UpdateRefHeight+0xce>
  }
  else
  {
    if ( ucg->font_ref_ascent < ucg->font_info.max_char_height+ucg->font_info.y_offset )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 80050a0:	4619      	mov	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80050a8:	440b      	add	r3, r1
 80050aa:	429a      	cmp	r2, r3
 80050ac:	da0d      	bge.n	80050ca <ucg_UpdateRefHeight+0xae>
      ucg->font_ref_ascent = ucg->font_info.max_char_height+ucg->font_info.y_offset;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	4413      	add	r3, r2
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	b25a      	sxtb	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.y_offset )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80050d6:	429a      	cmp	r2, r3
 80050d8:	dd07      	ble.n	80050ea <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.y_offset;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80050e6:	e000      	b.n	80050ea <ucg_UpdateRefHeight+0xce>
    return;
 80050e8:	bf00      	nop
  }  
}
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <ucg_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

ucg_int_t ucg_font_calc_vref_font(ucg_t *ucg)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  return 0;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <ucg_SetFontPosBaseline>:

void ucg_SetFontPosBaseline(ucg_t *ucg)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  ucg->font_calc_vref = ucg_font_calc_vref_font;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a04      	ldr	r2, [pc, #16]	; (8005128 <ucg_SetFontPosBaseline+0x1c>)
 8005118:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	080050f5 	.word	0x080050f5

0800512c <ucg_SetFont>:
}

/*===============================================*/

void ucg_SetFont(ucg_t *ucg, const ucg_fntpgm_uint8_t  *font)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  if ( ucg->font != font )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d012      	beq.n	8005166 <ucg_SetFont+0x3a>
  {
    ucg->font = font;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	679a      	str	r2, [r3, #120]	; 0x78
    ucg_read_font_info(&(ucg->font_info), font);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3390      	adds	r3, #144	; 0x90
 800514a:	6839      	ldr	r1, [r7, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fac5 	bl	80046dc <ucg_read_font_info>
    ucg_UpdateRefHeight(ucg);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff ff62 	bl	800501c <ucg_UpdateRefHeight>
    //ucg_SetFontPosBaseline(ucg);

    // Init queue font
    bufInit(pQueueFont, &fontQueue, sizeof(ucg_draw_string_t), SIZE_QUEUE_DATA_FONT);
 8005158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515c:	220c      	movs	r2, #12
 800515e:	4904      	ldr	r1, [pc, #16]	; (8005170 <ucg_SetFont+0x44>)
 8005160:	4804      	ldr	r0, [pc, #16]	; (8005174 <ucg_SetFont+0x48>)
 8005162:	f000 f9d5 	bl	8005510 <bufInit>
  }
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000420 	.word	0x20000420
 8005174:	20000430 	.word	0x20000430

08005178 <ucg_init_struct>:
uint8_t global_SREG_backup;		// used by the atomic macros
#endif


void ucg_init_struct(ucg_t *ucg)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  //memset(ucg, 0, sizeof(ucg_t));
  ucg->is_power_up = 0;
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	7813      	ldrb	r3, [r2, #0]
 8005184:	f36f 0300 	bfc	r3, #0, #1
 8005188:	7013      	strb	r3, [r2, #0]
  ucg->rotate_chain_device_cb = 0;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	611a      	str	r2, [r3, #16]
  ucg->arg.scale = 1;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	865a      	strh	r2, [r3, #50]	; 0x32
  //ucg->display_offset.x = 0;
  //ucg->display_offset.y = 0;
  ucg->font = 0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	679a      	str	r2, [r3, #120]	; 0x78
  //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
  ucg->font_decode.is_transparent = 1;  // new font procedures
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  
  ucg->com_initial_change_sent = 0;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  ucg->com_status = 0;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  ucg->com_cfg_cd = 0;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <ucg_Init>:


ucg_int_t ucg_Init(ucg_t *ucg, ucg_dev_fnptr device_cb, ucg_dev_fnptr ext_cb, ucg_com_fnptr com_cb)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  ucg_int_t r;
  ucg_init_struct(ucg);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff ffce 	bl	8005178 <ucg_init_struct>
  if ( ext_cb == (ucg_dev_fnptr)0 )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <ucg_Init+0x22>
    ucg->ext_cb = ucg_ext_none;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <ucg_Init+0x58>)
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	e002      	b.n	80051f0 <ucg_Init+0x28>
 else 
    ucg->ext_cb = ext_cb;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	60da      	str	r2, [r3, #12]
  ucg->device_cb = device_cb;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	609a      	str	r2, [r3, #8]
  ucg->com_cb = com_cb;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	61da      	str	r2, [r3, #28]
  ucg_SetFontPosBaseline(ucg);
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff ff85 	bl	800510c <ucg_SetFontPosBaseline>
  r = ucg_PowerUp(ucg);
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff f98e 	bl	8004524 <ucg_PowerUp>
 8005208:	4603      	mov	r3, r0
 800520a:	82fb      	strh	r3, [r7, #22]
  ucg_GetDimension(ucg);
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7ff f9ce 	bl	80045ae <ucg_GetDimension>
  return r;
 8005212:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	0800417d 	.word	0x0800417d

08005224 <ucg_Draw90Line>:
*/

#include "ucg.h"

void ucg_Draw90Line(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len, ucg_int_t dir, ucg_int_t col_idx)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	4608      	mov	r0, r1
 800522e:	4611      	mov	r1, r2
 8005230:	461a      	mov	r2, r3
 8005232:	4603      	mov	r3, r0
 8005234:	817b      	strh	r3, [r7, #10]
 8005236:	460b      	mov	r3, r1
 8005238:	813b      	strh	r3, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[col_idx].color[0];
 800523e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	440b      	add	r3, r1
 800524c:	333a      	adds	r3, #58	; 0x3a
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[col_idx].color[1];
 8005256:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	440b      	add	r3, r1
 8005264:	333b      	adds	r3, #59	; 0x3b
 8005266:	781a      	ldrb	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[col_idx].color[2];
 800526e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	440b      	add	r3, r1
 800527c:	333c      	adds	r3, #60	; 0x3c
 800527e:	781a      	ldrb	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  ucg->arg.pixel.pos.x = x;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	897a      	ldrh	r2, [r7, #10]
 800528a:	849a      	strh	r2, [r3, #36]	; 0x24
  ucg->arg.pixel.pos.y = y;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	893a      	ldrh	r2, [r7, #8]
 8005290:	84da      	strh	r2, [r3, #38]	; 0x26
  ucg->arg.len = len;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	859a      	strh	r2, [r3, #44]	; 0x2c
  ucg->arg.dir = dir;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8b3a      	ldrh	r2, [r7, #24]
 800529c:	85da      	strh	r2, [r3, #46]	; 0x2e
  ucg_DrawL90FXWithArg(ucg);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff f997 	bl	80045d2 <ucg_DrawL90FXWithArg>
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <ucg_DrawHLine>:

void ucg_DrawHLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 0, 0);
 80052c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80052ce:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80052d2:	2000      	movs	r0, #0
 80052d4:	9001      	str	r0, [sp, #4]
 80052d6:	2000      	movs	r0, #0
 80052d8:	9000      	str	r0, [sp, #0]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f7ff ffa2 	bl	8005224 <ucg_Draw90Line>
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <ucg_SetColor>:
*/

#include "ucg.h"

void ucg_SetColor(ucg_t *ucg, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	70fb      	strb	r3, [r7, #3]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70bb      	strb	r3, [r7, #2]
 80052fe:	4613      	mov	r3, r2
 8005300:	707b      	strb	r3, [r7, #1]
  //ucg->arg.pixel.rgb.color[0] = r;
  //ucg->arg.pixel.rgb.color[1] = g;
  //ucg->arg.pixel.rgb.color[2] = b;
  ucg->arg.rgb[idx].color[0] = r;
 8005302:	78fa      	ldrb	r2, [r7, #3]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	4413      	add	r3, r2
 800530c:	440b      	add	r3, r1
 800530e:	333a      	adds	r3, #58	; 0x3a
 8005310:	78ba      	ldrb	r2, [r7, #2]
 8005312:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[1] = g;
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4413      	add	r3, r2
 800531e:	440b      	add	r3, r1
 8005320:	333b      	adds	r3, #59	; 0x3b
 8005322:	787a      	ldrb	r2, [r7, #1]
 8005324:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[2] = b;
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	440b      	add	r3, r1
 8005332:	333c      	adds	r3, #60	; 0x3c
 8005334:	7c3a      	ldrb	r2, [r7, #16]
 8005336:	701a      	strb	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <ucg_UndoRotate>:
#include "ucg.h"
#include <assert.h>

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_UndoRotate(ucg_t *ucg)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if ( ucg->rotate_chain_device_cb != NULL )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d006      	beq.n	8005362 <ucg_UndoRotate+0x1e>
  {
    ucg->device_cb = ucg->rotate_chain_device_cb;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	609a      	str	r2, [r3, #8]
    ucg->rotate_chain_device_cb = NULL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
  }
  ucg_GetDimension(ucg);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff f923 	bl	80045ae <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff f908 	bl	800457e <ucg_SetMaxClipRange>
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <ucg_rotate_180_xy>:

/*================================================*/
/* 180 degree */

static void ucg_rotate_180_xy(ucg_t *ucg, ucg_xy_t *xy)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
    ucg_int_t x, y;
    y = ucg->rotate_dimension.h;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8adb      	ldrh	r3, [r3, #22]
 8005384:	81fb      	strh	r3, [r7, #14]
    y -= xy->y;
 8005386:	89fa      	ldrh	r2, [r7, #14]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800538e:	b29b      	uxth	r3, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	b29b      	uxth	r3, r3
 8005394:	81fb      	strh	r3, [r7, #14]
    y--;
 8005396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29b      	uxth	r3, r3
 80053a0:	81fb      	strh	r3, [r7, #14]
    xy->y = y;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	89fa      	ldrh	r2, [r7, #14]
 80053a6:	805a      	strh	r2, [r3, #2]
  
    x = ucg->rotate_dimension.w;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8a9b      	ldrh	r3, [r3, #20]
 80053ac:	81bb      	strh	r3, [r7, #12]
    x -= xy->x;
 80053ae:	89ba      	ldrh	r2, [r7, #12]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	81bb      	strh	r3, [r7, #12]
    x--;
 80053be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	81bb      	strh	r3, [r7, #12]
    xy->x = x;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	89ba      	ldrh	r2, [r7, #12]
 80053ce:	801a      	strh	r2, [r3, #0]
  
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <ucg_dev_rotate180>:

ucg_int_t ucg_dev_rotate180(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	460b      	mov	r3, r1
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80053ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80053ee:	3b0c      	subs	r3, #12
 80053f0:	2b0b      	cmp	r3, #11
 80053f2:	d866      	bhi.n	80054c2 <ucg_dev_rotate180+0xe6>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <ucg_dev_rotate180+0x20>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	0800544b 	.word	0x0800544b
 8005400:	080054c3 	.word	0x080054c3
 8005404:	080054c3 	.word	0x080054c3
 8005408:	0800542d 	.word	0x0800542d
 800540c:	080054c3 	.word	0x080054c3
 8005410:	080054c3 	.word	0x080054c3
 8005414:	080054c3 	.word	0x080054c3
 8005418:	080054c3 	.word	0x080054c3
 800541c:	08005493 	.word	0x08005493
 8005420:	08005493 	.word	0x08005493
 8005424:	080054c3 	.word	0x080054c3
 8005428:	08005493 	.word	0x08005493
  {
    case UCG_MSG_GET_DIMENSION:
      ucg->rotate_chain_device_cb(ucg, msg, &(ucg->rotate_dimension)); 
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	3214      	adds	r2, #20
 8005434:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	4798      	blx	r3
      *((ucg_wh_t *)data) = (ucg->rotate_dimension);
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3314      	adds	r3, #20
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	6010      	str	r0, [r2, #0]
      return 1;
 8005446:	2301      	movs	r3, #1
 8005448:	e043      	b.n	80054d2 <ucg_dev_rotate180+0xf6>
    case UCG_MSG_SET_CLIP_BOX:
      /* calculate and rotate lower right point of the clip box */
      ((ucg_box_t * )data)->ul.y += ((ucg_box_t * )data)->size.h-1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005450:	b29a      	uxth	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005458:	b29b      	uxth	r3, r3
 800545a:	4413      	add	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29b      	uxth	r3, r3
 8005462:	b21a      	sxth	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	805a      	strh	r2, [r3, #2]
      ((ucg_box_t * )data)->ul.x += ((ucg_box_t * )data)->size.w-1;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005476:	b29b      	uxth	r3, r3
 8005478:	4413      	add	r3, r2
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29b      	uxth	r3, r3
 8005480:	b21a      	sxth	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	801a      	strh	r2, [r3, #0]
      ucg_rotate_180_xy(ucg, &(((ucg_box_t * )data)->ul)); 
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4619      	mov	r1, r3
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7ff ff73 	bl	8005376 <ucg_rotate_180_xy>
      /* box dimensions are the same */
      break;
 8005490:	e017      	b.n	80054c2 <ucg_dev_rotate180+0xe6>
#ifdef UCG_MSG_DRAW_L90BF
    case UCG_MSG_DRAW_L90BF:
#endif /* UCG_MSG_DRAW_L90BF */
    case UCG_MSG_DRAW_L90SE:
    //case UCG_MSG_DRAW_L90RL:
      ucg->arg.dir+=2;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005498:	b29b      	uxth	r3, r3
 800549a:	3302      	adds	r3, #2
 800549c:	b29b      	uxth	r3, r3
 800549e:	b21a      	sxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg->arg.dir&=3;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	b21a      	sxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg_rotate_180_xy(ucg, &(ucg->arg.pixel.pos)); 
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3324      	adds	r3, #36	; 0x24
 80054b8:	4619      	mov	r1, r3
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff ff5b 	bl	8005376 <ucg_rotate_180_xy>
      break;
 80054c0:	bf00      	nop
  }
  return ucg->rotate_chain_device_cb(ucg, msg, data);  
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	4798      	blx	r3
 80054d0:	4603      	mov	r3, r0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop

080054dc <ucg_SetRotate180>:

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_SetRotate180(ucg_t *ucg)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  ucg_UndoRotate(ucg);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ff2d 	bl	8005344 <ucg_UndoRotate>
  ucg->rotate_chain_device_cb = ucg->device_cb;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	611a      	str	r2, [r3, #16]
  ucg->device_cb = ucg_dev_rotate180;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a05      	ldr	r2, [pc, #20]	; (800550c <ucg_SetRotate180+0x30>)
 80054f6:	609a      	str	r2, [r3, #8]
  ucg_GetDimension(ucg);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff f858 	bl	80045ae <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff f83d 	bl	800457e <ucg_SetMaxClipRange>
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	080053dd 	.word	0x080053dd

08005510 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	460b      	mov	r3, r1
 8005520:	71fb      	strb	r3, [r7, #7]
 8005522:	4613      	mov	r3, r2
 8005524:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	88ba      	ldrh	r2, [r7, #4]
 800552a:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	79fa      	ldrb	r2, [r7, #7]
 8005530:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8005538:	68b8      	ldr	r0, [r7, #8]
 800553a:	f000 f836 	bl	80055aa <bufFlush>
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	885b      	ldrh	r3, [r3, #2]
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	885a      	ldrh	r2, [r3, #2]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	bf2c      	ite	cs
 8005572:	2301      	movcs	r3, #1
 8005574:	2300      	movcc	r3, #0
 8005576:	b2db      	uxtb	r3, r3
}
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	88da      	ldrh	r2, [r3, #6]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	891b      	ldrh	r3, [r3, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68d8      	ldr	r0, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	2100      	movs	r1, #0
 80055d0:	f000 f899 	bl	8005706 <memsetl>
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80055e6:	b672      	cpsid	i
}
 80055e8:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
 80055ee:	e021      	b.n	8005634 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	88c9      	ldrh	r1, [r1, #6]
 80055fe:	440b      	add	r3, r1
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	88db      	ldrh	r3, [r3, #6]
 8005608:	3301      	adds	r3, #1
 800560a:	b29b      	uxth	r3, r3
 800560c:	b21a      	sxth	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	3b01      	subs	r3, #1
 8005614:	b29b      	uxth	r3, r3
 8005616:	b21b      	sxth	r3, r3
 8005618:	4013      	ands	r3, r2
 800561a:	b21b      	sxth	r3, r3
 800561c:	b29a      	uxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	885b      	ldrh	r3, [r3, #2]
 8005626:	3301      	adds	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	3301      	adds	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	791b      	ldrb	r3, [r3, #4]
 8005638:	7bfa      	ldrb	r2, [r7, #15]
 800563a:	429a      	cmp	r2, r3
 800563c:	d3d8      	bcc.n	80055f0 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ff8d 	bl	800555e <bufIsFull>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d011      	beq.n	800566e <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	891a      	ldrh	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	791b      	ldrb	r3, [r3, #4]
 8005652:	b29b      	uxth	r3, r3
 8005654:	4413      	add	r3, r2
 8005656:	b29b      	uxth	r3, r3
 8005658:	b21a      	sxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	3b01      	subs	r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	b21b      	sxth	r3, r3
 8005664:	4013      	ands	r3, r2
 8005666:	b21b      	sxth	r3, r3
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800566e:	b662      	cpsie	i
}
 8005670:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005686:	b672      	cpsid	i
}
 8005688:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ff7a 	bl	8005584 <bufIsEmpty>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800569c:	b662      	cpsie	i
}
 800569e:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 80056a0:	2302      	movs	r3, #2
 80056a2:	e02c      	b.n	80056fe <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]
 80056a8:	e021      	b.n	80056ee <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	8912      	ldrh	r2, [r2, #8]
 80056b2:	441a      	add	r2, r3
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	440b      	add	r3, r1
 80056ba:	7812      	ldrb	r2, [r2, #0]
 80056bc:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	891b      	ldrh	r3, [r3, #8]
 80056c2:	3301      	adds	r3, #1
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	b21a      	sxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	b21b      	sxth	r3, r3
 80056d2:	4013      	ands	r3, r2
 80056d4:	b21b      	sxth	r3, r3
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	885b      	ldrh	r3, [r3, #2]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	3301      	adds	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	791b      	ldrb	r3, [r3, #4]
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d3d8      	bcc.n	80056aa <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80056f8:	b662      	cpsie	i
}
 80056fa:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	70fb      	strb	r3, [r7, #3]
 8005712:	4613      	mov	r3, r2
 8005714:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8005716:	e004      	b.n	8005722 <memsetl+0x1c>
        *dst++ = value;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8005722:	883b      	ldrh	r3, [r7, #0]
 8005724:	1e5a      	subs	r2, r3, #1
 8005726:	803a      	strh	r2, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f5      	bne.n	8005718 <memsetl+0x12>
    }    
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <AppInitCommon>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void AppInitCommon()
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8005740:	f7fa fdd4 	bl	80002ec <SystemCoreClockUpdate>
	TimerInit();
 8005744:	f7fd f850 	bl	80027e8 <TimerInit>
	EventButton_Init();
 8005748:	f7fc fba2 	bl	8001e90 <EventButton_Init>
	BuzzerControl_Init();
 800574c:	f7fc fc72 	bl	8002034 <BuzzerControl_Init>
	LedControl_Init();
 8005750:	f7fc fdbc 	bl	80022cc <LedControl_Init>
	LightSensor_Init(ADC_READ_MODE_DMA);
 8005754:	2000      	movs	r0, #0
 8005756:	f7fd fa19 	bl	8002b8c <LightSensor_Init>
	TemHumSensor_Init();
 800575a:	f7fd fad3 	bl	8002d04 <TemHumSensor_Init>

	EventSchedulerInit(AppStateManager);
 800575e:	4802      	ldr	r0, [pc, #8]	; (8005768 <AppInitCommon+0x2c>)
 8005760:	f7fc ffa8 	bl	80026b4 <EventSchedulerInit>

}
 8005764:	bf00      	nop
 8005766:	bd80      	pop	{r7, pc}
 8005768:	0800576d 	.word	0x0800576d

0800576c <AppStateManager>:

static void AppStateManager(uint8_t event)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
	switch(GetStateApp())
 8005776:	f000 f831 	bl	80057dc <GetStateApp>
 800577a:	4603      	mov	r3, r0
 800577c:	2b02      	cmp	r3, #2
 800577e:	d014      	beq.n	80057aa <AppStateManager+0x3e>
 8005780:	2b02      	cmp	r3, #2
 8005782:	dc14      	bgt.n	80057ae <AppStateManager+0x42>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <AppStateManager+0x22>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d009      	beq.n	80057a0 <AppStateManager+0x34>

	case STATE_APP_RESET:
		break;

	default:
		break;
 800578c:	e00f      	b.n	80057ae <AppStateManager+0x42>
		if(event == EVENT_APP_INIT)
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d10e      	bne.n	80057b2 <AppStateManager+0x46>
			LoadConfiguration();
 8005794:	f000 f82e 	bl	80057f4 <LoadConfiguration>
			SetStateApp(STATE_APP_IDLE);
 8005798:	2001      	movs	r0, #1
 800579a:	f000 f80f 	bl	80057bc <SetStateApp>
		break;
 800579e:	e008      	b.n	80057b2 <AppStateManager+0x46>
		DeviceStateMachine(event);
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f88a 	bl	80058bc <DeviceStateMachine>
		break;
 80057a8:	e004      	b.n	80057b4 <AppStateManager+0x48>
		break;
 80057aa:	bf00      	nop
 80057ac:	e002      	b.n	80057b4 <AppStateManager+0x48>
		break;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <AppStateManager+0x48>
		break;
 80057b2:	bf00      	nop
	}
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <SetStateApp>:

static void SetStateApp(state_app_t state)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
	eCurrentState = state;
 80057c6:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <SetStateApp+0x1c>)
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	7013      	strb	r3, [r2, #0]
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	200014f4 	.word	0x200014f4

080057dc <GetStateApp>:

static state_app_t GetStateApp(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	return eCurrentState;
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <GetStateApp+0x14>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	200014f4 	.word	0x200014f4

080057f4 <LoadConfiguration>:
/*hàm cho câu 1: hiển thị dòng chữ lên LCD*/
void LoadConfiguration(void){
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af02      	add	r7, sp, #8

	//hỏi anh trung tại sao config LCD trên appInitCommon ko đc

	/*************		setup LCD		****************/
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 80057fa:	2100      	movs	r1, #0
 80057fc:	4817      	ldr	r0, [pc, #92]	; (800585c <LoadConfiguration+0x68>)
 80057fe:	f7fd fe1b 	bl	8003438 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 8005802:	4816      	ldr	r0, [pc, #88]	; (800585c <LoadConfiguration+0x68>)
 8005804:	f7fd fe60 	bl	80034c8 <ucg_ClearScreen>

	ucg_SetFont(&ucg, ucg_font_helvR08_tf);
 8005808:	4915      	ldr	r1, [pc, #84]	; (8005860 <LoadConfiguration+0x6c>)
 800580a:	4814      	ldr	r0, [pc, #80]	; (800585c <LoadConfiguration+0x68>)
 800580c:	f7ff fc8e 	bl	800512c <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 8005810:	23ff      	movs	r3, #255	; 0xff
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	23ff      	movs	r3, #255	; 0xff
 8005816:	22ff      	movs	r2, #255	; 0xff
 8005818:	2100      	movs	r1, #0
 800581a:	4810      	ldr	r0, [pc, #64]	; (800585c <LoadConfiguration+0x68>)
 800581c:	f7ff fd64 	bl	80052e8 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 8005820:	2300      	movs	r3, #0
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	2300      	movs	r3, #0
 8005826:	2200      	movs	r2, #0
 8005828:	2101      	movs	r1, #1
 800582a:	480c      	ldr	r0, [pc, #48]	; (800585c <LoadConfiguration+0x68>)
 800582c:	f7ff fd5c 	bl	80052e8 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8005830:	480a      	ldr	r0, [pc, #40]	; (800585c <LoadConfiguration+0x68>)
 8005832:	f7ff fe53 	bl	80054dc <ucg_SetRotate180>
	ucg_DrawString(&ucg, 5, 12, 0, "IOT Programming");
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <LoadConfiguration+0x70>)
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	220c      	movs	r2, #12
 800583e:	2105      	movs	r1, #5
 8005840:	4806      	ldr	r0, [pc, #24]	; (800585c <LoadConfiguration+0x68>)
 8005842:	f7ff fbaf 	bl	8004fa4 <ucg_DrawString>
	ucg_DrawString(&ucg, 5, 26, 0, "by Lumi Smarthome");
 8005846:	4b08      	ldr	r3, [pc, #32]	; (8005868 <LoadConfiguration+0x74>)
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	2300      	movs	r3, #0
 800584c:	221a      	movs	r2, #26
 800584e:	2105      	movs	r1, #5
 8005850:	4802      	ldr	r0, [pc, #8]	; (800585c <LoadConfiguration+0x68>)
 8005852:	f7ff fba7 	bl	8004fa4 <ucg_DrawString>
}
 8005856:	bf00      	nop
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20001440 	.word	0x20001440
 8005860:	08006ab4 	.word	0x08006ab4
 8005864:	080068b4 	.word	0x080068b4
 8005868:	080068c4 	.word	0x080068c4

0800586c <blinkLed>:


static uint8_t count = 0;
static uint8_t brightness = 0;
void blinkLed(void *data) { //hàm nháy led sau 5 lần nhấn B3 trên board
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
    if (count < 10) { //cứ 2 giá trị của count là 1 lần bật&tắt
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <blinkLed+0x48>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b09      	cmp	r3, #9
 800587a:	d816      	bhi.n	80058aa <blinkLed+0x3e>
        if (brightness == 0) {
 800587c:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <blinkLed+0x4c>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <blinkLed+0x20>
            brightness = 50;
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <blinkLed+0x4c>)
 8005886:	2232      	movs	r2, #50	; 0x32
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e002      	b.n	8005892 <blinkLed+0x26>
        } else {
            brightness = 0;
 800588c:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <blinkLed+0x4c>)
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
        }

        // Bật/tắt LED với độ sáng mới
        LedControl_SetAllColor(LED_COLOR_GREEN, brightness);
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <blinkLed+0x4c>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	4619      	mov	r1, r3
 8005898:	2001      	movs	r0, #1
 800589a:	f7fc fe2f 	bl	80024fc <LedControl_SetAllColor>
        count++;
 800589e:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <blinkLed+0x48>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <blinkLed+0x48>)
 80058a8:	701a      	strb	r2, [r3, #0]
    }
}
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200014f7 	.word	0x200014f7
 80058b8:	200014f8 	.word	0x200014f8

080058bc <DeviceStateMachine>:


void DeviceStateMachine(uint8_t event)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	4603      	mov	r3, r0
 80058c4:	71fb      	strb	r3, [r7, #7]
	switch(event)
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	2b3a      	cmp	r3, #58	; 0x3a
 80058cc:	f200 819e 	bhi.w	8005c0c <DeviceStateMachine+0x350>
 80058d0:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <DeviceStateMachine+0x1c>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	08005aa5 	.word	0x08005aa5
 80058dc:	08005ad9 	.word	0x08005ad9
 80058e0:	08005c0d 	.word	0x08005c0d
 80058e4:	08005b0d 	.word	0x08005b0d
 80058e8:	08005b41 	.word	0x08005b41
 80058ec:	08005c0d 	.word	0x08005c0d
 80058f0:	08005c0d 	.word	0x08005c0d
 80058f4:	08005c0d 	.word	0x08005c0d
 80058f8:	08005c0d 	.word	0x08005c0d
 80058fc:	08005c0d 	.word	0x08005c0d
 8005900:	08005c0d 	.word	0x08005c0d
 8005904:	08005c0d 	.word	0x08005c0d
 8005908:	08005c0d 	.word	0x08005c0d
 800590c:	08005c0d 	.word	0x08005c0d
 8005910:	08005c0d 	.word	0x08005c0d
 8005914:	08005c0d 	.word	0x08005c0d
 8005918:	08005c0d 	.word	0x08005c0d
 800591c:	08005c0d 	.word	0x08005c0d
 8005920:	08005c0d 	.word	0x08005c0d
 8005924:	08005c0d 	.word	0x08005c0d
 8005928:	08005c0d 	.word	0x08005c0d
 800592c:	08005c0d 	.word	0x08005c0d
 8005930:	08005c0d 	.word	0x08005c0d
 8005934:	080059c5 	.word	0x080059c5
 8005938:	08005c0d 	.word	0x08005c0d
 800593c:	08005c0d 	.word	0x08005c0d
 8005940:	08005c0d 	.word	0x08005c0d
 8005944:	08005c0d 	.word	0x08005c0d
 8005948:	08005c0d 	.word	0x08005c0d
 800594c:	08005c0d 	.word	0x08005c0d
 8005950:	08005b75 	.word	0x08005b75
 8005954:	08005c0d 	.word	0x08005c0d
 8005958:	08005c0d 	.word	0x08005c0d
 800595c:	08005c0d 	.word	0x08005c0d
 8005960:	08005ba7 	.word	0x08005ba7
 8005964:	08005c0d 	.word	0x08005c0d
 8005968:	08005c0d 	.word	0x08005c0d
 800596c:	08005c0d 	.word	0x08005c0d
 8005970:	08005c0d 	.word	0x08005c0d
 8005974:	08005c0d 	.word	0x08005c0d
 8005978:	08005c0d 	.word	0x08005c0d
 800597c:	08005c0d 	.word	0x08005c0d
 8005980:	08005c0d 	.word	0x08005c0d
 8005984:	08005c0d 	.word	0x08005c0d
 8005988:	08005c0d 	.word	0x08005c0d
 800598c:	08005c0d 	.word	0x08005c0d
 8005990:	08005c0d 	.word	0x08005c0d
 8005994:	08005c0d 	.word	0x08005c0d
 8005998:	08005c0d 	.word	0x08005c0d
 800599c:	08005c0d 	.word	0x08005c0d
 80059a0:	08005c0d 	.word	0x08005c0d
 80059a4:	08005c0d 	.word	0x08005c0d
 80059a8:	08005c0d 	.word	0x08005c0d
 80059ac:	08005c0d 	.word	0x08005c0d
 80059b0:	08005bd9 	.word	0x08005bd9
 80059b4:	08005c0d 	.word	0x08005c0d
 80059b8:	08005c0d 	.word	0x08005c0d
 80059bc:	08005c0d 	.word	0x08005c0d
 80059c0:	08005bf3 	.word	0x08005bf3
	/*hàm cho câu 2: Nhấn nút B3 năm lần khi đó tất cả các Led trên Kit
	mở rộng sẽ nháy năm lần màu GREEN với cường độ sáng là 50% và hiển
	thị thông tin sau thiết bị lên màn hình LCD*/
		case EVENT_OF_BUTTON_0_PRESS_5_TIMES:
		{
			if(IdTimer != NO_TIMER)
 80059c4:	4b96      	ldr	r3, [pc, #600]	; (8005c20 <DeviceStateMachine+0x364>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2bff      	cmp	r3, #255	; 0xff
 80059ca:	d007      	beq.n	80059dc <DeviceStateMachine+0x120>
			{
				TimerStop(IdTimer);
 80059cc:	4b94      	ldr	r3, [pc, #592]	; (8005c20 <DeviceStateMachine+0x364>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fc ff8d 	bl	80028f0 <TimerStop>
				IdTimer = NO_TIMER;
 80059d6:	4b92      	ldr	r3, [pc, #584]	; (8005c20 <DeviceStateMachine+0x364>)
 80059d8:	22ff      	movs	r2, #255	; 0xff
 80059da:	701a      	strb	r2, [r3, #0]
			}
			count = 0;
 80059dc:	4b91      	ldr	r3, [pc, #580]	; (8005c24 <DeviceStateMachine+0x368>)
 80059de:	2200      	movs	r2, #0
 80059e0:	701a      	strb	r2, [r3, #0]
			IdTimer = TimerStart("BlinkTimer", 500, 10,(void*) blinkLed, NULL);
 80059e2:	2300      	movs	r3, #0
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	4b90      	ldr	r3, [pc, #576]	; (8005c28 <DeviceStateMachine+0x36c>)
 80059e8:	220a      	movs	r2, #10
 80059ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80059ee:	488f      	ldr	r0, [pc, #572]	; (8005c2c <DeviceStateMachine+0x370>)
 80059f0:	f7fc ff1c 	bl	800282c <TimerStart>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	4b89      	ldr	r3, [pc, #548]	; (8005c20 <DeviceStateMachine+0x364>)
 80059fa:	701a      	strb	r2, [r3, #0]

			ucg_ClearScreen(&ucg);
 80059fc:	488c      	ldr	r0, [pc, #560]	; (8005c30 <DeviceStateMachine+0x374>)
 80059fe:	f7fd fd63 	bl	80034c8 <ucg_ClearScreen>
			ucg_DrawString(&ucg, 0, 12, 0, "DEVICE: Board STM32");
 8005a02:	4b8c      	ldr	r3, [pc, #560]	; (8005c34 <DeviceStateMachine+0x378>)
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	220c      	movs	r2, #12
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4888      	ldr	r0, [pc, #544]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a0e:	f7ff fac9 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 24, 0, "Nucleo");
 8005a12:	4b89      	ldr	r3, [pc, #548]	; (8005c38 <DeviceStateMachine+0x37c>)
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	2300      	movs	r3, #0
 8005a18:	2218      	movs	r2, #24
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4884      	ldr	r0, [pc, #528]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a1e:	f7ff fac1 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 36, 0, "CODE: ");
 8005a22:	4b86      	ldr	r3, [pc, #536]	; (8005c3c <DeviceStateMachine+0x380>)
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	2224      	movs	r2, #36	; 0x24
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4880      	ldr	r0, [pc, #512]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a2e:	f7ff fab9 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 48, 0, "STM32F401RE_NUCLEO");
 8005a32:	4b83      	ldr	r3, [pc, #524]	; (8005c40 <DeviceStateMachine+0x384>)
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	2300      	movs	r3, #0
 8005a38:	2230      	movs	r2, #48	; 0x30
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	487c      	ldr	r0, [pc, #496]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a3e:	f7ff fab1 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 60, 0, "MANUFACTURER: ");
 8005a42:	4b80      	ldr	r3, [pc, #512]	; (8005c44 <DeviceStateMachine+0x388>)
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	2300      	movs	r3, #0
 8005a48:	223c      	movs	r2, #60	; 0x3c
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4878      	ldr	r0, [pc, #480]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a4e:	f7ff faa9 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 72, 0, "STMicroelectronics");
 8005a52:	4b7d      	ldr	r3, [pc, #500]	; (8005c48 <DeviceStateMachine+0x38c>)
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	2300      	movs	r3, #0
 8005a58:	2248      	movs	r2, #72	; 0x48
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	4874      	ldr	r0, [pc, #464]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a5e:	f7ff faa1 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 84, 0, "KIT EXPANSION: ");
 8005a62:	4b7a      	ldr	r3, [pc, #488]	; (8005c4c <DeviceStateMachine+0x390>)
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2300      	movs	r3, #0
 8005a68:	2254      	movs	r2, #84	; 0x54
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4870      	ldr	r0, [pc, #448]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a6e:	f7ff fa99 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 96, 0, "Lumi Smarthome");
 8005a72:	4b77      	ldr	r3, [pc, #476]	; (8005c50 <DeviceStateMachine+0x394>)
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	2300      	movs	r3, #0
 8005a78:	2260      	movs	r2, #96	; 0x60
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	486c      	ldr	r0, [pc, #432]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a7e:	f7ff fa91 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 108, 0, "PROJECT: ");
 8005a82:	4b74      	ldr	r3, [pc, #464]	; (8005c54 <DeviceStateMachine+0x398>)
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	226c      	movs	r2, #108	; 0x6c
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4868      	ldr	r0, [pc, #416]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a8e:	f7ff fa89 	bl	8004fa4 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 120, 0, "Simulator touch switch");
 8005a92:	4b71      	ldr	r3, [pc, #452]	; (8005c58 <DeviceStateMachine+0x39c>)
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	2278      	movs	r2, #120	; 0x78
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4864      	ldr	r0, [pc, #400]	; (8005c30 <DeviceStateMachine+0x374>)
 8005a9e:	f7ff fa81 	bl	8004fa4 <ucg_DrawString>

		}	break;
 8005aa2:	e0b8      	b.n	8005c16 <DeviceStateMachine+0x35a>


		static uint8_t button1count = 0;
		case EVENT_OF_BUTTON_1_PRESS_LOGIC:
		{
			if(button1count == 0)
 8005aa4:	4b6d      	ldr	r3, [pc, #436]	; (8005c5c <DeviceStateMachine+0x3a0>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <DeviceStateMachine+0x206>
			{
				LedControl_SetAllColor(LED_COLOR_RED, 50);
 8005aac:	2132      	movs	r1, #50	; 0x32
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f7fc fd24 	bl	80024fc <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005ab4:	486a      	ldr	r0, [pc, #424]	; (8005c60 <DeviceStateMachine+0x3a4>)
 8005ab6:	f7fc fb4d 	bl	8002154 <BuzzerControl_SetMelody>
				button1count = 1;
 8005aba:	4b68      	ldr	r3, [pc, #416]	; (8005c5c <DeviceStateMachine+0x3a0>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	701a      	strb	r2, [r3, #0]
				LedControl_SetAllColor(LED_COLOR_RED, 0);
				BuzzerControl_SetMelody(pbeep);
				button1count = 0;
			}

		}	break;
 8005ac0:	e0a9      	b.n	8005c16 <DeviceStateMachine+0x35a>
				LedControl_SetAllColor(LED_COLOR_RED, 0);
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f7fc fd19 	bl	80024fc <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005aca:	4865      	ldr	r0, [pc, #404]	; (8005c60 <DeviceStateMachine+0x3a4>)
 8005acc:	f7fc fb42 	bl	8002154 <BuzzerControl_SetMelody>
				button1count = 0;
 8005ad0:	4b62      	ldr	r3, [pc, #392]	; (8005c5c <DeviceStateMachine+0x3a0>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
		}	break;
 8005ad6:	e09e      	b.n	8005c16 <DeviceStateMachine+0x35a>


		static uint8_t button2count = 0;
		case EVENT_OF_BUTTON_2_PRESS_LOGIC:
		{
			if(button2count == 0)
 8005ad8:	4b62      	ldr	r3, [pc, #392]	; (8005c64 <DeviceStateMachine+0x3a8>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <DeviceStateMachine+0x23a>
			{
				LedControl_SetAllColor(LED_COLOR_GREEN, 50);
 8005ae0:	2132      	movs	r1, #50	; 0x32
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	f7fc fd0a 	bl	80024fc <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005ae8:	485d      	ldr	r0, [pc, #372]	; (8005c60 <DeviceStateMachine+0x3a4>)
 8005aea:	f7fc fb33 	bl	8002154 <BuzzerControl_SetMelody>
				button2count = 1;
 8005aee:	4b5d      	ldr	r3, [pc, #372]	; (8005c64 <DeviceStateMachine+0x3a8>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
			}else{
				LedControl_SetAllColor(LED_COLOR_GREEN, 0);
				BuzzerControl_SetMelody(pbeep);
				button2count = 0;
			}
		}	break;
 8005af4:	e08f      	b.n	8005c16 <DeviceStateMachine+0x35a>
				LedControl_SetAllColor(LED_COLOR_GREEN, 0);
 8005af6:	2100      	movs	r1, #0
 8005af8:	2001      	movs	r0, #1
 8005afa:	f7fc fcff 	bl	80024fc <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005afe:	4858      	ldr	r0, [pc, #352]	; (8005c60 <DeviceStateMachine+0x3a4>)
 8005b00:	f7fc fb28 	bl	8002154 <BuzzerControl_SetMelody>
				button2count = 0;
 8005b04:	4b57      	ldr	r3, [pc, #348]	; (8005c64 <DeviceStateMachine+0x3a8>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
		}	break;
 8005b0a:	e084      	b.n	8005c16 <DeviceStateMachine+0x35a>

		static uint8_t button4count = 0;
		case EVENT_OF_BUTTON_4_PRESS_LOGIC:
		{
			if(button4count == 0)
 8005b0c:	4b56      	ldr	r3, [pc, #344]	; (8005c68 <DeviceStateMachine+0x3ac>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <DeviceStateMachine+0x26e>
			{
				LedControl_SetAllColor(LED_COLOR_WHITE, 50);
 8005b14:	2132      	movs	r1, #50	; 0x32
 8005b16:	2003      	movs	r0, #3
 8005b18:	f7fc fcf0 	bl	80024fc <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005b1c:	4850      	ldr	r0, [pc, #320]	; (8005c60 <DeviceStateMachine+0x3a4>)
 8005b1e:	f7fc fb19 	bl	8002154 <BuzzerControl_SetMelody>
				button4count = 1;
 8005b22:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <DeviceStateMachine+0x3ac>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	701a      	strb	r2, [r3, #0]
			}else{
				LedControl_SetAllColor(LED_COLOR_WHITE, 0);
				BuzzerControl_SetMelody(pbeep);
				button4count = 0;
			}
		}	break;
 8005b28:	e075      	b.n	8005c16 <DeviceStateMachine+0x35a>
				LedControl_SetAllColor(LED_COLOR_WHITE, 0);
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	2003      	movs	r0, #3
 8005b2e:	f7fc fce5 	bl	80024fc <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005b32:	484b      	ldr	r0, [pc, #300]	; (8005c60 <DeviceStateMachine+0x3a4>)
 8005b34:	f7fc fb0e 	bl	8002154 <BuzzerControl_SetMelody>
				button4count = 0;
 8005b38:	4b4b      	ldr	r3, [pc, #300]	; (8005c68 <DeviceStateMachine+0x3ac>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
		}	break;
 8005b3e:	e06a      	b.n	8005c16 <DeviceStateMachine+0x35a>


		static uint8_t button5count = 0;
		case EVENT_OF_BUTTON_5_PRESS_LOGIC:
		{
			if(button5count == 0)
 8005b40:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <DeviceStateMachine+0x3b0>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <DeviceStateMachine+0x2a2>
			{
				LedControl_SetAllColor(LED_COLOR_BLUE, 50);
 8005b48:	2132      	movs	r1, #50	; 0x32
 8005b4a:	2002      	movs	r0, #2
 8005b4c:	f7fc fcd6 	bl	80024fc <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005b50:	4843      	ldr	r0, [pc, #268]	; (8005c60 <DeviceStateMachine+0x3a4>)
 8005b52:	f7fc faff 	bl	8002154 <BuzzerControl_SetMelody>
				button5count = 1;
 8005b56:	4b45      	ldr	r3, [pc, #276]	; (8005c6c <DeviceStateMachine+0x3b0>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
			}else{
				LedControl_SetAllColor(LED_COLOR_BLUE, 0);
				BuzzerControl_SetMelody(pbeep);
				button5count = 0;
			}
		}	break;
 8005b5c:	e05b      	b.n	8005c16 <DeviceStateMachine+0x35a>
				LedControl_SetAllColor(LED_COLOR_BLUE, 0);
 8005b5e:	2100      	movs	r1, #0
 8005b60:	2002      	movs	r0, #2
 8005b62:	f7fc fccb 	bl	80024fc <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005b66:	483e      	ldr	r0, [pc, #248]	; (8005c60 <DeviceStateMachine+0x3a4>)
 8005b68:	f7fc faf4 	bl	8002154 <BuzzerControl_SetMelody>
				button5count = 0;
 8005b6c:	4b3f      	ldr	r3, [pc, #252]	; (8005c6c <DeviceStateMachine+0x3b0>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
		}	break;
 8005b72:	e050      	b.n	8005c16 <DeviceStateMachine+0x35a>



		case EVENT_OF_BUTTON_1_HOLD_1S:
		{
			if(IdTimer != NO_TIMER)
 8005b74:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <DeviceStateMachine+0x364>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2bff      	cmp	r3, #255	; 0xff
 8005b7a:	d007      	beq.n	8005b8c <DeviceStateMachine+0x2d0>
			{
				TimerStop(IdTimer);
 8005b7c:	4b28      	ldr	r3, [pc, #160]	; (8005c20 <DeviceStateMachine+0x364>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fc feb5 	bl	80028f0 <TimerStop>
				IdTimer = NO_TIMER;
 8005b86:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <DeviceStateMachine+0x364>)
 8005b88:	22ff      	movs	r2, #255	; 0xff
 8005b8a:	701a      	strb	r2, [r3, #0]
			}

			IdTimer = TimerStart("LedUp", 50, TIMER_REPEAT_FOREVER, (void*)LedUp, NULL);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	4b37      	ldr	r3, [pc, #220]	; (8005c70 <DeviceStateMachine+0x3b4>)
 8005b92:	22ff      	movs	r2, #255	; 0xff
 8005b94:	2132      	movs	r1, #50	; 0x32
 8005b96:	4837      	ldr	r0, [pc, #220]	; (8005c74 <DeviceStateMachine+0x3b8>)
 8005b98:	f7fc fe48 	bl	800282c <TimerStart>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <DeviceStateMachine+0x364>)
 8005ba2:	701a      	strb	r2, [r3, #0]
		}	break;
 8005ba4:	e037      	b.n	8005c16 <DeviceStateMachine+0x35a>


		case EVENT_OF_BUTTON_5_HOLD_1S:
		{
			if(IdTimer != NO_TIMER)
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <DeviceStateMachine+0x364>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2bff      	cmp	r3, #255	; 0xff
 8005bac:	d007      	beq.n	8005bbe <DeviceStateMachine+0x302>
			{
				TimerStop(IdTimer);
 8005bae:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <DeviceStateMachine+0x364>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fc fe9c 	bl	80028f0 <TimerStop>
				IdTimer = NO_TIMER;
 8005bb8:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <DeviceStateMachine+0x364>)
 8005bba:	22ff      	movs	r2, #255	; 0xff
 8005bbc:	701a      	strb	r2, [r3, #0]
			}

			IdTimer = TimerStart("LedDown", 50, TIMER_REPEAT_FOREVER, (void*)LedDown, NULL);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4b2d      	ldr	r3, [pc, #180]	; (8005c78 <DeviceStateMachine+0x3bc>)
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	2132      	movs	r1, #50	; 0x32
 8005bc8:	482c      	ldr	r0, [pc, #176]	; (8005c7c <DeviceStateMachine+0x3c0>)
 8005bca:	f7fc fe2f 	bl	800282c <TimerStart>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <DeviceStateMachine+0x364>)
 8005bd4:	701a      	strb	r2, [r3, #0]
		}	break;
 8005bd6:	e01e      	b.n	8005c16 <DeviceStateMachine+0x35a>


		case EVENT_OF_BUTTON_1_RELEASED_1S:
		{
			if(IdTimer != NO_TIMER)
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <DeviceStateMachine+0x364>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2bff      	cmp	r3, #255	; 0xff
 8005bde:	d017      	beq.n	8005c10 <DeviceStateMachine+0x354>
			{
				TimerStop(IdTimer);
 8005be0:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <DeviceStateMachine+0x364>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fc fe83 	bl	80028f0 <TimerStop>
				IdTimer = NO_TIMER;
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <DeviceStateMachine+0x364>)
 8005bec:	22ff      	movs	r2, #255	; 0xff
 8005bee:	701a      	strb	r2, [r3, #0]
			}
		} break;
 8005bf0:	e00e      	b.n	8005c10 <DeviceStateMachine+0x354>


		case EVENT_OF_BUTTON_5_RELEASED_1S:
		{
			if(IdTimer != NO_TIMER)
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <DeviceStateMachine+0x364>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2bff      	cmp	r3, #255	; 0xff
 8005bf8:	d00c      	beq.n	8005c14 <DeviceStateMachine+0x358>
			{
				TimerStop(IdTimer);
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <DeviceStateMachine+0x364>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fc fe76 	bl	80028f0 <TimerStop>
				IdTimer = NO_TIMER;
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <DeviceStateMachine+0x364>)
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	701a      	strb	r2, [r3, #0]
			}
		} break;
 8005c0a:	e003      	b.n	8005c14 <DeviceStateMachine+0x358>


		default:
			break;
 8005c0c:	bf00      	nop
 8005c0e:	e002      	b.n	8005c16 <DeviceStateMachine+0x35a>
		} break;
 8005c10:	bf00      	nop
 8005c12:	e000      	b.n	8005c16 <DeviceStateMachine+0x35a>
		} break;
 8005c14:	bf00      	nop
	}
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000063 	.word	0x20000063
 8005c24:	200014f7 	.word	0x200014f7
 8005c28:	0800586d 	.word	0x0800586d
 8005c2c:	080068d8 	.word	0x080068d8
 8005c30:	20001440 	.word	0x20001440
 8005c34:	080068e4 	.word	0x080068e4
 8005c38:	080068f8 	.word	0x080068f8
 8005c3c:	08006900 	.word	0x08006900
 8005c40:	08006908 	.word	0x08006908
 8005c44:	0800691c 	.word	0x0800691c
 8005c48:	0800692c 	.word	0x0800692c
 8005c4c:	08006940 	.word	0x08006940
 8005c50:	08006950 	.word	0x08006950
 8005c54:	08006960 	.word	0x08006960
 8005c58:	0800696c 	.word	0x0800696c
 8005c5c:	20001540 	.word	0x20001540
 8005c60:	20000058 	.word	0x20000058
 8005c64:	20001541 	.word	0x20001541
 8005c68:	20001542 	.word	0x20001542
 8005c6c:	20001543 	.word	0x20001543
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08006984 	.word	0x08006984
 8005c78:	08005cb9 	.word	0x08005cb9
 8005c7c:	0800698c 	.word	0x0800698c

08005c80 <LedUp>:

void LedUp(void *data)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	if(levelLed < 100)
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <LedUp+0x34>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b63      	cmp	r3, #99	; 0x63
 8005c8e:	d80c      	bhi.n	8005caa <LedUp+0x2a>
	{
		LedControl_SetColorGeneral(LED_KIT_ID0, LED_COLOR_GREEN, levelLed);
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <LedUp+0x34>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	2101      	movs	r1, #1
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f7fc fb9b 	bl	80023d4 <LedControl_SetColorGeneral>
		levelLed ++;
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <LedUp+0x34>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <LedUp+0x34>)
 8005ca8:	701a      	strb	r2, [r3, #0]
	}
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200014f5 	.word	0x200014f5

08005cb8 <LedDown>:
void LedDown(void *data)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	if(levelLed > 0)
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <LedDown+0x34>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00c      	beq.n	8005ce2 <LedDown+0x2a>
	{
		LedControl_SetColorGeneral(LED_KIT_ID0, LED_COLOR_GREEN, levelLed);
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <LedDown+0x34>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2101      	movs	r1, #1
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	f7fc fb7f 	bl	80023d4 <LedControl_SetColorGeneral>
		levelLed --;
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <LedDown+0x34>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <LedDown+0x34>)
 8005ce0:	701a      	strb	r2, [r3, #0]
	}
}
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200014f5 	.word	0x200014f5

08005cf0 <Task_multiSensorScan>:
static char src1[20];
static char src2[20];
static char src3[20];
static uint8_t count_clear = 0;
void Task_multiSensorScan()
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af02      	add	r7, sp, #8
	uint8_t temp = TemHumSensor_GetTemp();
 8005cf6:	f7fd f80b 	bl	8002d10 <TemHumSensor_GetTemp>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t humi = TemHumSensor_GetHumi();
 8005cfe:	f7fd f843 	bl	8002d88 <TemHumSensor_GetHumi>
 8005d02:	4603      	mov	r3, r0
 8005d04:	71bb      	strb	r3, [r7, #6]
	uint16_t light= LightSensor_MeasureUseDMAMode();
 8005d06:	f7fc fff1 	bl	8002cec <LightSensor_MeasureUseDMAMode>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	80bb      	strh	r3, [r7, #4]

	if(count_clear == 0){
 8005d0e:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <Task_multiSensorScan+0xac>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d105      	bne.n	8005d22 <Task_multiSensorScan+0x32>
	ucg_ClearScreen(&ucg);
 8005d16:	4822      	ldr	r0, [pc, #136]	; (8005da0 <Task_multiSensorScan+0xb0>)
 8005d18:	f7fd fbd6 	bl	80034c8 <ucg_ClearScreen>
	count_clear = 1;
 8005d1c:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <Task_multiSensorScan+0xac>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
	}

	//hiển thị nhiệt độ
	memset(src1,0,sizeof(src1));
 8005d22:	2214      	movs	r2, #20
 8005d24:	2100      	movs	r1, #0
 8005d26:	481f      	ldr	r0, [pc, #124]	; (8005da4 <Task_multiSensorScan+0xb4>)
 8005d28:	f000 f92c 	bl	8005f84 <memset>
	sprintf(src1,"Temp = %d oC", temp);
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	491d      	ldr	r1, [pc, #116]	; (8005da8 <Task_multiSensorScan+0xb8>)
 8005d32:	481c      	ldr	r0, [pc, #112]	; (8005da4 <Task_multiSensorScan+0xb4>)
 8005d34:	f000 f92e 	bl	8005f94 <siprintf>
	ucg_DrawString(&ucg, 0, 12, 0, src1);
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <Task_multiSensorScan+0xb4>)
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	220c      	movs	r2, #12
 8005d40:	2100      	movs	r1, #0
 8005d42:	4817      	ldr	r0, [pc, #92]	; (8005da0 <Task_multiSensorScan+0xb0>)
 8005d44:	f7ff f92e 	bl	8004fa4 <ucg_DrawString>


	//hiển thị độ ẩm
	memset(src2,0,sizeof(src2));
 8005d48:	2214      	movs	r2, #20
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	4817      	ldr	r0, [pc, #92]	; (8005dac <Task_multiSensorScan+0xbc>)
 8005d4e:	f000 f919 	bl	8005f84 <memset>
	sprintf(src2,"Humi = %3d %%", humi);
 8005d52:	79bb      	ldrb	r3, [r7, #6]
 8005d54:	461a      	mov	r2, r3
 8005d56:	4916      	ldr	r1, [pc, #88]	; (8005db0 <Task_multiSensorScan+0xc0>)
 8005d58:	4814      	ldr	r0, [pc, #80]	; (8005dac <Task_multiSensorScan+0xbc>)
 8005d5a:	f000 f91b 	bl	8005f94 <siprintf>
	ucg_DrawString(&ucg, 0, 48, 0, src2);
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <Task_multiSensorScan+0xbc>)
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	2230      	movs	r2, #48	; 0x30
 8005d66:	2100      	movs	r1, #0
 8005d68:	480d      	ldr	r0, [pc, #52]	; (8005da0 <Task_multiSensorScan+0xb0>)
 8005d6a:	f7ff f91b 	bl	8004fa4 <ucg_DrawString>


	//hiển thị ánh sáng
	memset(src3,0,sizeof(src3));
 8005d6e:	2214      	movs	r2, #20
 8005d70:	2100      	movs	r1, #0
 8005d72:	4810      	ldr	r0, [pc, #64]	; (8005db4 <Task_multiSensorScan+0xc4>)
 8005d74:	f000 f906 	bl	8005f84 <memset>
	sprintf(src3,"Light = %d lux", light);
 8005d78:	88bb      	ldrh	r3, [r7, #4]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	490e      	ldr	r1, [pc, #56]	; (8005db8 <Task_multiSensorScan+0xc8>)
 8005d7e:	480d      	ldr	r0, [pc, #52]	; (8005db4 <Task_multiSensorScan+0xc4>)
 8005d80:	f000 f908 	bl	8005f94 <siprintf>
	ucg_DrawString(&ucg, 0, 60, 0, src3);
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <Task_multiSensorScan+0xc4>)
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	223c      	movs	r2, #60	; 0x3c
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4804      	ldr	r0, [pc, #16]	; (8005da0 <Task_multiSensorScan+0xb0>)
 8005d90:	f7ff f908 	bl	8004fa4 <ucg_DrawString>


}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20001538 	.word	0x20001538
 8005da0:	20001440 	.word	0x20001440
 8005da4:	200014fc 	.word	0x200014fc
 8005da8:	08006994 	.word	0x08006994
 8005dac:	20001510 	.word	0x20001510
 8005db0:	080069a4 	.word	0x080069a4
 8005db4:	20001524 	.word	0x20001524
 8005db8:	080069b4 	.word	0x080069b4

08005dbc <cancleTimer>:
static uint32_t lastUpdateTime;

static uint32_t updateInterval = 2000;// milisecond


void cancleTimer(void *data){
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	if(IdTimerCancle != NO_TIMER){
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <cancleTimer+0x24>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2bff      	cmp	r3, #255	; 0xff
 8005dca:	d004      	beq.n	8005dd6 <cancleTimer+0x1a>
		TimerStop(IdTimerCancle);
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <cancleTimer+0x24>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fc fd8d 	bl	80028f0 <TimerStop>
	}
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	200014f6 	.word	0x200014f6

08005de4 <MultiSensorScan>:
void MultiSensorScan()
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af02      	add	r7, sp, #8
//    uint32_t lastUpdateTime = GetMilSecTick();
//    uint32_t updateInterval = 1000; // 1 giây (1000 millisecond)
        uint32_t currentTime = GetMilSecTick();
 8005dea:	f7fc fdd1 	bl	8002990 <GetMilSecTick>
 8005dee:	6078      	str	r0, [r7, #4]

        if (currentTime - lastUpdateTime >= updateInterval) {
 8005df0:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <MultiSensorScan+0x48>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	1ad2      	subs	r2, r2, r3
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <MultiSensorScan+0x4c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d311      	bcc.n	8005e24 <MultiSensorScan+0x40>
            // Đã đủ thời gian để cập nhật nhiệt độ và độ ẩm
            // Thực hiện việc cập nhật thông tin từ cảm biến và hiển thị lên LCD
            //Task_multiSensorScan();

            // Cập nhật thời gian của lần cập nhật cuối cùng
            lastUpdateTime = currentTime;
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <MultiSensorScan+0x48>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6013      	str	r3, [r2, #0]
            Task_multiSensorScan();
 8005e06:	f7ff ff73 	bl	8005cf0 <Task_multiSensorScan>
            IdTimerCancle = TimerStart("delay", 500, 0, (void*)cancleTimer, NULL);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <MultiSensorScan+0x50>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005e16:	4808      	ldr	r0, [pc, #32]	; (8005e38 <MultiSensorScan+0x54>)
 8005e18:	f7fc fd08 	bl	800282c <TimerStart>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <MultiSensorScan+0x58>)
 8005e22:	701a      	strb	r2, [r3, #0]
        // Sleep để tránh lặp quá nhanh và gây tải CPU không cần thiết
        // Thời gian sleep có thể điều chỉnh tùy ý
        // Sleep 1 giây trước khi kiểm tra lại
        // Sleep 1 giây trước khi kiểm tra lại

}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	2000153c 	.word	0x2000153c
 8005e30:	20000064 	.word	0x20000064
 8005e34:	08005dbd 	.word	0x08005dbd
 8005e38:	080069c4 	.word	0x080069c4
 8005e3c:	200014f6 	.word	0x200014f6

08005e40 <main>:

int main(void){
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
	AppInitCommon();
 8005e44:	f7ff fc7a 	bl	800573c <AppInitCommon>
	SetStateApp(STATE_APP_STARTUP);
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f7ff fcb7 	bl	80057bc <SetStateApp>
	EventSchedulerAdd(EVENT_APP_INIT);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f7fc fc4c 	bl	80026ec <EventSchedulerAdd>
	lastUpdateTime =  GetMilSecTick();
 8005e54:	f7fc fd9c 	bl	8002990 <GetMilSecTick>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <main+0x2c>)
 8005e5c:	6013      	str	r3, [r2, #0]
	while(1)
	{
		processTimerScheduler();
 8005e5e:	f7fc fda3 	bl	80029a8 <processTimerScheduler>
		processEventScheduler();
 8005e62:	f7fc fc59 	bl	8002718 <processEventScheduler>
		MultiSensorScan();
 8005e66:	f7ff ffbd 	bl	8005de4 <MultiSensorScan>
		processTimerScheduler();
 8005e6a:	e7f8      	b.n	8005e5e <main+0x1e>
 8005e6c:	2000153c 	.word	0x2000153c

08005e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e78:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <_sbrk+0x5c>)
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <_sbrk+0x60>)
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e84:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <_sbrk+0x64>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e8c:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <_sbrk+0x64>)
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <_sbrk+0x68>)
 8005e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <_sbrk+0x64>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d207      	bcs.n	8005eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ea0:	f000 f846 	bl	8005f30 <__errno>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	220c      	movs	r2, #12
 8005ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005eae:	e009      	b.n	8005ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005eb0:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <_sbrk+0x64>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <_sbrk+0x64>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	4a05      	ldr	r2, [pc, #20]	; (8005ed4 <_sbrk+0x64>)
 8005ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20018000 	.word	0x20018000
 8005ed0:	00000400 	.word	0x00000400
 8005ed4:	20001544 	.word	0x20001544
 8005ed8:	20001558 	.word	0x20001558

08005edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005edc:	480d      	ldr	r0, [pc, #52]	; (8005f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005ede:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005ee0:	f7fa f9ce 	bl	8000280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ee4:	480c      	ldr	r0, [pc, #48]	; (8005f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8005ee6:	490d      	ldr	r1, [pc, #52]	; (8005f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ee8:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <LoopForever+0xe>)
  movs r3, #0
 8005eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005eec:	e002      	b.n	8005ef4 <LoopCopyDataInit>

08005eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ef2:	3304      	adds	r3, #4

08005ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ef8:	d3f9      	bcc.n	8005eee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005efa:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005efc:	4c0a      	ldr	r4, [pc, #40]	; (8005f28 <LoopForever+0x16>)
  movs r3, #0
 8005efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f00:	e001      	b.n	8005f06 <LoopFillZerobss>

08005f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f04:	3204      	adds	r2, #4

08005f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f08:	d3fb      	bcc.n	8005f02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005f0a:	f000 f817 	bl	8005f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f0e:	f7ff ff97 	bl	8005e40 <main>

08005f12 <LoopForever>:

LoopForever:
  b LoopForever
 8005f12:	e7fe      	b.n	8005f12 <LoopForever>
  ldr   r0, =_estack
 8005f14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f1c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8005f20:	0800737c 	.word	0x0800737c
  ldr r2, =_sbss
 8005f24:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8005f28:	20001558 	.word	0x20001558

08005f2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f2c:	e7fe      	b.n	8005f2c <ADC_IRQHandler>
	...

08005f30 <__errno>:
 8005f30:	4b01      	ldr	r3, [pc, #4]	; (8005f38 <__errno+0x8>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000068 	.word	0x20000068

08005f3c <__libc_init_array>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4d0d      	ldr	r5, [pc, #52]	; (8005f74 <__libc_init_array+0x38>)
 8005f40:	4c0d      	ldr	r4, [pc, #52]	; (8005f78 <__libc_init_array+0x3c>)
 8005f42:	1b64      	subs	r4, r4, r5
 8005f44:	10a4      	asrs	r4, r4, #2
 8005f46:	2600      	movs	r6, #0
 8005f48:	42a6      	cmp	r6, r4
 8005f4a:	d109      	bne.n	8005f60 <__libc_init_array+0x24>
 8005f4c:	4d0b      	ldr	r5, [pc, #44]	; (8005f7c <__libc_init_array+0x40>)
 8005f4e:	4c0c      	ldr	r4, [pc, #48]	; (8005f80 <__libc_init_array+0x44>)
 8005f50:	f000 fc8e 	bl	8006870 <_init>
 8005f54:	1b64      	subs	r4, r4, r5
 8005f56:	10a4      	asrs	r4, r4, #2
 8005f58:	2600      	movs	r6, #0
 8005f5a:	42a6      	cmp	r6, r4
 8005f5c:	d105      	bne.n	8005f6a <__libc_init_array+0x2e>
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
 8005f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f64:	4798      	blx	r3
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7ee      	b.n	8005f48 <__libc_init_array+0xc>
 8005f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6e:	4798      	blx	r3
 8005f70:	3601      	adds	r6, #1
 8005f72:	e7f2      	b.n	8005f5a <__libc_init_array+0x1e>
 8005f74:	08007374 	.word	0x08007374
 8005f78:	08007374 	.word	0x08007374
 8005f7c:	08007374 	.word	0x08007374
 8005f80:	08007378 	.word	0x08007378

08005f84 <memset>:
 8005f84:	4402      	add	r2, r0
 8005f86:	4603      	mov	r3, r0
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d100      	bne.n	8005f8e <memset+0xa>
 8005f8c:	4770      	bx	lr
 8005f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f92:	e7f9      	b.n	8005f88 <memset+0x4>

08005f94 <siprintf>:
 8005f94:	b40e      	push	{r1, r2, r3}
 8005f96:	b500      	push	{lr}
 8005f98:	b09c      	sub	sp, #112	; 0x70
 8005f9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f9c:	9002      	str	r0, [sp, #8]
 8005f9e:	9006      	str	r0, [sp, #24]
 8005fa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fa4:	4809      	ldr	r0, [pc, #36]	; (8005fcc <siprintf+0x38>)
 8005fa6:	9107      	str	r1, [sp, #28]
 8005fa8:	9104      	str	r1, [sp, #16]
 8005faa:	4909      	ldr	r1, [pc, #36]	; (8005fd0 <siprintf+0x3c>)
 8005fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb0:	9105      	str	r1, [sp, #20]
 8005fb2:	6800      	ldr	r0, [r0, #0]
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	a902      	add	r1, sp, #8
 8005fb8:	f000 f868 	bl	800608c <_svfiprintf_r>
 8005fbc:	9b02      	ldr	r3, [sp, #8]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	b01c      	add	sp, #112	; 0x70
 8005fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fc8:	b003      	add	sp, #12
 8005fca:	4770      	bx	lr
 8005fcc:	20000068 	.word	0x20000068
 8005fd0:	ffff0208 	.word	0xffff0208

08005fd4 <__ssputs_r>:
 8005fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	688e      	ldr	r6, [r1, #8]
 8005fda:	429e      	cmp	r6, r3
 8005fdc:	4682      	mov	sl, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	4690      	mov	r8, r2
 8005fe2:	461f      	mov	r7, r3
 8005fe4:	d838      	bhi.n	8006058 <__ssputs_r+0x84>
 8005fe6:	898a      	ldrh	r2, [r1, #12]
 8005fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fec:	d032      	beq.n	8006054 <__ssputs_r+0x80>
 8005fee:	6825      	ldr	r5, [r4, #0]
 8005ff0:	6909      	ldr	r1, [r1, #16]
 8005ff2:	eba5 0901 	sub.w	r9, r5, r1
 8005ff6:	6965      	ldr	r5, [r4, #20]
 8005ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006000:	3301      	adds	r3, #1
 8006002:	444b      	add	r3, r9
 8006004:	106d      	asrs	r5, r5, #1
 8006006:	429d      	cmp	r5, r3
 8006008:	bf38      	it	cc
 800600a:	461d      	movcc	r5, r3
 800600c:	0553      	lsls	r3, r2, #21
 800600e:	d531      	bpl.n	8006074 <__ssputs_r+0xa0>
 8006010:	4629      	mov	r1, r5
 8006012:	f000 fb63 	bl	80066dc <_malloc_r>
 8006016:	4606      	mov	r6, r0
 8006018:	b950      	cbnz	r0, 8006030 <__ssputs_r+0x5c>
 800601a:	230c      	movs	r3, #12
 800601c:	f8ca 3000 	str.w	r3, [sl]
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	6921      	ldr	r1, [r4, #16]
 8006032:	464a      	mov	r2, r9
 8006034:	f000 fabe 	bl	80065b4 <memcpy>
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800603e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	6126      	str	r6, [r4, #16]
 8006046:	6165      	str	r5, [r4, #20]
 8006048:	444e      	add	r6, r9
 800604a:	eba5 0509 	sub.w	r5, r5, r9
 800604e:	6026      	str	r6, [r4, #0]
 8006050:	60a5      	str	r5, [r4, #8]
 8006052:	463e      	mov	r6, r7
 8006054:	42be      	cmp	r6, r7
 8006056:	d900      	bls.n	800605a <__ssputs_r+0x86>
 8006058:	463e      	mov	r6, r7
 800605a:	6820      	ldr	r0, [r4, #0]
 800605c:	4632      	mov	r2, r6
 800605e:	4641      	mov	r1, r8
 8006060:	f000 fab6 	bl	80065d0 <memmove>
 8006064:	68a3      	ldr	r3, [r4, #8]
 8006066:	1b9b      	subs	r3, r3, r6
 8006068:	60a3      	str	r3, [r4, #8]
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	4433      	add	r3, r6
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	2000      	movs	r0, #0
 8006072:	e7db      	b.n	800602c <__ssputs_r+0x58>
 8006074:	462a      	mov	r2, r5
 8006076:	f000 fba5 	bl	80067c4 <_realloc_r>
 800607a:	4606      	mov	r6, r0
 800607c:	2800      	cmp	r0, #0
 800607e:	d1e1      	bne.n	8006044 <__ssputs_r+0x70>
 8006080:	6921      	ldr	r1, [r4, #16]
 8006082:	4650      	mov	r0, sl
 8006084:	f000 fabe 	bl	8006604 <_free_r>
 8006088:	e7c7      	b.n	800601a <__ssputs_r+0x46>
	...

0800608c <_svfiprintf_r>:
 800608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	4698      	mov	r8, r3
 8006092:	898b      	ldrh	r3, [r1, #12]
 8006094:	061b      	lsls	r3, r3, #24
 8006096:	b09d      	sub	sp, #116	; 0x74
 8006098:	4607      	mov	r7, r0
 800609a:	460d      	mov	r5, r1
 800609c:	4614      	mov	r4, r2
 800609e:	d50e      	bpl.n	80060be <_svfiprintf_r+0x32>
 80060a0:	690b      	ldr	r3, [r1, #16]
 80060a2:	b963      	cbnz	r3, 80060be <_svfiprintf_r+0x32>
 80060a4:	2140      	movs	r1, #64	; 0x40
 80060a6:	f000 fb19 	bl	80066dc <_malloc_r>
 80060aa:	6028      	str	r0, [r5, #0]
 80060ac:	6128      	str	r0, [r5, #16]
 80060ae:	b920      	cbnz	r0, 80060ba <_svfiprintf_r+0x2e>
 80060b0:	230c      	movs	r3, #12
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	e0d1      	b.n	800625e <_svfiprintf_r+0x1d2>
 80060ba:	2340      	movs	r3, #64	; 0x40
 80060bc:	616b      	str	r3, [r5, #20]
 80060be:	2300      	movs	r3, #0
 80060c0:	9309      	str	r3, [sp, #36]	; 0x24
 80060c2:	2320      	movs	r3, #32
 80060c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060cc:	2330      	movs	r3, #48	; 0x30
 80060ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006278 <_svfiprintf_r+0x1ec>
 80060d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d6:	f04f 0901 	mov.w	r9, #1
 80060da:	4623      	mov	r3, r4
 80060dc:	469a      	mov	sl, r3
 80060de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e2:	b10a      	cbz	r2, 80060e8 <_svfiprintf_r+0x5c>
 80060e4:	2a25      	cmp	r2, #37	; 0x25
 80060e6:	d1f9      	bne.n	80060dc <_svfiprintf_r+0x50>
 80060e8:	ebba 0b04 	subs.w	fp, sl, r4
 80060ec:	d00b      	beq.n	8006106 <_svfiprintf_r+0x7a>
 80060ee:	465b      	mov	r3, fp
 80060f0:	4622      	mov	r2, r4
 80060f2:	4629      	mov	r1, r5
 80060f4:	4638      	mov	r0, r7
 80060f6:	f7ff ff6d 	bl	8005fd4 <__ssputs_r>
 80060fa:	3001      	adds	r0, #1
 80060fc:	f000 80aa 	beq.w	8006254 <_svfiprintf_r+0x1c8>
 8006100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006102:	445a      	add	r2, fp
 8006104:	9209      	str	r2, [sp, #36]	; 0x24
 8006106:	f89a 3000 	ldrb.w	r3, [sl]
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 80a2 	beq.w	8006254 <_svfiprintf_r+0x1c8>
 8006110:	2300      	movs	r3, #0
 8006112:	f04f 32ff 	mov.w	r2, #4294967295
 8006116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800611a:	f10a 0a01 	add.w	sl, sl, #1
 800611e:	9304      	str	r3, [sp, #16]
 8006120:	9307      	str	r3, [sp, #28]
 8006122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006126:	931a      	str	r3, [sp, #104]	; 0x68
 8006128:	4654      	mov	r4, sl
 800612a:	2205      	movs	r2, #5
 800612c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006130:	4851      	ldr	r0, [pc, #324]	; (8006278 <_svfiprintf_r+0x1ec>)
 8006132:	f7fa f855 	bl	80001e0 <memchr>
 8006136:	9a04      	ldr	r2, [sp, #16]
 8006138:	b9d8      	cbnz	r0, 8006172 <_svfiprintf_r+0xe6>
 800613a:	06d0      	lsls	r0, r2, #27
 800613c:	bf44      	itt	mi
 800613e:	2320      	movmi	r3, #32
 8006140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006144:	0711      	lsls	r1, r2, #28
 8006146:	bf44      	itt	mi
 8006148:	232b      	movmi	r3, #43	; 0x2b
 800614a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800614e:	f89a 3000 	ldrb.w	r3, [sl]
 8006152:	2b2a      	cmp	r3, #42	; 0x2a
 8006154:	d015      	beq.n	8006182 <_svfiprintf_r+0xf6>
 8006156:	9a07      	ldr	r2, [sp, #28]
 8006158:	4654      	mov	r4, sl
 800615a:	2000      	movs	r0, #0
 800615c:	f04f 0c0a 	mov.w	ip, #10
 8006160:	4621      	mov	r1, r4
 8006162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006166:	3b30      	subs	r3, #48	; 0x30
 8006168:	2b09      	cmp	r3, #9
 800616a:	d94e      	bls.n	800620a <_svfiprintf_r+0x17e>
 800616c:	b1b0      	cbz	r0, 800619c <_svfiprintf_r+0x110>
 800616e:	9207      	str	r2, [sp, #28]
 8006170:	e014      	b.n	800619c <_svfiprintf_r+0x110>
 8006172:	eba0 0308 	sub.w	r3, r0, r8
 8006176:	fa09 f303 	lsl.w	r3, r9, r3
 800617a:	4313      	orrs	r3, r2
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	46a2      	mov	sl, r4
 8006180:	e7d2      	b.n	8006128 <_svfiprintf_r+0x9c>
 8006182:	9b03      	ldr	r3, [sp, #12]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	9103      	str	r1, [sp, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfbb      	ittet	lt
 800618e:	425b      	neglt	r3, r3
 8006190:	f042 0202 	orrlt.w	r2, r2, #2
 8006194:	9307      	strge	r3, [sp, #28]
 8006196:	9307      	strlt	r3, [sp, #28]
 8006198:	bfb8      	it	lt
 800619a:	9204      	strlt	r2, [sp, #16]
 800619c:	7823      	ldrb	r3, [r4, #0]
 800619e:	2b2e      	cmp	r3, #46	; 0x2e
 80061a0:	d10c      	bne.n	80061bc <_svfiprintf_r+0x130>
 80061a2:	7863      	ldrb	r3, [r4, #1]
 80061a4:	2b2a      	cmp	r3, #42	; 0x2a
 80061a6:	d135      	bne.n	8006214 <_svfiprintf_r+0x188>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	9203      	str	r2, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bfb8      	it	lt
 80061b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80061b8:	3402      	adds	r4, #2
 80061ba:	9305      	str	r3, [sp, #20]
 80061bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006288 <_svfiprintf_r+0x1fc>
 80061c0:	7821      	ldrb	r1, [r4, #0]
 80061c2:	2203      	movs	r2, #3
 80061c4:	4650      	mov	r0, sl
 80061c6:	f7fa f80b 	bl	80001e0 <memchr>
 80061ca:	b140      	cbz	r0, 80061de <_svfiprintf_r+0x152>
 80061cc:	2340      	movs	r3, #64	; 0x40
 80061ce:	eba0 000a 	sub.w	r0, r0, sl
 80061d2:	fa03 f000 	lsl.w	r0, r3, r0
 80061d6:	9b04      	ldr	r3, [sp, #16]
 80061d8:	4303      	orrs	r3, r0
 80061da:	3401      	adds	r4, #1
 80061dc:	9304      	str	r3, [sp, #16]
 80061de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e2:	4826      	ldr	r0, [pc, #152]	; (800627c <_svfiprintf_r+0x1f0>)
 80061e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e8:	2206      	movs	r2, #6
 80061ea:	f7f9 fff9 	bl	80001e0 <memchr>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d038      	beq.n	8006264 <_svfiprintf_r+0x1d8>
 80061f2:	4b23      	ldr	r3, [pc, #140]	; (8006280 <_svfiprintf_r+0x1f4>)
 80061f4:	bb1b      	cbnz	r3, 800623e <_svfiprintf_r+0x1b2>
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	3307      	adds	r3, #7
 80061fa:	f023 0307 	bic.w	r3, r3, #7
 80061fe:	3308      	adds	r3, #8
 8006200:	9303      	str	r3, [sp, #12]
 8006202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006204:	4433      	add	r3, r6
 8006206:	9309      	str	r3, [sp, #36]	; 0x24
 8006208:	e767      	b.n	80060da <_svfiprintf_r+0x4e>
 800620a:	fb0c 3202 	mla	r2, ip, r2, r3
 800620e:	460c      	mov	r4, r1
 8006210:	2001      	movs	r0, #1
 8006212:	e7a5      	b.n	8006160 <_svfiprintf_r+0xd4>
 8006214:	2300      	movs	r3, #0
 8006216:	3401      	adds	r4, #1
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	4619      	mov	r1, r3
 800621c:	f04f 0c0a 	mov.w	ip, #10
 8006220:	4620      	mov	r0, r4
 8006222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006226:	3a30      	subs	r2, #48	; 0x30
 8006228:	2a09      	cmp	r2, #9
 800622a:	d903      	bls.n	8006234 <_svfiprintf_r+0x1a8>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0c5      	beq.n	80061bc <_svfiprintf_r+0x130>
 8006230:	9105      	str	r1, [sp, #20]
 8006232:	e7c3      	b.n	80061bc <_svfiprintf_r+0x130>
 8006234:	fb0c 2101 	mla	r1, ip, r1, r2
 8006238:	4604      	mov	r4, r0
 800623a:	2301      	movs	r3, #1
 800623c:	e7f0      	b.n	8006220 <_svfiprintf_r+0x194>
 800623e:	ab03      	add	r3, sp, #12
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	462a      	mov	r2, r5
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <_svfiprintf_r+0x1f8>)
 8006246:	a904      	add	r1, sp, #16
 8006248:	4638      	mov	r0, r7
 800624a:	f3af 8000 	nop.w
 800624e:	1c42      	adds	r2, r0, #1
 8006250:	4606      	mov	r6, r0
 8006252:	d1d6      	bne.n	8006202 <_svfiprintf_r+0x176>
 8006254:	89ab      	ldrh	r3, [r5, #12]
 8006256:	065b      	lsls	r3, r3, #25
 8006258:	f53f af2c 	bmi.w	80060b4 <_svfiprintf_r+0x28>
 800625c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800625e:	b01d      	add	sp, #116	; 0x74
 8006260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	462a      	mov	r2, r5
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <_svfiprintf_r+0x1f8>)
 800626c:	a904      	add	r1, sp, #16
 800626e:	4638      	mov	r0, r7
 8006270:	f000 f87a 	bl	8006368 <_printf_i>
 8006274:	e7eb      	b.n	800624e <_svfiprintf_r+0x1c2>
 8006276:	bf00      	nop
 8006278:	0800733f 	.word	0x0800733f
 800627c:	08007349 	.word	0x08007349
 8006280:	00000000 	.word	0x00000000
 8006284:	08005fd5 	.word	0x08005fd5
 8006288:	08007345 	.word	0x08007345

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4616      	mov	r6, r2
 8006292:	4699      	mov	r9, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800629c:	4293      	cmp	r3, r2
 800629e:	bfb8      	it	lt
 80062a0:	4613      	movlt	r3, r2
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a8:	4607      	mov	r7, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b10a      	cbz	r2, 80062b2 <_printf_common+0x26>
 80062ae:	3301      	adds	r3, #1
 80062b0:	6033      	str	r3, [r6, #0]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	6833      	ldrmi	r3, [r6, #0]
 80062ba:	3302      	addmi	r3, #2
 80062bc:	6033      	strmi	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d106      	bne.n	80062d4 <_printf_common+0x48>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	6832      	ldr	r2, [r6, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc26      	bgt.n	8006322 <_printf_common+0x96>
 80062d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d8:	1e13      	subs	r3, r2, #0
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d42b      	bmi.n	800633c <_printf_common+0xb0>
 80062e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e8:	4649      	mov	r1, r9
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c0      	blx	r8
 80062ee:	3001      	adds	r0, #1
 80062f0:	d01e      	beq.n	8006330 <_printf_common+0xa4>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	68e5      	ldr	r5, [r4, #12]
 80062f6:	6832      	ldr	r2, [r6, #0]
 80062f8:	f003 0306 	and.w	r3, r3, #6
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	bf08      	it	eq
 8006300:	1aad      	subeq	r5, r5, r2
 8006302:	68a3      	ldr	r3, [r4, #8]
 8006304:	6922      	ldr	r2, [r4, #16]
 8006306:	bf0c      	ite	eq
 8006308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800630c:	2500      	movne	r5, #0
 800630e:	4293      	cmp	r3, r2
 8006310:	bfc4      	itt	gt
 8006312:	1a9b      	subgt	r3, r3, r2
 8006314:	18ed      	addgt	r5, r5, r3
 8006316:	2600      	movs	r6, #0
 8006318:	341a      	adds	r4, #26
 800631a:	42b5      	cmp	r5, r6
 800631c:	d11a      	bne.n	8006354 <_printf_common+0xc8>
 800631e:	2000      	movs	r0, #0
 8006320:	e008      	b.n	8006334 <_printf_common+0xa8>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4649      	mov	r1, r9
 8006328:	4638      	mov	r0, r7
 800632a:	47c0      	blx	r8
 800632c:	3001      	adds	r0, #1
 800632e:	d103      	bne.n	8006338 <_printf_common+0xac>
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	3501      	adds	r5, #1
 800633a:	e7c6      	b.n	80062ca <_printf_common+0x3e>
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	2030      	movs	r0, #48	; 0x30
 8006342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006346:	4422      	add	r2, r4
 8006348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800634c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006350:	3302      	adds	r3, #2
 8006352:	e7c7      	b.n	80062e4 <_printf_common+0x58>
 8006354:	2301      	movs	r3, #1
 8006356:	4622      	mov	r2, r4
 8006358:	4649      	mov	r1, r9
 800635a:	4638      	mov	r0, r7
 800635c:	47c0      	blx	r8
 800635e:	3001      	adds	r0, #1
 8006360:	d0e6      	beq.n	8006330 <_printf_common+0xa4>
 8006362:	3601      	adds	r6, #1
 8006364:	e7d9      	b.n	800631a <_printf_common+0x8e>
	...

08006368 <_printf_i>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	7e0f      	ldrb	r7, [r1, #24]
 800636e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006370:	2f78      	cmp	r7, #120	; 0x78
 8006372:	4691      	mov	r9, r2
 8006374:	4680      	mov	r8, r0
 8006376:	460c      	mov	r4, r1
 8006378:	469a      	mov	sl, r3
 800637a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800637e:	d807      	bhi.n	8006390 <_printf_i+0x28>
 8006380:	2f62      	cmp	r7, #98	; 0x62
 8006382:	d80a      	bhi.n	800639a <_printf_i+0x32>
 8006384:	2f00      	cmp	r7, #0
 8006386:	f000 80d8 	beq.w	800653a <_printf_i+0x1d2>
 800638a:	2f58      	cmp	r7, #88	; 0x58
 800638c:	f000 80a3 	beq.w	80064d6 <_printf_i+0x16e>
 8006390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006398:	e03a      	b.n	8006410 <_printf_i+0xa8>
 800639a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800639e:	2b15      	cmp	r3, #21
 80063a0:	d8f6      	bhi.n	8006390 <_printf_i+0x28>
 80063a2:	a101      	add	r1, pc, #4	; (adr r1, 80063a8 <_printf_i+0x40>)
 80063a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006391 	.word	0x08006391
 80063b4:	08006391 	.word	0x08006391
 80063b8:	08006391 	.word	0x08006391
 80063bc:	08006391 	.word	0x08006391
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006391 	.word	0x08006391
 80063c8:	08006391 	.word	0x08006391
 80063cc:	08006391 	.word	0x08006391
 80063d0:	08006391 	.word	0x08006391
 80063d4:	08006521 	.word	0x08006521
 80063d8:	08006445 	.word	0x08006445
 80063dc:	08006503 	.word	0x08006503
 80063e0:	08006391 	.word	0x08006391
 80063e4:	08006391 	.word	0x08006391
 80063e8:	08006543 	.word	0x08006543
 80063ec:	08006391 	.word	0x08006391
 80063f0:	08006445 	.word	0x08006445
 80063f4:	08006391 	.word	0x08006391
 80063f8:	08006391 	.word	0x08006391
 80063fc:	0800650b 	.word	0x0800650b
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	1d1a      	adds	r2, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	602a      	str	r2, [r5, #0]
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e0a3      	b.n	800655c <_printf_i+0x1f4>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	6829      	ldr	r1, [r5, #0]
 8006418:	0606      	lsls	r6, r0, #24
 800641a:	f101 0304 	add.w	r3, r1, #4
 800641e:	d50a      	bpl.n	8006436 <_printf_i+0xce>
 8006420:	680e      	ldr	r6, [r1, #0]
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	2e00      	cmp	r6, #0
 8006426:	da03      	bge.n	8006430 <_printf_i+0xc8>
 8006428:	232d      	movs	r3, #45	; 0x2d
 800642a:	4276      	negs	r6, r6
 800642c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006430:	485e      	ldr	r0, [pc, #376]	; (80065ac <_printf_i+0x244>)
 8006432:	230a      	movs	r3, #10
 8006434:	e019      	b.n	800646a <_printf_i+0x102>
 8006436:	680e      	ldr	r6, [r1, #0]
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800643e:	bf18      	it	ne
 8006440:	b236      	sxthne	r6, r6
 8006442:	e7ef      	b.n	8006424 <_printf_i+0xbc>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	1d19      	adds	r1, r3, #4
 800644a:	6029      	str	r1, [r5, #0]
 800644c:	0601      	lsls	r1, r0, #24
 800644e:	d501      	bpl.n	8006454 <_printf_i+0xec>
 8006450:	681e      	ldr	r6, [r3, #0]
 8006452:	e002      	b.n	800645a <_printf_i+0xf2>
 8006454:	0646      	lsls	r6, r0, #25
 8006456:	d5fb      	bpl.n	8006450 <_printf_i+0xe8>
 8006458:	881e      	ldrh	r6, [r3, #0]
 800645a:	4854      	ldr	r0, [pc, #336]	; (80065ac <_printf_i+0x244>)
 800645c:	2f6f      	cmp	r7, #111	; 0x6f
 800645e:	bf0c      	ite	eq
 8006460:	2308      	moveq	r3, #8
 8006462:	230a      	movne	r3, #10
 8006464:	2100      	movs	r1, #0
 8006466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800646a:	6865      	ldr	r5, [r4, #4]
 800646c:	60a5      	str	r5, [r4, #8]
 800646e:	2d00      	cmp	r5, #0
 8006470:	bfa2      	ittt	ge
 8006472:	6821      	ldrge	r1, [r4, #0]
 8006474:	f021 0104 	bicge.w	r1, r1, #4
 8006478:	6021      	strge	r1, [r4, #0]
 800647a:	b90e      	cbnz	r6, 8006480 <_printf_i+0x118>
 800647c:	2d00      	cmp	r5, #0
 800647e:	d04d      	beq.n	800651c <_printf_i+0x1b4>
 8006480:	4615      	mov	r5, r2
 8006482:	fbb6 f1f3 	udiv	r1, r6, r3
 8006486:	fb03 6711 	mls	r7, r3, r1, r6
 800648a:	5dc7      	ldrb	r7, [r0, r7]
 800648c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006490:	4637      	mov	r7, r6
 8006492:	42bb      	cmp	r3, r7
 8006494:	460e      	mov	r6, r1
 8006496:	d9f4      	bls.n	8006482 <_printf_i+0x11a>
 8006498:	2b08      	cmp	r3, #8
 800649a:	d10b      	bne.n	80064b4 <_printf_i+0x14c>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	07de      	lsls	r6, r3, #31
 80064a0:	d508      	bpl.n	80064b4 <_printf_i+0x14c>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	6861      	ldr	r1, [r4, #4]
 80064a6:	4299      	cmp	r1, r3
 80064a8:	bfde      	ittt	le
 80064aa:	2330      	movle	r3, #48	; 0x30
 80064ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b4:	1b52      	subs	r2, r2, r5
 80064b6:	6122      	str	r2, [r4, #16]
 80064b8:	f8cd a000 	str.w	sl, [sp]
 80064bc:	464b      	mov	r3, r9
 80064be:	aa03      	add	r2, sp, #12
 80064c0:	4621      	mov	r1, r4
 80064c2:	4640      	mov	r0, r8
 80064c4:	f7ff fee2 	bl	800628c <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	d14c      	bne.n	8006566 <_printf_i+0x1fe>
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	b004      	add	sp, #16
 80064d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d6:	4835      	ldr	r0, [pc, #212]	; (80065ac <_printf_i+0x244>)
 80064d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064dc:	6829      	ldr	r1, [r5, #0]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064e4:	6029      	str	r1, [r5, #0]
 80064e6:	061d      	lsls	r5, r3, #24
 80064e8:	d514      	bpl.n	8006514 <_printf_i+0x1ac>
 80064ea:	07df      	lsls	r7, r3, #31
 80064ec:	bf44      	itt	mi
 80064ee:	f043 0320 	orrmi.w	r3, r3, #32
 80064f2:	6023      	strmi	r3, [r4, #0]
 80064f4:	b91e      	cbnz	r6, 80064fe <_printf_i+0x196>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	f023 0320 	bic.w	r3, r3, #32
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	2310      	movs	r3, #16
 8006500:	e7b0      	b.n	8006464 <_printf_i+0xfc>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	f043 0320 	orr.w	r3, r3, #32
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	2378      	movs	r3, #120	; 0x78
 800650c:	4828      	ldr	r0, [pc, #160]	; (80065b0 <_printf_i+0x248>)
 800650e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006512:	e7e3      	b.n	80064dc <_printf_i+0x174>
 8006514:	0659      	lsls	r1, r3, #25
 8006516:	bf48      	it	mi
 8006518:	b2b6      	uxthmi	r6, r6
 800651a:	e7e6      	b.n	80064ea <_printf_i+0x182>
 800651c:	4615      	mov	r5, r2
 800651e:	e7bb      	b.n	8006498 <_printf_i+0x130>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	6826      	ldr	r6, [r4, #0]
 8006524:	6961      	ldr	r1, [r4, #20]
 8006526:	1d18      	adds	r0, r3, #4
 8006528:	6028      	str	r0, [r5, #0]
 800652a:	0635      	lsls	r5, r6, #24
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	d501      	bpl.n	8006534 <_printf_i+0x1cc>
 8006530:	6019      	str	r1, [r3, #0]
 8006532:	e002      	b.n	800653a <_printf_i+0x1d2>
 8006534:	0670      	lsls	r0, r6, #25
 8006536:	d5fb      	bpl.n	8006530 <_printf_i+0x1c8>
 8006538:	8019      	strh	r1, [r3, #0]
 800653a:	2300      	movs	r3, #0
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	4615      	mov	r5, r2
 8006540:	e7ba      	b.n	80064b8 <_printf_i+0x150>
 8006542:	682b      	ldr	r3, [r5, #0]
 8006544:	1d1a      	adds	r2, r3, #4
 8006546:	602a      	str	r2, [r5, #0]
 8006548:	681d      	ldr	r5, [r3, #0]
 800654a:	6862      	ldr	r2, [r4, #4]
 800654c:	2100      	movs	r1, #0
 800654e:	4628      	mov	r0, r5
 8006550:	f7f9 fe46 	bl	80001e0 <memchr>
 8006554:	b108      	cbz	r0, 800655a <_printf_i+0x1f2>
 8006556:	1b40      	subs	r0, r0, r5
 8006558:	6060      	str	r0, [r4, #4]
 800655a:	6863      	ldr	r3, [r4, #4]
 800655c:	6123      	str	r3, [r4, #16]
 800655e:	2300      	movs	r3, #0
 8006560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006564:	e7a8      	b.n	80064b8 <_printf_i+0x150>
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	462a      	mov	r2, r5
 800656a:	4649      	mov	r1, r9
 800656c:	4640      	mov	r0, r8
 800656e:	47d0      	blx	sl
 8006570:	3001      	adds	r0, #1
 8006572:	d0ab      	beq.n	80064cc <_printf_i+0x164>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	079b      	lsls	r3, r3, #30
 8006578:	d413      	bmi.n	80065a2 <_printf_i+0x23a>
 800657a:	68e0      	ldr	r0, [r4, #12]
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	4298      	cmp	r0, r3
 8006580:	bfb8      	it	lt
 8006582:	4618      	movlt	r0, r3
 8006584:	e7a4      	b.n	80064d0 <_printf_i+0x168>
 8006586:	2301      	movs	r3, #1
 8006588:	4632      	mov	r2, r6
 800658a:	4649      	mov	r1, r9
 800658c:	4640      	mov	r0, r8
 800658e:	47d0      	blx	sl
 8006590:	3001      	adds	r0, #1
 8006592:	d09b      	beq.n	80064cc <_printf_i+0x164>
 8006594:	3501      	adds	r5, #1
 8006596:	68e3      	ldr	r3, [r4, #12]
 8006598:	9903      	ldr	r1, [sp, #12]
 800659a:	1a5b      	subs	r3, r3, r1
 800659c:	42ab      	cmp	r3, r5
 800659e:	dcf2      	bgt.n	8006586 <_printf_i+0x21e>
 80065a0:	e7eb      	b.n	800657a <_printf_i+0x212>
 80065a2:	2500      	movs	r5, #0
 80065a4:	f104 0619 	add.w	r6, r4, #25
 80065a8:	e7f5      	b.n	8006596 <_printf_i+0x22e>
 80065aa:	bf00      	nop
 80065ac:	08007350 	.word	0x08007350
 80065b0:	08007361 	.word	0x08007361

080065b4 <memcpy>:
 80065b4:	440a      	add	r2, r1
 80065b6:	4291      	cmp	r1, r2
 80065b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065bc:	d100      	bne.n	80065c0 <memcpy+0xc>
 80065be:	4770      	bx	lr
 80065c0:	b510      	push	{r4, lr}
 80065c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ca:	4291      	cmp	r1, r2
 80065cc:	d1f9      	bne.n	80065c2 <memcpy+0xe>
 80065ce:	bd10      	pop	{r4, pc}

080065d0 <memmove>:
 80065d0:	4288      	cmp	r0, r1
 80065d2:	b510      	push	{r4, lr}
 80065d4:	eb01 0402 	add.w	r4, r1, r2
 80065d8:	d902      	bls.n	80065e0 <memmove+0x10>
 80065da:	4284      	cmp	r4, r0
 80065dc:	4623      	mov	r3, r4
 80065de:	d807      	bhi.n	80065f0 <memmove+0x20>
 80065e0:	1e43      	subs	r3, r0, #1
 80065e2:	42a1      	cmp	r1, r4
 80065e4:	d008      	beq.n	80065f8 <memmove+0x28>
 80065e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ee:	e7f8      	b.n	80065e2 <memmove+0x12>
 80065f0:	4402      	add	r2, r0
 80065f2:	4601      	mov	r1, r0
 80065f4:	428a      	cmp	r2, r1
 80065f6:	d100      	bne.n	80065fa <memmove+0x2a>
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006602:	e7f7      	b.n	80065f4 <memmove+0x24>

08006604 <_free_r>:
 8006604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006606:	2900      	cmp	r1, #0
 8006608:	d044      	beq.n	8006694 <_free_r+0x90>
 800660a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660e:	9001      	str	r0, [sp, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f1a1 0404 	sub.w	r4, r1, #4
 8006616:	bfb8      	it	lt
 8006618:	18e4      	addlt	r4, r4, r3
 800661a:	f000 f913 	bl	8006844 <__malloc_lock>
 800661e:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <_free_r+0x94>)
 8006620:	9801      	ldr	r0, [sp, #4]
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	b933      	cbnz	r3, 8006634 <_free_r+0x30>
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	6014      	str	r4, [r2, #0]
 800662a:	b003      	add	sp, #12
 800662c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006630:	f000 b90e 	b.w	8006850 <__malloc_unlock>
 8006634:	42a3      	cmp	r3, r4
 8006636:	d908      	bls.n	800664a <_free_r+0x46>
 8006638:	6825      	ldr	r5, [r4, #0]
 800663a:	1961      	adds	r1, r4, r5
 800663c:	428b      	cmp	r3, r1
 800663e:	bf01      	itttt	eq
 8006640:	6819      	ldreq	r1, [r3, #0]
 8006642:	685b      	ldreq	r3, [r3, #4]
 8006644:	1949      	addeq	r1, r1, r5
 8006646:	6021      	streq	r1, [r4, #0]
 8006648:	e7ed      	b.n	8006626 <_free_r+0x22>
 800664a:	461a      	mov	r2, r3
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	b10b      	cbz	r3, 8006654 <_free_r+0x50>
 8006650:	42a3      	cmp	r3, r4
 8006652:	d9fa      	bls.n	800664a <_free_r+0x46>
 8006654:	6811      	ldr	r1, [r2, #0]
 8006656:	1855      	adds	r5, r2, r1
 8006658:	42a5      	cmp	r5, r4
 800665a:	d10b      	bne.n	8006674 <_free_r+0x70>
 800665c:	6824      	ldr	r4, [r4, #0]
 800665e:	4421      	add	r1, r4
 8006660:	1854      	adds	r4, r2, r1
 8006662:	42a3      	cmp	r3, r4
 8006664:	6011      	str	r1, [r2, #0]
 8006666:	d1e0      	bne.n	800662a <_free_r+0x26>
 8006668:	681c      	ldr	r4, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	6053      	str	r3, [r2, #4]
 800666e:	4421      	add	r1, r4
 8006670:	6011      	str	r1, [r2, #0]
 8006672:	e7da      	b.n	800662a <_free_r+0x26>
 8006674:	d902      	bls.n	800667c <_free_r+0x78>
 8006676:	230c      	movs	r3, #12
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	e7d6      	b.n	800662a <_free_r+0x26>
 800667c:	6825      	ldr	r5, [r4, #0]
 800667e:	1961      	adds	r1, r4, r5
 8006680:	428b      	cmp	r3, r1
 8006682:	bf04      	itt	eq
 8006684:	6819      	ldreq	r1, [r3, #0]
 8006686:	685b      	ldreq	r3, [r3, #4]
 8006688:	6063      	str	r3, [r4, #4]
 800668a:	bf04      	itt	eq
 800668c:	1949      	addeq	r1, r1, r5
 800668e:	6021      	streq	r1, [r4, #0]
 8006690:	6054      	str	r4, [r2, #4]
 8006692:	e7ca      	b.n	800662a <_free_r+0x26>
 8006694:	b003      	add	sp, #12
 8006696:	bd30      	pop	{r4, r5, pc}
 8006698:	20001548 	.word	0x20001548

0800669c <sbrk_aligned>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4e0e      	ldr	r6, [pc, #56]	; (80066d8 <sbrk_aligned+0x3c>)
 80066a0:	460c      	mov	r4, r1
 80066a2:	6831      	ldr	r1, [r6, #0]
 80066a4:	4605      	mov	r5, r0
 80066a6:	b911      	cbnz	r1, 80066ae <sbrk_aligned+0x12>
 80066a8:	f000 f8bc 	bl	8006824 <_sbrk_r>
 80066ac:	6030      	str	r0, [r6, #0]
 80066ae:	4621      	mov	r1, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f8b7 	bl	8006824 <_sbrk_r>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d00a      	beq.n	80066d0 <sbrk_aligned+0x34>
 80066ba:	1cc4      	adds	r4, r0, #3
 80066bc:	f024 0403 	bic.w	r4, r4, #3
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d007      	beq.n	80066d4 <sbrk_aligned+0x38>
 80066c4:	1a21      	subs	r1, r4, r0
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 f8ac 	bl	8006824 <_sbrk_r>
 80066cc:	3001      	adds	r0, #1
 80066ce:	d101      	bne.n	80066d4 <sbrk_aligned+0x38>
 80066d0:	f04f 34ff 	mov.w	r4, #4294967295
 80066d4:	4620      	mov	r0, r4
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	2000154c 	.word	0x2000154c

080066dc <_malloc_r>:
 80066dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e0:	1ccd      	adds	r5, r1, #3
 80066e2:	f025 0503 	bic.w	r5, r5, #3
 80066e6:	3508      	adds	r5, #8
 80066e8:	2d0c      	cmp	r5, #12
 80066ea:	bf38      	it	cc
 80066ec:	250c      	movcc	r5, #12
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	4607      	mov	r7, r0
 80066f2:	db01      	blt.n	80066f8 <_malloc_r+0x1c>
 80066f4:	42a9      	cmp	r1, r5
 80066f6:	d905      	bls.n	8006704 <_malloc_r+0x28>
 80066f8:	230c      	movs	r3, #12
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	2600      	movs	r6, #0
 80066fe:	4630      	mov	r0, r6
 8006700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006704:	4e2e      	ldr	r6, [pc, #184]	; (80067c0 <_malloc_r+0xe4>)
 8006706:	f000 f89d 	bl	8006844 <__malloc_lock>
 800670a:	6833      	ldr	r3, [r6, #0]
 800670c:	461c      	mov	r4, r3
 800670e:	bb34      	cbnz	r4, 800675e <_malloc_r+0x82>
 8006710:	4629      	mov	r1, r5
 8006712:	4638      	mov	r0, r7
 8006714:	f7ff ffc2 	bl	800669c <sbrk_aligned>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	4604      	mov	r4, r0
 800671c:	d14d      	bne.n	80067ba <_malloc_r+0xde>
 800671e:	6834      	ldr	r4, [r6, #0]
 8006720:	4626      	mov	r6, r4
 8006722:	2e00      	cmp	r6, #0
 8006724:	d140      	bne.n	80067a8 <_malloc_r+0xcc>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	4631      	mov	r1, r6
 800672a:	4638      	mov	r0, r7
 800672c:	eb04 0803 	add.w	r8, r4, r3
 8006730:	f000 f878 	bl	8006824 <_sbrk_r>
 8006734:	4580      	cmp	r8, r0
 8006736:	d13a      	bne.n	80067ae <_malloc_r+0xd2>
 8006738:	6821      	ldr	r1, [r4, #0]
 800673a:	3503      	adds	r5, #3
 800673c:	1a6d      	subs	r5, r5, r1
 800673e:	f025 0503 	bic.w	r5, r5, #3
 8006742:	3508      	adds	r5, #8
 8006744:	2d0c      	cmp	r5, #12
 8006746:	bf38      	it	cc
 8006748:	250c      	movcc	r5, #12
 800674a:	4629      	mov	r1, r5
 800674c:	4638      	mov	r0, r7
 800674e:	f7ff ffa5 	bl	800669c <sbrk_aligned>
 8006752:	3001      	adds	r0, #1
 8006754:	d02b      	beq.n	80067ae <_malloc_r+0xd2>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	442b      	add	r3, r5
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	e00e      	b.n	800677c <_malloc_r+0xa0>
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	1b52      	subs	r2, r2, r5
 8006762:	d41e      	bmi.n	80067a2 <_malloc_r+0xc6>
 8006764:	2a0b      	cmp	r2, #11
 8006766:	d916      	bls.n	8006796 <_malloc_r+0xba>
 8006768:	1961      	adds	r1, r4, r5
 800676a:	42a3      	cmp	r3, r4
 800676c:	6025      	str	r5, [r4, #0]
 800676e:	bf18      	it	ne
 8006770:	6059      	strne	r1, [r3, #4]
 8006772:	6863      	ldr	r3, [r4, #4]
 8006774:	bf08      	it	eq
 8006776:	6031      	streq	r1, [r6, #0]
 8006778:	5162      	str	r2, [r4, r5]
 800677a:	604b      	str	r3, [r1, #4]
 800677c:	4638      	mov	r0, r7
 800677e:	f104 060b 	add.w	r6, r4, #11
 8006782:	f000 f865 	bl	8006850 <__malloc_unlock>
 8006786:	f026 0607 	bic.w	r6, r6, #7
 800678a:	1d23      	adds	r3, r4, #4
 800678c:	1af2      	subs	r2, r6, r3
 800678e:	d0b6      	beq.n	80066fe <_malloc_r+0x22>
 8006790:	1b9b      	subs	r3, r3, r6
 8006792:	50a3      	str	r3, [r4, r2]
 8006794:	e7b3      	b.n	80066fe <_malloc_r+0x22>
 8006796:	6862      	ldr	r2, [r4, #4]
 8006798:	42a3      	cmp	r3, r4
 800679a:	bf0c      	ite	eq
 800679c:	6032      	streq	r2, [r6, #0]
 800679e:	605a      	strne	r2, [r3, #4]
 80067a0:	e7ec      	b.n	800677c <_malloc_r+0xa0>
 80067a2:	4623      	mov	r3, r4
 80067a4:	6864      	ldr	r4, [r4, #4]
 80067a6:	e7b2      	b.n	800670e <_malloc_r+0x32>
 80067a8:	4634      	mov	r4, r6
 80067aa:	6876      	ldr	r6, [r6, #4]
 80067ac:	e7b9      	b.n	8006722 <_malloc_r+0x46>
 80067ae:	230c      	movs	r3, #12
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4638      	mov	r0, r7
 80067b4:	f000 f84c 	bl	8006850 <__malloc_unlock>
 80067b8:	e7a1      	b.n	80066fe <_malloc_r+0x22>
 80067ba:	6025      	str	r5, [r4, #0]
 80067bc:	e7de      	b.n	800677c <_malloc_r+0xa0>
 80067be:	bf00      	nop
 80067c0:	20001548 	.word	0x20001548

080067c4 <_realloc_r>:
 80067c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c8:	4680      	mov	r8, r0
 80067ca:	4614      	mov	r4, r2
 80067cc:	460e      	mov	r6, r1
 80067ce:	b921      	cbnz	r1, 80067da <_realloc_r+0x16>
 80067d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067d4:	4611      	mov	r1, r2
 80067d6:	f7ff bf81 	b.w	80066dc <_malloc_r>
 80067da:	b92a      	cbnz	r2, 80067e8 <_realloc_r+0x24>
 80067dc:	f7ff ff12 	bl	8006604 <_free_r>
 80067e0:	4625      	mov	r5, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e8:	f000 f838 	bl	800685c <_malloc_usable_size_r>
 80067ec:	4284      	cmp	r4, r0
 80067ee:	4607      	mov	r7, r0
 80067f0:	d802      	bhi.n	80067f8 <_realloc_r+0x34>
 80067f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067f6:	d812      	bhi.n	800681e <_realloc_r+0x5a>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4640      	mov	r0, r8
 80067fc:	f7ff ff6e 	bl	80066dc <_malloc_r>
 8006800:	4605      	mov	r5, r0
 8006802:	2800      	cmp	r0, #0
 8006804:	d0ed      	beq.n	80067e2 <_realloc_r+0x1e>
 8006806:	42bc      	cmp	r4, r7
 8006808:	4622      	mov	r2, r4
 800680a:	4631      	mov	r1, r6
 800680c:	bf28      	it	cs
 800680e:	463a      	movcs	r2, r7
 8006810:	f7ff fed0 	bl	80065b4 <memcpy>
 8006814:	4631      	mov	r1, r6
 8006816:	4640      	mov	r0, r8
 8006818:	f7ff fef4 	bl	8006604 <_free_r>
 800681c:	e7e1      	b.n	80067e2 <_realloc_r+0x1e>
 800681e:	4635      	mov	r5, r6
 8006820:	e7df      	b.n	80067e2 <_realloc_r+0x1e>
	...

08006824 <_sbrk_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d06      	ldr	r5, [pc, #24]	; (8006840 <_sbrk_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7ff fb1e 	bl	8005e70 <_sbrk>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_sbrk_r+0x1a>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_sbrk_r+0x1a>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20001550 	.word	0x20001550

08006844 <__malloc_lock>:
 8006844:	4801      	ldr	r0, [pc, #4]	; (800684c <__malloc_lock+0x8>)
 8006846:	f000 b811 	b.w	800686c <__retarget_lock_acquire_recursive>
 800684a:	bf00      	nop
 800684c:	20001554 	.word	0x20001554

08006850 <__malloc_unlock>:
 8006850:	4801      	ldr	r0, [pc, #4]	; (8006858 <__malloc_unlock+0x8>)
 8006852:	f000 b80c 	b.w	800686e <__retarget_lock_release_recursive>
 8006856:	bf00      	nop
 8006858:	20001554 	.word	0x20001554

0800685c <_malloc_usable_size_r>:
 800685c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006860:	1f18      	subs	r0, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	bfbc      	itt	lt
 8006866:	580b      	ldrlt	r3, [r1, r0]
 8006868:	18c0      	addlt	r0, r0, r3
 800686a:	4770      	bx	lr

0800686c <__retarget_lock_acquire_recursive>:
 800686c:	4770      	bx	lr

0800686e <__retarget_lock_release_recursive>:
 800686e:	4770      	bx	lr

08006870 <_init>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	bf00      	nop
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr

0800687c <_fini>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr
