
TouchSwitch_F103NUCLEO_V1.0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005600  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062ac  080062ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080062ac  080062ac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062ac  080062ac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062b0  080062b0  000162b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080062b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001430  20000064  08006318  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001494  08006318  00021494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb61  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004090  00000000  00000000  0003bbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003fc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00041038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011744  00000000  00000000  00042190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cf0  00000000  00000000  000538d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005808b  00000000  00000000  000655c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd64f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  000bd6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800577c 	.word	0x0800577c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	0800577c 	.word	0x0800577c

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80003ec:	2101      	movs	r1, #1
 80003ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003f2:	f000 fe89 	bl	8001108 <RCC_APB2PeriphResetCmd>

  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80003f6:	2100      	movs	r1, #0
 80003f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003fc:	f000 fe84 	bl	8001108 <RCC_APB2PeriphResetCmd>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]

  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000426:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000432:	4313      	orrs	r3, r2
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	4313      	orrs	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	60fb      	str	r3, [r7, #12]

  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <ADC_Init+0xa8>)
 800044a:	4013      	ands	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000456:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 800045c:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000464:	4313      	orrs	r3, r2
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	4313      	orrs	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	60fb      	str	r3, [r7, #12]

  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800047e:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	7d1b      	ldrb	r3, [r3, #20]
 8000484:	3b01      	subs	r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	4313      	orrs	r3, r2
 800048c:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	051b      	lsls	r3, r3, #20
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	4313      	orrs	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	c0fff7fd 	.word	0xc0fff7fd

080004b0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <ADC_CommonInit+0x48>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	60fb      	str	r3, [r7, #12]

  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <ADC_CommonInit+0x4c>)
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler |
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004d2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler |
 80004d8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 80004de:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <ADC_CommonInit+0x48>)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	6053      	str	r3, [r2, #4]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40012300 	.word	0x40012300
 80004fc:	fffc30e0 	.word	0xfffc30e0

08000500 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d006      	beq.n	8000520 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f043 0201 	orr.w	r2, r3, #1
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800051e:	e005      	b.n	800052c <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f023 0201 	bic.w	r2, r3, #1
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	4608      	mov	r0, r1
 8000542:	4611      	mov	r1, r2
 8000544:	461a      	mov	r2, r3
 8000546:	4603      	mov	r3, r0
 8000548:	70fb      	strb	r3, [r7, #3]
 800054a:	460b      	mov	r3, r1
 800054c:	70bb      	strb	r3, [r7, #2]
 800054e:	4613      	mov	r3, r2
 8000550:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	2b09      	cmp	r3, #9
 800055e:	d923      	bls.n	80005a8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000566:	78fb      	ldrb	r3, [r7, #3]
 8000568:	f1a3 020a 	sub.w	r2, r3, #10
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	2207      	movs	r2, #7
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	43db      	mvns	r3, r3
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000584:	7879      	ldrb	r1, [r7, #1]
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	f1a3 020a 	sub.w	r2, r3, #10
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4313      	orrs	r3, r2
 800059e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	e01e      	b.n	80005e6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80005ae:	78fa      	ldrb	r2, [r7, #3]
 80005b0:	4613      	mov	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4413      	add	r3, r2
 80005b6:	2207      	movs	r2, #7
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	43db      	mvns	r3, r3
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80005c8:	7879      	ldrb	r1, [r7, #1]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4613      	mov	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4313      	orrs	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80005e6:	78bb      	ldrb	r3, [r7, #2]
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d821      	bhi.n	8000630 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f0:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80005f2:	78bb      	ldrb	r3, [r7, #2]
 80005f4:	1e5a      	subs	r2, r3, #1
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	221f      	movs	r2, #31
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	60bb      	str	r3, [r7, #8]

    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	43db      	mvns	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800060e:	78f9      	ldrb	r1, [r7, #3]
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	4613      	mov	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	60bb      	str	r3, [r7, #8]

    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4313      	orrs	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;

    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800062e:	e047      	b.n	80006c0 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	2b0c      	cmp	r3, #12
 8000634:	d821      	bhi.n	800067a <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800063c:	78bb      	ldrb	r3, [r7, #2]
 800063e:	1fda      	subs	r2, r3, #7
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	221f      	movs	r2, #31
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	43db      	mvns	r3, r3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000658:	78f9      	ldrb	r1, [r7, #3]
 800065a:	78bb      	ldrb	r3, [r7, #2]
 800065c:	1fda      	subs	r2, r3, #7
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000678:	e022      	b.n	80006c0 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000680:	78bb      	ldrb	r3, [r7, #2]
 8000682:	f1a3 020d 	sub.w	r2, r3, #13
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	221f      	movs	r2, #31
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	43db      	mvns	r3, r3
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	4013      	ands	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800069e:	78f9      	ldrb	r1, [r7, #3]
 80006a0:	78bb      	ldrb	r3, [r7, #2]
 80006a2:	f1a3 020d 	sub.w	r2, r3, #13
 80006a6:	4613      	mov	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d006      	beq.n	800070c <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 800070a:	e005      	b.n	8000718 <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	609a      	str	r2, [r3, #8]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	f043 0202 	orr.w	r2, r3, #2
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 8000742:	e005      	b.n	8000750 <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f023 0202 	bic.w	r2, r3, #2
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	609a      	str	r2, [r3, #8]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	60fb      	str	r3, [r7, #12]

  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800077c:	60fb      	str	r3, [r7, #12]

  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	3b01      	subs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	035b      	lsls	r3, r3, #13
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4313      	orrs	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]

  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	605a      	str	r2, [r3, #4]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d006      	beq.n	80007c0 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 80007be:	e005      	b.n	80007cc <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	605a      	str	r2, [r3, #4]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80007f6:	e005      	b.n	8000804 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	609a      	str	r2, [r3, #8]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 800082e:	e005      	b.n	800083c <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	609a      	str	r2, [r3, #8]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f023 0201 	bic.w	r2, r3, #1
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2221      	movs	r2, #33	; 0x21
 800087e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a46      	ldr	r2, [pc, #280]	; (800099c <DMA_DeInit+0x154>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d103      	bne.n	8000890 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000888:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <DMA_DeInit+0x158>)
 800088a:	223d      	movs	r2, #61	; 0x3d
 800088c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800088e:	e07e      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <DMA_DeInit+0x15c>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d104      	bne.n	80008a2 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000898:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <DMA_DeInit+0x158>)
 800089a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800089e:	609a      	str	r2, [r3, #8]
}
 80008a0:	e075      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a40      	ldr	r2, [pc, #256]	; (80009a8 <DMA_DeInit+0x160>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d104      	bne.n	80008b4 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80008aa:	4b3d      	ldr	r3, [pc, #244]	; (80009a0 <DMA_DeInit+0x158>)
 80008ac:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80008b0:	609a      	str	r2, [r3, #8]
}
 80008b2:	e06c      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a3d      	ldr	r2, [pc, #244]	; (80009ac <DMA_DeInit+0x164>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d104      	bne.n	80008c6 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <DMA_DeInit+0x158>)
 80008be:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80008c2:	609a      	str	r2, [r3, #8]
}
 80008c4:	e063      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a39      	ldr	r2, [pc, #228]	; (80009b0 <DMA_DeInit+0x168>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d103      	bne.n	80008d6 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <DMA_DeInit+0x158>)
 80008d0:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <DMA_DeInit+0x16c>)
 80008d2:	60da      	str	r2, [r3, #12]
}
 80008d4:	e05b      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a37      	ldr	r2, [pc, #220]	; (80009b8 <DMA_DeInit+0x170>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d103      	bne.n	80008e6 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <DMA_DeInit+0x158>)
 80008e0:	4a36      	ldr	r2, [pc, #216]	; (80009bc <DMA_DeInit+0x174>)
 80008e2:	60da      	str	r2, [r3, #12]
}
 80008e4:	e053      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a35      	ldr	r2, [pc, #212]	; (80009c0 <DMA_DeInit+0x178>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d103      	bne.n	80008f6 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <DMA_DeInit+0x158>)
 80008f0:	4a34      	ldr	r2, [pc, #208]	; (80009c4 <DMA_DeInit+0x17c>)
 80008f2:	60da      	str	r2, [r3, #12]
}
 80008f4:	e04b      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a33      	ldr	r2, [pc, #204]	; (80009c8 <DMA_DeInit+0x180>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d104      	bne.n	8000908 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <DMA_DeInit+0x158>)
 8000900:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000904:	60da      	str	r2, [r3, #12]
}
 8000906:	e042      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a30      	ldr	r2, [pc, #192]	; (80009cc <DMA_DeInit+0x184>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d103      	bne.n	8000918 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <DMA_DeInit+0x188>)
 8000912:	223d      	movs	r2, #61	; 0x3d
 8000914:	609a      	str	r2, [r3, #8]
}
 8000916:	e03a      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a2e      	ldr	r2, [pc, #184]	; (80009d4 <DMA_DeInit+0x18c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d104      	bne.n	800092a <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <DMA_DeInit+0x188>)
 8000922:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000926:	609a      	str	r2, [r3, #8]
}
 8000928:	e031      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a2a      	ldr	r2, [pc, #168]	; (80009d8 <DMA_DeInit+0x190>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d104      	bne.n	800093c <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000932:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <DMA_DeInit+0x188>)
 8000934:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000938:	609a      	str	r2, [r3, #8]
}
 800093a:	e028      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <DMA_DeInit+0x194>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d104      	bne.n	800094e <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <DMA_DeInit+0x188>)
 8000946:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800094a:	609a      	str	r2, [r3, #8]
}
 800094c:	e01f      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <DMA_DeInit+0x198>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d103      	bne.n	800095e <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <DMA_DeInit+0x188>)
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <DMA_DeInit+0x16c>)
 800095a:	60da      	str	r2, [r3, #12]
}
 800095c:	e017      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a20      	ldr	r2, [pc, #128]	; (80009e4 <DMA_DeInit+0x19c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d103      	bne.n	800096e <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <DMA_DeInit+0x188>)
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <DMA_DeInit+0x174>)
 800096a:	60da      	str	r2, [r3, #12]
}
 800096c:	e00f      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <DMA_DeInit+0x1a0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d103      	bne.n	800097e <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <DMA_DeInit+0x188>)
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <DMA_DeInit+0x17c>)
 800097a:	60da      	str	r2, [r3, #12]
}
 800097c:	e007      	b.n	800098e <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <DMA_DeInit+0x1a4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d103      	bne.n	800098e <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <DMA_DeInit+0x188>)
 8000988:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800098c:	60da      	str	r2, [r3, #12]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40026010 	.word	0x40026010
 80009a0:	40026000 	.word	0x40026000
 80009a4:	40026028 	.word	0x40026028
 80009a8:	40026040 	.word	0x40026040
 80009ac:	40026058 	.word	0x40026058
 80009b0:	40026070 	.word	0x40026070
 80009b4:	2000003d 	.word	0x2000003d
 80009b8:	40026088 	.word	0x40026088
 80009bc:	20000f40 	.word	0x20000f40
 80009c0:	400260a0 	.word	0x400260a0
 80009c4:	203d0000 	.word	0x203d0000
 80009c8:	400260b8 	.word	0x400260b8
 80009cc:	40026410 	.word	0x40026410
 80009d0:	40026400 	.word	0x40026400
 80009d4:	40026428 	.word	0x40026428
 80009d8:	40026440 	.word	0x40026440
 80009dc:	40026458 	.word	0x40026458
 80009e0:	40026470 	.word	0x40026470
 80009e4:	40026488 	.word	0x40026488
 80009e8:	400264a0 	.word	0x400264a0
 80009ec:	400264b8 	.word	0x400264b8

080009f0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <DMA_Init+0xac>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a26:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a38:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a3e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a44:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f023 0307 	bic.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO:
    Set DMDIS bits according to DMA_FIFOMode value
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60da      	str	r2, [r3, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	f01c803f 	.word	0xf01c803f

08000aa0 <DMA_Cmd>:
  *        this single data is finished.
  *
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f043 0201 	orr.w	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000abe:	e005      	b.n	8000acc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 0201 	bic.w	r2, r3, #1
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	e076      	b.n	8000be2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000af4:	2201      	movs	r2, #1
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d165      	bne.n	8000bdc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2103      	movs	r1, #3
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	401a      	ands	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	791b      	ldrb	r3, [r3, #4]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	791b      	ldrb	r3, [r3, #4]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d003      	beq.n	8000b4e <GPIO_Init+0x76>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	791b      	ldrb	r3, [r3, #4]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d12e      	bne.n	8000bac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2103      	movs	r1, #3
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	795b      	ldrb	r3, [r3, #5]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	4619      	mov	r1, r3
 8000b86:	2301      	movs	r3, #1
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	7992      	ldrb	r2, [r2, #6]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	b292      	uxth	r2, r2
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	b292      	uxth	r2, r2
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2103      	movs	r1, #3
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	79db      	ldrb	r3, [r3, #7]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d985      	bls.n	8000af4 <GPIO_Init+0x1c>
    }
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	371c      	adds	r7, #28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e001      	b.n	8000c1c <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	887a      	ldrh	r2, [r7, #2]
 8000c3a:	831a      	strh	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	835a      	strh	r2, [r3, #26]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	807b      	strh	r3, [r7, #2]
 8000c72:	4613      	mov	r3, r2
 8000c74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000c76:	787b      	ldrb	r3, [r7, #1]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000c82:	e002      	b.n	8000c8a <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	835a      	strh	r2, [r3, #26]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b085      	sub	sp, #20
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	807b      	strh	r3, [r7, #2]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cae:	787a      	ldrb	r2, [r7, #1]
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	08db      	lsrs	r3, r3, #3
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	8879      	ldrh	r1, [r7, #2]
 8000ce0:	08c9      	lsrs	r1, r1, #3
 8000ce2:	b289      	uxth	r1, r1
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	ea02 0103 	and.w	r1, r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f100 0208 	add.w	r2, r0, #8
 8000cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000cf4:	887b      	ldrh	r3, [r7, #2]
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	08db      	lsrs	r3, r3, #3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3208      	adds	r2, #8
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d36:	2300      	movs	r3, #0
 8000d38:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000d3e:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <I2C_Init+0x174>)
 8000d40:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000d48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f8c9 	bl	8000eec <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <I2C_Init+0x178>)
 8000d62:	fba2 2303 	umull	r2, r3, r2, r3
 8000d66:	0c9b      	lsrs	r3, r3, #18
 8000d68:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000d6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d76:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f023 0301 	bic.w	r3, r3, #1
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <I2C_Init+0x17c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d815      	bhi.n	8000dc2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	69fa      	ldr	r2, [r7, #28]
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d801      	bhi.n	8000dae <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000daa:	2304      	movs	r3, #4
 8000dac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000dae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000db2:	4313      	orrs	r3, r2
 8000db4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000db8:	3301      	adds	r3, #1
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	841a      	strh	r2, [r3, #32]
 8000dc0:	e040      	b.n	8000e44 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	88db      	ldrh	r3, [r3, #6]
 8000dc6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d109      	bne.n	8000de2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000de0:	e00e      	b.n	8000e00 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	009a      	lsls	r2, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000e12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e22:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <I2C_Init+0x180>)
 8000e30:	fb82 1203 	smull	r1, r2, r2, r3
 8000e34:	1192      	asrs	r2, r2, #6
 8000e36:	17db      	asrs	r3, r3, #31
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e48:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000e60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e62:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000e66:	f023 0302 	bic.w	r3, r3, #2
 8000e6a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	889a      	ldrh	r2, [r3, #4]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	895b      	ldrh	r3, [r3, #10]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e82:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	899a      	ldrh	r2, [r3, #12]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	891b      	ldrh	r3, [r3, #8]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	811a      	strh	r2, [r3, #8]
}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	007a1200 	.word	0x007a1200
 8000ea0:	431bde83 	.word	0x431bde83
 8000ea4:	000186a0 	.word	0x000186a0
 8000ea8:	10624dd3 	.word	0x10624dd3

08000eac <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000ece:	e007      	b.n	8000ee0 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	f023 0301 	bic.w	r3, r3, #1
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	801a      	strh	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	2302      	movs	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d011      	beq.n	8000f40 <RCC_GetClocksFreq+0x54>
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d844      	bhi.n	8000fac <RCC_GetClocksFreq+0xc0>
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <RCC_GetClocksFreq+0x44>
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d004      	beq.n	8000f38 <RCC_GetClocksFreq+0x4c>
 8000f2e:	e03d      	b.n	8000fac <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a42      	ldr	r2, [pc, #264]	; (800103c <RCC_GetClocksFreq+0x150>)
 8000f34:	601a      	str	r2, [r3, #0]
    break;
 8000f36:	e03d      	b.n	8000fb4 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a41      	ldr	r2, [pc, #260]	; (8001040 <RCC_GetClocksFreq+0x154>)
 8000f3c:	601a      	str	r2, [r3, #0]
    break;
 8000f3e:	e039      	b.n	8000fb4 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	0d9b      	lsrs	r3, r3, #22
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f54:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00c      	beq.n	8000f76 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f5c:	4a38      	ldr	r2, [pc, #224]	; (8001040 <RCC_GetClocksFreq+0x154>)
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f64:	4a34      	ldr	r2, [pc, #208]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8000f66:	6852      	ldr	r2, [r2, #4]
 8000f68:	0992      	lsrs	r2, r2, #6
 8000f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	e00b      	b.n	8000f8e <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f76:	4a31      	ldr	r2, [pc, #196]	; (800103c <RCC_GetClocksFreq+0x150>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4a2e      	ldr	r2, [pc, #184]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8000f80:	6852      	ldr	r2, [r2, #4]
 8000f82:	0992      	lsrs	r2, r2, #6
 8000f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	0c1b      	lsrs	r3, r3, #16
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
    break;
 8000faa:	e003      	b.n	8000fb4 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <RCC_GetClocksFreq+0x150>)
 8000fb0:	601a      	str	r2, [r3, #0]
    break;
 8000fb2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fbc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000fc4:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <RCC_GetClocksFreq+0x158>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	40da      	lsrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000fe4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	0a9b      	lsrs	r3, r3, #10
 8000fea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000fec:	4a15      	ldr	r2, [pc, #84]	; (8001044 <RCC_GetClocksFreq+0x158>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	40da      	lsrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <RCC_GetClocksFreq+0x14c>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800100c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	0b5b      	lsrs	r3, r3, #13
 8001012:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <RCC_GetClocksFreq+0x158>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	40da      	lsrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	60da      	str	r2, [r3, #12]
}
 800102c:	bf00      	nop
 800102e:	3724      	adds	r7, #36	; 0x24
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800
 800103c:	00f42400 	.word	0x00f42400
 8001040:	017d7840 	.word	0x017d7840
 8001044:	20000014 	.word	0x20000014

08001048 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <RCC_AHB1PeriphClockCmd+0x3c>)
 800105c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800105e:	4909      	ldr	r1, [pc, #36]	; (8001084 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4313      	orrs	r3, r2
 8001064:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001066:	e006      	b.n	8001076 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <RCC_AHB1PeriphClockCmd+0x3c>)
 800106a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	43db      	mvns	r3, r3
 8001070:	4904      	ldr	r1, [pc, #16]	; (8001084 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001072:	4013      	ands	r3, r2
 8001074:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <RCC_APB1PeriphClockCmd+0x3c>)
 800109c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109e:	4909      	ldr	r1, [pc, #36]	; (80010c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80010a6:	e006      	b.n	80010b6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80010aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	4904      	ldr	r1, [pc, #16]	; (80010c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <RCC_APB2PeriphClockCmd+0x3c>)
 80010dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010de:	4909      	ldr	r1, [pc, #36]	; (8001104 <RCC_APB2PeriphClockCmd+0x3c>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80010e6:	e006      	b.n	80010f6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <RCC_APB2PeriphClockCmd+0x3c>)
 80010ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <RCC_APB2PeriphClockCmd+0x3c>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <RCC_APB2PeriphResetCmd+0x3c>)
 800111c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111e:	4909      	ldr	r1, [pc, #36]	; (8001144 <RCC_APB2PeriphResetCmd+0x3c>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001126:	e006      	b.n	8001136 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <RCC_APB2PeriphResetCmd+0x3c>)
 800112a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	43db      	mvns	r3, r3
 8001130:	4904      	ldr	r1, [pc, #16]	; (8001144 <RCC_APB2PeriphResetCmd+0x3c>)
 8001132:	4013      	ands	r3, r2
 8001134:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a29      	ldr	r2, [pc, #164]	; (8001204 <TIM_TimeBaseInit+0xbc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d013      	beq.n	800118c <TIM_TimeBaseInit+0x44>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a28      	ldr	r2, [pc, #160]	; (8001208 <TIM_TimeBaseInit+0xc0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00f      	beq.n	800118c <TIM_TimeBaseInit+0x44>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001172:	d00b      	beq.n	800118c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a25      	ldr	r2, [pc, #148]	; (800120c <TIM_TimeBaseInit+0xc4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <TIM_TimeBaseInit+0x44>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a24      	ldr	r2, [pc, #144]	; (8001210 <TIM_TimeBaseInit+0xc8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d003      	beq.n	800118c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <TIM_TimeBaseInit+0xcc>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d108      	bne.n	800119e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800118c:	89fb      	ldrh	r3, [r7, #14]
 800118e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001192:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	885a      	ldrh	r2, [r3, #2]
 8001198:	89fb      	ldrh	r3, [r7, #14]
 800119a:	4313      	orrs	r3, r2
 800119c:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <TIM_TimeBaseInit+0xd0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00c      	beq.n	80011c0 <TIM_TimeBaseInit+0x78>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a1c      	ldr	r2, [pc, #112]	; (800121c <TIM_TimeBaseInit+0xd4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d008      	beq.n	80011c0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80011ae:	89fb      	ldrh	r3, [r7, #14]
 80011b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	891a      	ldrh	r2, [r3, #8]
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	4313      	orrs	r3, r2
 80011be:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	89fa      	ldrh	r2, [r7, #14]
 80011c4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	881a      	ldrh	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <TIM_TimeBaseInit+0xbc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d003      	beq.n	80011e6 <TIM_TimeBaseInit+0x9e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <TIM_TimeBaseInit+0xc0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d104      	bne.n	80011f0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	7a9b      	ldrb	r3, [r3, #10]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	829a      	strh	r2, [r3, #20]
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40010000 	.word	0x40010000
 8001208:	40010400 	.word	0x40010400
 800120c:	40000400 	.word	0x40000400
 8001210:	40000800 	.word	0x40000800
 8001214:	40000c00 	.word	0x40000c00
 8001218:	40001000 	.word	0x40001000
 800121c:	40001400 	.word	0x40001400

08001220 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d008      	beq.n	8001244 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001242:	e007      	b.n	8001254 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	801a      	strh	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	817b      	strh	r3, [r7, #10]
 800126e:	2300      	movs	r3, #0
 8001270:	81fb      	strh	r3, [r7, #14]
 8001272:	2300      	movs	r3, #0
 8001274:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	8c1b      	ldrh	r3, [r3, #32]
 800127a:	b29b      	uxth	r3, r3
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	8c1b      	ldrh	r3, [r3, #32]
 800128a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	889b      	ldrh	r3, [r3, #4]
 8001290:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	8b1b      	ldrh	r3, [r3, #24]
 8001296:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001298:	897b      	ldrh	r3, [r7, #10]
 800129a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800129e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80012a0:	897b      	ldrh	r3, [r7, #10]
 80012a2:	f023 0303 	bic.w	r3, r3, #3
 80012a6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	881a      	ldrh	r2, [r3, #0]
 80012ac:	897b      	ldrh	r3, [r7, #10]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	f023 0302 	bic.w	r3, r3, #2
 80012b8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	899a      	ldrh	r2, [r3, #12]
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	885a      	ldrh	r2, [r3, #2]
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a1e      	ldr	r2, [pc, #120]	; (800134c <TIM_OC1Init+0xec>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d003      	beq.n	80012de <TIM_OC1Init+0x7e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <TIM_OC1Init+0xf0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d123      	bne.n	8001326 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	f023 0308 	bic.w	r3, r3, #8
 80012e4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	89da      	ldrh	r2, [r3, #14]
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	f023 0304 	bic.w	r3, r3, #4
 80012f6:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	889a      	ldrh	r2, [r3, #4]
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	4313      	orrs	r3, r2
 8001300:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8001302:	89bb      	ldrh	r3, [r7, #12]
 8001304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001308:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001310:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	8a1a      	ldrh	r2, [r3, #16]
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	8a5a      	ldrh	r2, [r3, #18]
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	89ba      	ldrh	r2, [r7, #12]
 800132a:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	897a      	ldrh	r2, [r7, #10]
 8001330:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	89fa      	ldrh	r2, [r7, #14]
 800133e:	841a      	strh	r2, [r3, #32]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40010000 	.word	0x40010000
 8001350:	40010400 	.word	0x40010400

08001354 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	817b      	strh	r3, [r7, #10]
 8001362:	2300      	movs	r3, #0
 8001364:	81fb      	strh	r3, [r7, #14]
 8001366:	2300      	movs	r3, #0
 8001368:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8c1b      	ldrh	r3, [r3, #32]
 800136e:	b29b      	uxth	r3, r3
 8001370:	f023 0310 	bic.w	r3, r3, #16
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	8c1b      	ldrh	r3, [r3, #32]
 800137e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	889b      	ldrh	r3, [r3, #4]
 8001384:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	8b1b      	ldrh	r3, [r3, #24]
 800138a:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001392:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001394:	897b      	ldrh	r3, [r7, #10]
 8001396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800139a:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	f023 0320 	bic.w	r3, r3, #32
 80013b0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	899b      	ldrh	r3, [r3, #12]
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	4313      	orrs	r3, r2
 80013be:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	885b      	ldrh	r3, [r3, #2]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a22      	ldr	r2, [pc, #136]	; (800145c <TIM_OC2Init+0x108>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d003      	beq.n	80013de <TIM_OC2Init+0x8a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a21      	ldr	r2, [pc, #132]	; (8001460 <TIM_OC2Init+0x10c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d12b      	bne.n	8001436 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013e4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	89db      	ldrh	r3, [r3, #14]
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013fa:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	b29a      	uxth	r2, r3
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	4313      	orrs	r3, r2
 8001408:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001410:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001412:	89bb      	ldrh	r3, [r7, #12]
 8001414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001418:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	8a1b      	ldrh	r3, [r3, #16]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	b29a      	uxth	r2, r3
 8001422:	89bb      	ldrh	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	8a5b      	ldrh	r3, [r3, #18]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	b29a      	uxth	r2, r3
 8001430:	89bb      	ldrh	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	89ba      	ldrh	r2, [r7, #12]
 800143a:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	897a      	ldrh	r2, [r7, #10]
 8001440:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	89fa      	ldrh	r2, [r7, #14]
 800144e:	841a      	strh	r2, [r3, #32]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400

08001464 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	817b      	strh	r3, [r7, #10]
 8001472:	2300      	movs	r3, #0
 8001474:	81fb      	strh	r3, [r7, #14]
 8001476:	2300      	movs	r3, #0
 8001478:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	8c1b      	ldrh	r3, [r3, #32]
 800147e:	b29b      	uxth	r3, r3
 8001480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001484:	b29a      	uxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	8c1b      	ldrh	r3, [r3, #32]
 800148e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	889b      	ldrh	r3, [r3, #4]
 8001494:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	8b9b      	ldrh	r3, [r3, #28]
 800149a:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014a2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;
 80014a4:	897b      	ldrh	r3, [r7, #10]
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014bc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	899b      	ldrh	r3, [r3, #12]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	885b      	ldrh	r3, [r3, #2]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a22      	ldr	r2, [pc, #136]	; (8001568 <TIM_OC3Init+0x104>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d003      	beq.n	80014ea <TIM_OC3Init+0x86>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <TIM_OC3Init+0x108>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014f0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	89db      	ldrh	r3, [r3, #14]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001500:	89fb      	ldrh	r3, [r7, #14]
 8001502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001506:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	889b      	ldrh	r3, [r3, #4]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b29a      	uxth	r2, r3
 8001510:	89fb      	ldrh	r3, [r7, #14]
 8001512:	4313      	orrs	r3, r2
 8001514:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8001516:	89bb      	ldrh	r3, [r7, #12]
 8001518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800151c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800151e:	89bb      	ldrh	r3, [r7, #12]
 8001520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001524:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	8a1b      	ldrh	r3, [r3, #16]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	b29a      	uxth	r2, r3
 800152e:	89bb      	ldrh	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	8a5b      	ldrh	r3, [r3, #18]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	b29a      	uxth	r2, r3
 800153c:	89bb      	ldrh	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	89ba      	ldrh	r2, [r7, #12]
 8001546:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	897a      	ldrh	r2, [r7, #10]
 800154c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	89fa      	ldrh	r2, [r7, #14]
 800155a:	841a      	strh	r2, [r3, #32]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40010000 	.word	0x40010000
 800156c:	40010400 	.word	0x40010400

08001570 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	81bb      	strh	r3, [r7, #12]
 800157e:	2300      	movs	r3, #0
 8001580:	817b      	strh	r3, [r7, #10]
 8001582:	2300      	movs	r3, #0
 8001584:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	8c1b      	ldrh	r3, [r3, #32]
 800158a:	b29b      	uxth	r3, r3
 800158c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001590:	b29a      	uxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8c1b      	ldrh	r3, [r3, #32]
 800159a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	889b      	ldrh	r3, [r3, #4]
 80015a0:	81fb      	strh	r3, [r7, #14]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	8b9b      	ldrh	r3, [r3, #28]
 80015a6:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80015a8:	89bb      	ldrh	r3, [r7, #12]
 80015aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015ae:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80015b0:	89bb      	ldrh	r3, [r7, #12]
 80015b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015b6:	81bb      	strh	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	89bb      	ldrh	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80015c6:	897b      	ldrh	r3, [r7, #10]
 80015c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015cc:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	899b      	ldrh	r3, [r3, #12]
 80015d2:	031b      	lsls	r3, r3, #12
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	897b      	ldrh	r3, [r7, #10]
 80015d8:	4313      	orrs	r3, r2
 80015da:	817b      	strh	r3, [r7, #10]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	885b      	ldrh	r3, [r3, #2]
 80015e0:	031b      	lsls	r3, r3, #12
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	817b      	strh	r3, [r7, #10]

  if((TIMx == TIM1) || (TIMx == TIM8))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <TIM_OC4Init+0xc8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d003      	beq.n	80015fa <TIM_OC4Init+0x8a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <TIM_OC4Init+0xcc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10a      	bne.n	8001610 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001600:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	8a1b      	ldrh	r3, [r3, #16]
 8001606:	019b      	lsls	r3, r3, #6
 8001608:	b29a      	uxth	r2, r3
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	4313      	orrs	r3, r2
 800160e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	89fa      	ldrh	r2, [r7, #14]
 8001614:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	89ba      	ldrh	r2, [r7, #12]
 800161a:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	897a      	ldrh	r2, [r7, #10]
 8001628:	841a      	strh	r2, [r3, #32]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40010000 	.word	0x40010000
 800163c:	40010400 	.word	0x40010400

08001640 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }
}
 80016da:	e009      	b.n	80016f0 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	889b      	ldrh	r3, [r3, #4]
 8001708:	b29b      	uxth	r3, r3
 800170a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800170e:	b29b      	uxth	r3, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b2db      	uxtb	r3, r3
 8001740:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800174a:	2201      	movs	r2, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	899b      	ldrh	r3, [r3, #12]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	4013      	ands	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e011      	b.n	800178e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d107      	bne.n	8001780 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	8a1b      	ldrh	r3, [r3, #16]
 8001774:	b29b      	uxth	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4013      	ands	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e006      	b.n	800178e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	8a9b      	ldrh	r3, [r3, #20]
 8001784:	b29b      	uxth	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4013      	ands	r3, r2
 800178c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	b29b      	uxth	r3, r3
 8001794:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001796:	2201      	movs	r2, #1
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <USART_GetITStatus+0xa4>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80017ba:	2301      	movs	r3, #1
 80017bc:	74fb      	strb	r3, [r7, #19]
 80017be:	e001      	b.n	80017c4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80017c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	81fb      	strh	r3, [r7, #14]
 80017e2:	2300      	movs	r3, #0
 80017e4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80017ec:	89fb      	ldrh	r3, [r7, #14]
 80017ee:	2201      	movs	r2, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80017f6:	89bb      	ldrh	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	801a      	strh	r2, [r3, #0]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 8001812:	f000 f9b1 	bl	8001b78 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8001816:	2300      	movs	r3, #0
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	e036      	b.n	800188a <Button_Init+0x7e>
		kpad[i].index = i;
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	4924      	ldr	r1, [pc, #144]	; (80018b0 <Button_Init+0xa4>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	330a      	adds	r3, #10
 800182c:	79fa      	ldrb	r2, [r7, #7]
 800182e:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 8001830:	79fa      	ldrb	r2, [r7, #7]
 8001832:	491f      	ldr	r1, [pc, #124]	; (80018b0 <Button_Init+0xa4>)
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3310      	adds	r3, #16
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <Button_Init+0xa8>)
 8001842:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <Button_Init+0xac>)
 8001848:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	491a      	ldr	r1, [pc, #104]	; (80018b8 <Button_Init+0xac>)
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	889b      	ldrh	r3, [r3, #4]
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f7ff f9cc 	bl	8000bf6 <GPIO_ReadInputDataBit>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <Button_Init+0xac>)
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	799b      	ldrb	r3, [r3, #6]
 800186c:	4299      	cmp	r1, r3
 800186e:	d109      	bne.n	8001884 <Button_Init+0x78>
			kpad[i].sold = PIN_ACTIVE;
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	490f      	ldr	r1, [pc, #60]	; (80018b0 <Button_Init+0xa4>)
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	3309      	adds	r3, #9
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	3301      	adds	r3, #1
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d9c5      	bls.n	800181c <Button_Init+0x10>
		}
	}

    idTaskScanButton = TimerStart("", KEY_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScan, NULL);
 8001890:	2300      	movs	r3, #0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <Button_Init+0xb0>)
 8001896:	22ff      	movs	r2, #255	; 0xff
 8001898:	2105      	movs	r1, #5
 800189a:	4809      	ldr	r0, [pc, #36]	; (80018c0 <Button_Init+0xb4>)
 800189c:	f000 fe70 	bl	8002580 <TimerStart>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <Button_Init+0xb8>)
 80018a6:	701a      	strb	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000080 	.word	0x20000080
 80018b4:	0800192d 	.word	0x0800192d
 80018b8:	20000024 	.word	0x20000024
 80018bc:	08001b2d 	.word	0x08001b2d
 80018c0:	08005794 	.word	0x08005794
 80018c4:	20000054 	.word	0x20000054

080018c8 <Button_SetMode>:
 */
void
Button_SetMode(
    uint8_t id,
    uint8_t mode
) {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
    if (id >= BUTTON_MAX) return;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d80a      	bhi.n	80018f4 <Button_SetMode+0x2c>
    kpad[id].mode = mode;
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <Button_SetMode+0x38>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	330b      	adds	r3, #11
 80018ee:	79ba      	ldrb	r2, [r7, #6]
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <Button_SetMode+0x2e>
    if (id >= BUTTON_MAX) return;
 80018f4:	bf00      	nop
}
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	20000080 	.word	0x20000080

08001904 <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_t buttonEvent,
    button_event_callback procbuttonEvent
) {
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
    pEventCallbacks[buttonEvent] = procbuttonEvent;
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4905      	ldr	r1, [pc, #20]	; (8001928 <Button_RegisterEventCallback+0x24>)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	200000f8 	.word	0x200000f8

0800192c <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	7a9b      	ldrb	r3, [r3, #10]
 800193c:	72fb      	strb	r3, [r7, #11]
    
    if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	4a78      	ldr	r2, [pc, #480]	; (8001b24 <ButtonScanTypeEdge+0x1f8>)
 8001942:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	4976      	ldr	r1, [pc, #472]	; (8001b24 <ButtonScanTypeEdge+0x1f8>)
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	889b      	ldrh	r3, [r3, #4]
 8001950:	4619      	mov	r1, r3
 8001952:	4610      	mov	r0, r2
 8001954:	f7ff f94f 	bl	8000bf6 <GPIO_ReadInputDataBit>
 8001958:	4603      	mov	r3, r0
 800195a:	4619      	mov	r1, r3
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	4a71      	ldr	r2, [pc, #452]	; (8001b24 <ButtonScanTypeEdge+0x1f8>)
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	799b      	ldrb	r3, [r3, #6]
 8001966:	4299      	cmp	r1, r3
 8001968:	d10a      	bne.n	8001980 <ButtonScanTypeEdge+0x54>
        if (bt->countActive != 0xFFU) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	7b5b      	ldrb	r3, [r3, #13]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d013      	beq.n	800199a <ButtonScanTypeEdge+0x6e>
            bt->countActive++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	7b5b      	ldrb	r3, [r3, #13]
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	735a      	strb	r2, [r3, #13]
 800197e:	e00c      	b.n	800199a <ButtonScanTypeEdge+0x6e>
        }
    }
    else {
        if (bt->countInactive != 0xFFU) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	7b1b      	ldrb	r3, [r3, #12]
 8001984:	2bff      	cmp	r3, #255	; 0xff
 8001986:	d005      	beq.n	8001994 <ButtonScanTypeEdge+0x68>
            bt->countInactive++;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	7b1b      	ldrb	r3, [r3, #12]
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	731a      	strb	r2, [r3, #12]
        }
        
        bt->countActive = 0;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	735a      	strb	r2, [r3, #13]
    }
    
    if (bt->countInactive >= KEY_COUNT_IS_PRESS) {
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	7b1b      	ldrb	r3, [r3, #12]
 800199e:	2b09      	cmp	r3, #9
 80019a0:	d958      	bls.n	8001a54 <ButtonScanTypeEdge+0x128>
        if (bt->sold == PIN_ACTIVE) {
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	7a5b      	ldrb	r3, [r3, #9]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d118      	bne.n	80019dc <ButtonScanTypeEdge+0xb0>
            bt->sold = PIN_UNACTIVE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <ButtonScanTypeEdge+0xa4>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	7adb      	ldrb	r3, [r3, #11]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <ButtonScanTypeEdge+0xa4>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	7afa      	ldrb	r2, [r7, #11]
 80019ca:	2101      	movs	r1, #1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4798      	blx	r3
            }
            
            bt->time = bt->countInactive;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
 80019d4:	461a      	mov	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e03b      	b.n	8001a54 <ButtonScanTypeEdge+0x128>
        } else {
            bt->time++;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_BW2PRESS) {
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b4f      	cmp	r3, #79	; 0x4f
 80019ec:	d932      	bls.n	8001a54 <ButtonScanTypeEdge+0x128>
                if (bt->holdCnt != 0) {
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d012      	beq.n	8001a1c <ButtonScanTypeEdge+0xf0>
                    if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC)) {
 80019f6:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d024      	beq.n	8001a48 <ButtonScanTypeEdge+0x11c>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	7adb      	ldrb	r3, [r3, #11]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01e      	beq.n	8001a48 <ButtonScanTypeEdge+0x11c>
                        pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	6852      	ldr	r2, [r2, #4]
 8001a12:	b291      	uxth	r1, r2
 8001a14:	7afa      	ldrb	r2, [r7, #11]
 8001a16:	4610      	mov	r0, r2
 8001a18:	4798      	blx	r3
 8001a1a:	e015      	b.n	8001a48 <ButtonScanTypeEdge+0x11c>
                    }
                }
                else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC) \
 8001a1c:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d011      	beq.n	8001a48 <ButtonScanTypeEdge+0x11c>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	7adb      	ldrb	r3, [r3, #11]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <ButtonScanTypeEdge+0x11c>
                         && bt->pressCnt != 0) 
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	7a1b      	ldrb	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <ButtonScanTypeEdge+0x11c>
                {
                    pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	7a12      	ldrb	r2, [r2, #8]
 8001a40:	b291      	uxth	r1, r2
 8001a42:	7afa      	ldrb	r2, [r7, #11]
 8001a44:	4610      	mov	r0, r2
 8001a46:	4798      	blx	r3
                }
                
                bt->holdCnt = 0;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
                bt->pressCnt = 0;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	721a      	strb	r2, [r3, #8]
            }
        }
    }
    
    if (bt->countActive >= KEY_COUNT_IS_PRESS) {
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	7b5b      	ldrb	r3, [r3, #13]
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d95e      	bls.n	8001b1a <ButtonScanTypeEdge+0x1ee>
        /* reset count inactive */
        bt->countInactive = 0; 
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	731a      	strb	r2, [r3, #12]
        
        if (bt->sold == PIN_UNACTIVE) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	7a5b      	ldrb	r3, [r3, #9]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d11e      	bne.n	8001aa8 <ButtonScanTypeEdge+0x17c>
            bt->sold = PIN_ACTIVE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00b      	beq.n	8001a90 <ButtonScanTypeEdge+0x164>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	7adb      	ldrb	r3, [r3, #11]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <ButtonScanTypeEdge+0x164>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	7afa      	ldrb	r2, [r7, #11]
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4798      	blx	r3
            }
            
            bt->time = bt->countActive;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	7b5b      	ldrb	r3, [r3, #13]
 8001a94:	461a      	mov	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	601a      	str	r2, [r3, #0]
            bt->pressCnt++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	7a1b      	ldrb	r3, [r3, #8]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	721a      	strb	r2, [r3, #8]
                    }
                }
            }
        }
    }
}
 8001aa6:	e038      	b.n	8001b1a <ButtonScanTypeEdge+0x1ee>
            bt->time++;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_IS_HOLD) {
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b77      	cmp	r3, #119	; 0x77
 8001ab8:	d92f      	bls.n	8001b1a <ButtonScanTypeEdge+0x1ee>
                bt->pressCnt = 0;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	721a      	strb	r2, [r3, #8]
                bt->holdCnt = bt->time;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	605a      	str	r2, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b78      	cmp	r3, #120	; 0x78
 8001ace:	d012      	beq.n	8001af6 <ButtonScanTypeEdge+0x1ca>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2bc8      	cmp	r3, #200	; 0xc8
 8001ad6:	d00e      	beq.n	8001af6 <ButtonScanTypeEdge+0x1ca>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001ae0:	d009      	beq.n	8001af6 <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8001ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aea:	d004      	beq.n	8001af6 <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001af4:	d111      	bne.n	8001b1a <ButtonScanTypeEdge+0x1ee>
                    if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_TYPE_LOGIC)) {
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <ButtonScanTypeEdge+0x1ee>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	7adb      	ldrb	r3, [r3, #11]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <ButtonScanTypeEdge+0x1ee>
                        pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <ButtonScanTypeEdge+0x1fc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6852      	ldr	r2, [r2, #4]
 8001b12:	b291      	uxth	r1, r2
 8001b14:	7afa      	ldrb	r2, [r7, #11]
 8001b16:	4610      	mov	r0, r2
 8001b18:	4798      	blx	r3
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000024 	.word	0x20000024
 8001b28:	200000f8 	.word	0x200000f8

08001b2c <ButtonScan>:
 * @retval None
 */
void
ButtonScan(
    void *arg
) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e014      	b.n	8001b64 <ButtonScan+0x38>
        kpad[i].scanBtnFunc(&kpad[i]);
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	490d      	ldr	r1, [pc, #52]	; (8001b74 <ButtonScan+0x48>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3310      	adds	r3, #16
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <ButtonScan+0x48>)
 8001b58:	4413      	add	r3, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4788      	blx	r1
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	3301      	adds	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d9e7      	bls.n	8001b3a <ButtonScan+0xe>
    }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000080 	.word	0x20000080

08001b78 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff fa61 	bl	8001048 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff fa5d 	bl	8001048 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2004      	movs	r0, #4
 8001b92:	f7ff fa59 	bl	8001048 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001b96:	2300      	movs	r3, #0
 8001b98:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8001ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4619      	mov	r1, r3
 8001bac:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <BTNGPIO_Init+0x60>)
 8001bae:	f7fe ff93 	bl	8000ad8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8001bb2:	2339      	movs	r3, #57	; 0x39
 8001bb4:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4808      	ldr	r0, [pc, #32]	; (8001bdc <BTNGPIO_Init+0x64>)
 8001bbc:	f7fe ff8c 	bl	8000ad8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <BTNGPIO_Init+0x68>)
 8001bca:	f7fe ff85 	bl	8000ad8 <GPIO_Init>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020000 	.word	0x40020000

08001be4 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 8001be8:	4915      	ldr	r1, [pc, #84]	; (8001c40 <EventButton_Init+0x5c>)
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff fe8a 	bl	8001904 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 8001bf0:	4914      	ldr	r1, [pc, #80]	; (8001c44 <EventButton_Init+0x60>)
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fe86 	bl	8001904 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 8001bf8:	4913      	ldr	r1, [pc, #76]	; (8001c48 <EventButton_Init+0x64>)
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f7ff fe82 	bl	8001904 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 8001c00:	4912      	ldr	r1, [pc, #72]	; (8001c4c <EventButton_Init+0x68>)
 8001c02:	2003      	movs	r0, #3
 8001c04:	f7ff fe7e 	bl	8001904 <Button_RegisterEventCallback>
    
    /* Init mode of buttons */
    Button_SetMode(BUTTON_BOARD_ID, BUTTON_TYPE_LOGIC);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fe5c 	bl	80018c8 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID1, BUTTON_TYPE_LOGIC);
 8001c10:	2101      	movs	r1, #1
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff fe58 	bl	80018c8 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID2, BUTTON_TYPE_LOGIC);
 8001c18:	2101      	movs	r1, #1
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f7ff fe54 	bl	80018c8 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID3, BUTTON_TYPE_LOGIC);
 8001c20:	2101      	movs	r1, #1
 8001c22:	2003      	movs	r0, #3
 8001c24:	f7ff fe50 	bl	80018c8 <Button_SetMode>
	Button_SetMode(BUTTON_KIT_ID4, BUTTON_TYPE_LOGIC);
 8001c28:	2101      	movs	r1, #1
 8001c2a:	2004      	movs	r0, #4
 8001c2c:	f7ff fe4c 	bl	80018c8 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID5, BUTTON_TYPE_LOGIC);
 8001c30:	2101      	movs	r1, #1
 8001c32:	2005      	movs	r0, #5
 8001c34:	f7ff fe48 	bl	80018c8 <Button_SetMode>

    Button_Init();
 8001c38:	f7ff fde8 	bl	800180c <Button_Init>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001c85 	.word	0x08001c85
 8001c48:	08001ccd 	.word	0x08001ccd
 8001c4c:	08001d2b 	.word	0x08001d2b

08001c50 <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	460a      	mov	r2, r1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 8001c60:	88bb      	ldrh	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <ButtonProcessEventEdge+0x1e>
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_RISING + btnID;
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	3306      	adds	r3, #6
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e002      	b.n	8001c74 <ButtonProcessEventEdge+0x24>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_FALLING + btnID;
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	330c      	adds	r3, #12
 8001c72:	73fb      	strb	r3, [r7, #15]
    }

    EventSchedulerAdd(event);
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fbe2 	bl	8002440 <EventSchedulerAdd>
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t time
) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == 1)
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <ButtonProcessEventPress+0x1c>
	{
		event = EVENT_OF_BUTTON_0_PRESS_LOGIC + btnID;
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e00c      	b.n	8001cba <ButtonProcessEventPress+0x36>
	}
	else if (time == 2)
 8001ca0:	88bb      	ldrh	r3, [r7, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d103      	bne.n	8001cae <ButtonProcessEventPress+0x2a>
	{
		event = EVENT_OF_BUTTON_0_PRESS_2_TIMES + btnID;
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	3312      	adds	r3, #18
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e005      	b.n	8001cba <ButtonProcessEventPress+0x36>
	}
	else if (time == 5)
 8001cae:	88bb      	ldrh	r3, [r7, #4]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d107      	bne.n	8001cc4 <ButtonProcessEventPress+0x40>
	{
		event = EVENT_OF_BUTTON_0_PRESS_5_TIMES + btnID;
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	3318      	adds	r3, #24
 8001cb8:	73fb      	strb	r3, [r7, #15]
	}
	else return;

    EventSchedulerAdd(event);
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fbbf 	bl	8002440 <EventSchedulerAdd>
 8001cc2:	e000      	b.n	8001cc6 <ButtonProcessEventPress+0x42>
	else return;
 8001cc4:	bf00      	nop
}
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	71fb      	strb	r3, [r7, #7]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 8001cdc:	88bb      	ldrh	r3, [r7, #4]
 8001cde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ce2:	d103      	bne.n	8001cec <ButtonProcessEventHold+0x20>
	{
		event = EVENT_OF_BUTTON_0_HOLD_10S + btnID;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	3330      	adds	r3, #48	; 0x30
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e015      	b.n	8001d18 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD5S)
 8001cec:	88bb      	ldrh	r3, [r7, #4]
 8001cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cf2:	d103      	bne.n	8001cfc <ButtonProcessEventHold+0x30>
	{
		event = EVENT_OF_BUTTON_0_HOLD_5S + btnID;
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	332a      	adds	r3, #42	; 0x2a
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e00d      	b.n	8001d18 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD3S)
 8001cfc:	88bb      	ldrh	r3, [r7, #4]
 8001cfe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d02:	d103      	bne.n	8001d0c <ButtonProcessEventHold+0x40>
	{
		event = EVENT_OF_BUTTON_0_HOLD_3S + btnID;
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	3324      	adds	r3, #36	; 0x24
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	e005      	b.n	8001d18 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD1S)
 8001d0c:	88bb      	ldrh	r3, [r7, #4]
 8001d0e:	2bc8      	cmp	r3, #200	; 0xc8
 8001d10:	d107      	bne.n	8001d22 <ButtonProcessEventHold+0x56>
	{
		event = EVENT_OF_BUTTON_0_HOLD_1S + btnID;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	331e      	adds	r3, #30
 8001d16:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fb90 	bl	8002440 <EventSchedulerAdd>
 8001d20:	e000      	b.n	8001d24 <ButtonProcessEventHold+0x58>
	else return;
 8001d22:	bf00      	nop
}
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	460a      	mov	r2, r1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8001d3a:	88bb      	ldrh	r3, [r7, #4]
 8001d3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d40:	d303      	bcc.n	8001d4a <ButtonProcessEventRelease+0x20>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_10S + btnID;
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	3348      	adds	r3, #72	; 0x48
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e015      	b.n	8001d76 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD5S)
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d50:	d303      	bcc.n	8001d5a <ButtonProcessEventRelease+0x30>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_5S + btnID;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	3342      	adds	r3, #66	; 0x42
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e00d      	b.n	8001d76 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD3S)
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d60:	d303      	bcc.n	8001d6a <ButtonProcessEventRelease+0x40>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_3S + btnID;
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	333c      	adds	r3, #60	; 0x3c
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e005      	b.n	8001d76 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD1S)
 8001d6a:	88bb      	ldrh	r3, [r7, #4]
 8001d6c:	2bc7      	cmp	r3, #199	; 0xc7
 8001d6e:	d907      	bls.n	8001d80 <ButtonProcessEventRelease+0x56>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_1S + btnID;
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	3336      	adds	r3, #54	; 0x36
 8001d74:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fb61 	bl	8002440 <EventSchedulerAdd>
 8001d7e:	e000      	b.n	8001d82 <ButtonProcessEventRelease+0x58>
	else return;
 8001d80:	bf00      	nop
}
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <BuzzerControl_Init>:
 * @brief  Initialize module buzzer
 * @param  None
 * @retval None
 */
void
BuzzerControl_Init(void) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	BUZZTIM_InitTimer(0, 32, 5000);
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	2120      	movs	r1, #32
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 f8a6 	bl	8001ee4 <BUZZTIM_InitTimer>
	BUZZTIM_InitPWMChannel(pinBuzz);
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <BuzzerControl_Init+0x24>)
 8001d9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d9e:	f000 f8c9 	bl	8001f34 <BUZZTIM_InitPWMChannel>
    bBuzzInit = 1;
 8001da2:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <BuzzerControl_Init+0x28>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	08005938 	.word	0x08005938
 8001db0:	20000108 	.word	0x20000108

08001db4 <BuzzOff>:
 * @retval None
 */
static void
BuzzOff(
    void *arg
) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    idBuzz = NO_TIMER;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <BuzzOff+0x54>)
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	701a      	strb	r2, [r3, #0]
    gpToneList++;  /* Next Element */
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <BuzzOff+0x58>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <BuzzOff+0x58>)
 8001dca:	6013      	str	r3, [r2, #0]
    if ((gpToneList->freq == 0) && (gpToneList->duration == 0)) {
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <BuzzOff+0x58>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <BuzzOff+0x34>
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <BuzzOff+0x58>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <BuzzOff+0x34>
    	BuzzerControl_SetDutyCycle(0);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 f8ef 	bl	8001fc4 <BuzzerControl_SetDutyCycle>
 8001de6:	e00a      	b.n	8001dfe <BuzzOff+0x4a>
    }
    else {
        BuzzPlay(gpToneList->freq, gpToneList->duration);
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <BuzzOff+0x58>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	881a      	ldrh	r2, [r3, #0]
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <BuzzOff+0x58>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	885b      	ldrh	r3, [r3, #2]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f000 f80a 	bl	8001e10 <BuzzPlay>
    }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000055 	.word	0x20000055
 8001e0c:	2000010c 	.word	0x2000010c

08001e10 <BuzzPlay>:
 */
static void
BuzzPlay(
    uint16_t freq,
	uint16_t duration
) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	4603      	mov	r3, r0
 8001e18:	460a      	mov	r2, r1
 8001e1a:	80fb      	strh	r3, [r7, #6]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	80bb      	strh	r3, [r7, #4]
    if (freq == 0) {
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <BuzzPlay+0x1e>
    	BuzzerControl_SetDutyCycle(0);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f8cc 	bl	8001fc4 <BuzzerControl_SetDutyCycle>
 8001e2c:	e017      	b.n	8001e5e <BuzzPlay+0x4e>
    }
    else if (freq == 0xFFFFU) {
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d107      	bne.n	8001e48 <BuzzPlay+0x38>
    	BuzzerControl_SetPreriod(5000);
 8001e38:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e3c:	f000 f8e0 	bl	8002000 <BuzzerControl_SetPreriod>
    	BuzzerControl_SetDutyCycle(101);
 8001e40:	2065      	movs	r0, #101	; 0x65
 8001e42:	f000 f8bf 	bl	8001fc4 <BuzzerControl_SetDutyCycle>
 8001e46:	e00a      	b.n	8001e5e <BuzzPlay+0x4e>
    }
    else {
        uint32_t period = 750000 / freq;
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <BuzzPlay+0x88>)
 8001e4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e50:	60fb      	str	r3, [r7, #12]
        BuzzerControl_SetPreriod(period);
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f8d4 	bl	8002000 <BuzzerControl_SetPreriod>
        BuzzerControl_SetDutyCycle(5);
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f000 f8b3 	bl	8001fc4 <BuzzerControl_SetDutyCycle>
    }

    if (idBuzz != NO_TIMER) {
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <BuzzPlay+0x8c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2bff      	cmp	r3, #255	; 0xff
 8001e64:	d007      	beq.n	8001e76 <BuzzPlay+0x66>
        TimerStop(idBuzz);
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <BuzzPlay+0x8c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fbea 	bl	8002644 <TimerStop>
        idBuzz = NO_TIMER;
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <BuzzPlay+0x8c>)
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	701a      	strb	r2, [r3, #0]
    }

    idBuzz = TimerStart("buzz", duration, TIMER_REPEAT_ONE_TIME, BuzzOff, NULL);
 8001e76:	88b9      	ldrh	r1, [r7, #4]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <BuzzPlay+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <BuzzPlay+0x94>)
 8001e82:	f000 fb7d 	bl	8002580 <TimerStart>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <BuzzPlay+0x8c>)
 8001e8c:	701a      	strb	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	000b71b0 	.word	0x000b71b0
 8001e9c:	20000055 	.word	0x20000055
 8001ea0:	08001db5 	.word	0x08001db5
 8001ea4:	08005798 	.word	0x08005798

08001ea8 <BuzzerControl_SetMelody>:
 * @retval None
 */
void 
BuzzerControl_SetMelody(
    tone_p pListTone   
) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    if (!bBuzzInit) return;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <BuzzerControl_SetMelody+0x34>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <BuzzerControl_SetMelody+0x2c>
    gpToneList = pListTone;
 8001eb8:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <BuzzerControl_SetMelody+0x38>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
    BuzzPlay(gpToneList->freq, gpToneList->duration); 
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <BuzzerControl_SetMelody+0x38>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	881a      	ldrh	r2, [r3, #0]
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <BuzzerControl_SetMelody+0x38>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	885b      	ldrh	r3, [r3, #2]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f7ff ff9f 	bl	8001e10 <BuzzPlay>
 8001ed2:	e000      	b.n	8001ed6 <BuzzerControl_SetMelody+0x2e>
    if (!bBuzzInit) return;
 8001ed4:	bf00      	nop
}
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000108 	.word	0x20000108
 8001ee0:	2000010c 	.word	0x2000010c

08001ee4 <BUZZTIM_InitTimer>:
static void
BUZZTIM_InitTimer(
    uint8_t timidx,
	uint32_t prescale,
	uint32_t period
) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	73fb      	strb	r3, [r7, #15]
    TIM_TimeBaseInitTypeDef TimeBaseStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff f8c7 	bl	8001088 <RCC_APB1PeriphClockCmd>

    /* NOT For TIM 1 & TIM8 */
    TimeBaseStructure.TIM_Prescaler = prescale - 1;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	82bb      	strh	r3, [r7, #20]
    TimeBaseStructure.TIM_Period = period - 1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	61bb      	str	r3, [r7, #24]
    TimeBaseStructure.TIM_ClockDivision = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	83bb      	strh	r3, [r7, #28]
    TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseInit(TIM3, &TimeBaseStructure);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <BUZZTIM_InitTimer+0x4c>)
 8001f1a:	f7ff f915 	bl	8001148 <TIM_TimeBaseInit>

    TIM_Cmd(TIM3, ENABLE);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <BUZZTIM_InitTimer+0x4c>)
 8001f22:	f7ff f97d 	bl	8001220 <TIM_Cmd>
}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40000400 	.word	0x40000400

08001f34 <BUZZTIM_InitPWMChannel>:
 * @retval None
 */
static void
BUZZTIM_InitPWMChannel(
    pwmPin pin
) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	e883 0003 	stmia.w	r3, {r0, r1}
    GPIO_InitTypeDef GPIO_InitStructure;
    TIM_OCInitTypeDef TIM_OCInitStructure;

    /* GPIO Peripheral clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001f40:	2101      	movs	r1, #1
 8001f42:	2004      	movs	r0, #4
 8001f44:	f7ff f880 	bl	8001048 <RCC_AHB1PeriphClockCmd>

    /* Configure pin in output push-pull mode */
    GPIO_InitStructure.GPIO_Pin = BUZZER_PIN;
 8001f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001f54:	2302      	movs	r3, #2
 8001f56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    GPIO_Init(BUZZER_PORT, &GPIO_InitStructure);
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4813      	ldr	r0, [pc, #76]	; (8001fbc <BUZZTIM_InitPWMChannel+0x88>)
 8001f6e:	f7fe fdb3 	bl	8000ad8 <GPIO_Init>

    GPIO_PinAFConfig(BUZZER_PORT, GPIO_PinSource9, GPIO_AF_TIM3);
 8001f72:	2202      	movs	r2, #2
 8001f74:	2109      	movs	r1, #9
 8001f76:	4811      	ldr	r0, [pc, #68]	; (8001fbc <BUZZTIM_InitPWMChannel+0x88>)
 8001f78:	f7fe fe8d 	bl	8000c96 <GPIO_PinAFConfig>

    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; /* PWM1 Mode */
 8001f7c:	2360      	movs	r3, #96	; 0x60
 8001f7e:	81bb      	strh	r3, [r7, #12]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001f80:	2301      	movs	r3, #1
 8001f82:	81fb      	strh	r3, [r7, #14]
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8001f84:	2304      	movs	r3, #4
 8001f86:	823b      	strh	r3, [r7, #16]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	833b      	strh	r3, [r7, #24]
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	837b      	strh	r3, [r7, #26]
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8001f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f94:	83bb      	strh	r3, [r7, #28]
    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8001f96:	2300      	movs	r3, #0
 8001f98:	83fb      	strh	r3, [r7, #30]
    TIM_OCInitStructure.TIM_Pulse = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]

    TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <BUZZTIM_InitPWMChannel+0x8c>)
 8001fa6:	f7ff fae3 	bl	8001570 <TIM_OC4Init>

    TIM_CtrlPWMOutputs(TIM3, ENABLE);
 8001faa:	2101      	movs	r1, #1
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <BUZZTIM_InitPWMChannel+0x8c>)
 8001fae:	f7ff fb7f 	bl	80016b0 <TIM_CtrlPWMOutputs>
}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40000400 	.word	0x40000400

08001fc4 <BuzzerControl_SetDutyCycle>:
 * @retval None
 */
void
BuzzerControl_SetDutyCycle(
    uint8_t dutycycle
) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
	uint32_t val;
    uint32_t maxval;

    maxval = TIM3->ARR;
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <BuzzerControl_SetDutyCycle+0x34>)
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	60fb      	str	r3, [r7, #12]
    val = dutycycle * maxval / 100;
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <BuzzerControl_SetDutyCycle+0x38>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	60bb      	str	r3, [r7, #8]

	TIM_SetCompare4(TIM3, val);
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <BuzzerControl_SetDutyCycle+0x34>)
 8001fea:	f7ff fb53 	bl	8001694 <TIM_SetCompare4>
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	51eb851f 	.word	0x51eb851f

08002000 <BuzzerControl_SetPreriod>:
 * @retval None
 */
void
BuzzerControl_SetPreriod(
	uint32_t period
) {
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    TIM3->ARR = period - 1;
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <BuzzerControl_SetPreriod+0x1c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3b01      	subs	r3, #1
 800200e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40000400 	.word	0x40000400

08002020 <LedControl_Init>:
 * @brief  Initializes module led
 * @param  None
 * @retval None
 */
void
LedControl_Init(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	// Initialize pins GPIO led
	LEDGPIO_Config();
 8002024:	f000 f930 	bl	8002288 <LEDGPIO_Config>

	// Initialize TIMER led
	LEDTIM_Config();
 8002028:	f000 f978 	bl	800231c <LEDTIM_Config>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <LedControl_SetColorIndividual>:
void
LedControl_SetColorIndividual(
	uint8_t led_id,
	led_color_t led_color,
	uint8_t led_level
) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
	uint32_t channelPulse;

    if ((led_id >= NUM_OF_LED) || !isTypeLED(led_color) || (led_level > 100))
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d85e      	bhi.n	8002106 <LedControl_SetColorIndividual+0xd6>
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <LedControl_SetColorIndividual+0x2a>
 800204e:	79bb      	ldrb	r3, [r7, #6]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d002      	beq.n	800205a <LedControl_SetColorIndividual+0x2a>
 8002054:	79bb      	ldrb	r3, [r7, #6]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d155      	bne.n	8002106 <LedControl_SetColorIndividual+0xd6>
 800205a:	797b      	ldrb	r3, [r7, #5]
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d852      	bhi.n	8002106 <LedControl_SetColorIndividual+0xd6>
        return;
    
    // Get brightness current
    if (led_level == 0)
 8002060:	797b      	ldrb	r3, [r7, #5]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d103      	bne.n	800206e <LedControl_SetColorIndividual+0x3e>
    {
    	g_brightnessLed = 100;
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <LedControl_SetColorIndividual+0xe0>)
 8002068:	2264      	movs	r2, #100	; 0x64
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e002      	b.n	8002074 <LedControl_SetColorIndividual+0x44>
    }
    else
    {
    	g_brightnessLed = led_level;
 800206e:	4a28      	ldr	r2, [pc, #160]	; (8002110 <LedControl_SetColorIndividual+0xe0>)
 8002070:	797b      	ldrb	r3, [r7, #5]
 8002072:	7013      	strb	r3, [r2, #0]
    }

    // Convert value level to value pwm counter
    channelPulse = (((uint32_t) led_level * (LED_TIMER_PERIOD - 1)) / 100);
 8002074:	797b      	ldrb	r3, [r7, #5]
 8002076:	4a27      	ldr	r2, [pc, #156]	; (8002114 <LedControl_SetColorIndividual+0xe4>)
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4927      	ldr	r1, [pc, #156]	; (8002118 <LedControl_SetColorIndividual+0xe8>)
 800207c:	fba1 1202 	umull	r1, r2, r1, r2
 8002080:	0b92      	lsrs	r2, r2, #14
 8002082:	3a02      	subs	r2, #2
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <LedControl_SetColorIndividual+0xec>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	60fb      	str	r3, [r7, #12]

    if (led_id == LED_BOARD_ID)
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10c      	bne.n	80020b2 <LedControl_SetColorIndividual+0x82>
    {
    	if (led_level != 0)
 8002098:	797b      	ldrb	r3, [r7, #5]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <LedControl_SetColorIndividual+0x78>
    	{
    		GPIO_SetBits(LED_BOARD_PORT, LED_BOARD_PIN);
 800209e:	2120      	movs	r1, #32
 80020a0:	481f      	ldr	r0, [pc, #124]	; (8002120 <LedControl_SetColorIndividual+0xf0>)
 80020a2:	f7fe fdc2 	bl	8000c2a <GPIO_SetBits>
 80020a6:	e02f      	b.n	8002108 <LedControl_SetColorIndividual+0xd8>
    	}
    	else
    	{
    		GPIO_ResetBits(LED_BOARD_PORT, LED_BOARD_PIN);
 80020a8:	2120      	movs	r1, #32
 80020aa:	481d      	ldr	r0, [pc, #116]	; (8002120 <LedControl_SetColorIndividual+0xf0>)
 80020ac:	f7fe fdcc 	bl	8000c48 <GPIO_ResetBits>
 80020b0:	e02a      	b.n	8002108 <LedControl_SetColorIndividual+0xd8>
    	}
    }
    else if (led_id == LED_KIT_ID0)
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d114      	bne.n	80020e2 <LedControl_SetColorIndividual+0xb2>
	{
    	if (led_color == LED_COLOR_RED)
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d104      	bne.n	80020c8 <LedControl_SetColorIndividual+0x98>
    	{
    		TIM_SetCompare1(TIM1, channelPulse);
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	4818      	ldr	r0, [pc, #96]	; (8002124 <LedControl_SetColorIndividual+0xf4>)
 80020c2:	f7ff fabd 	bl	8001640 <TIM_SetCompare1>
 80020c6:	e01f      	b.n	8002108 <LedControl_SetColorIndividual+0xd8>
    	}
    	else if (led_color == LED_COLOR_GREEN)
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d104      	bne.n	80020d8 <LedControl_SetColorIndividual+0xa8>
    	{
    		TIM_SetCompare4(TIM1, channelPulse);
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	4814      	ldr	r0, [pc, #80]	; (8002124 <LedControl_SetColorIndividual+0xf4>)
 80020d2:	f7ff fadf 	bl	8001694 <TIM_SetCompare4>
 80020d6:	e017      	b.n	8002108 <LedControl_SetColorIndividual+0xd8>
    	}
    	else /* (led_color == LED_COLOR_BLUE) */
    	{
			TIM_SetCompare3(TIM1, channelPulse);
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <LedControl_SetColorIndividual+0xf4>)
 80020dc:	f7ff facc 	bl	8001678 <TIM_SetCompare3>
 80020e0:	e012      	b.n	8002108 <LedControl_SetColorIndividual+0xd8>
		}
	}
    else /* (led_id == LED_KIT_ID1) */
    {
    	if (led_color == LED_COLOR_RED)
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <LedControl_SetColorIndividual+0xc4>
    	{
    		TIM_SetCompare2(TIM2, channelPulse);
 80020e8:	68f9      	ldr	r1, [r7, #12]
 80020ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020ee:	f7ff fab5 	bl	800165c <TIM_SetCompare2>
 80020f2:	e009      	b.n	8002108 <LedControl_SetColorIndividual+0xd8>
    	}
    	else if (led_color == LED_COLOR_GREEN)
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d106      	bne.n	8002108 <LedControl_SetColorIndividual+0xd8>
    	{
    		TIM_SetCompare1(TIM2, channelPulse);
 80020fa:	68f9      	ldr	r1, [r7, #12]
 80020fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002100:	f7ff fa9e 	bl	8001640 <TIM_SetCompare1>
 8002104:	e000      	b.n	8002108 <LedControl_SetColorIndividual+0xd8>
        return;
 8002106:	bf00      	nop
    	}
    	else /* (led_color == LED_COLOR_BLUE) */
    	{
		}
    }
}
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000110 	.word	0x20000110
 8002114:	20000000 	.word	0x20000000
 8002118:	eeb83a0d 	.word	0xeeb83a0d
 800211c:	51eb851f 	.word	0x51eb851f
 8002120:	40020000 	.word	0x40020000
 8002124:	40010000 	.word	0x40010000

08002128 <LedControl_SetColorGeneral>:
void
LedControl_SetColorGeneral(
	uint8_t led_id,
	led_color_t led_color,
	uint8_t led_level
) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
 8002132:	460b      	mov	r3, r1
 8002134:	71bb      	strb	r3, [r7, #6]
 8002136:	4613      	mov	r3, r2
 8002138:	717b      	strb	r3, [r7, #5]
    switch (led_color) {
 800213a:	79bb      	ldrb	r3, [r7, #6]
 800213c:	2b05      	cmp	r3, #5
 800213e:	f200 8081 	bhi.w	8002244 <LedControl_SetColorGeneral+0x11c>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <LedControl_SetColorGeneral+0x20>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	08002161 	.word	0x08002161
 800214c:	08002187 	.word	0x08002187
 8002150:	080021ad 	.word	0x080021ad
 8002154:	080021d3 	.word	0x080021d3
 8002158:	0800221f 	.word	0x0800221f
 800215c:	080021f9 	.word	0x080021f9
        case LED_COLOR_RED:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 8002160:	797a      	ldrb	r2, [r7, #5]
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff62 	bl	8002030 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	2200      	movs	r2, #0
 8002170:	2102      	movs	r1, #2
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff5c 	bl	8002030 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	2200      	movs	r2, #0
 800217c:	2101      	movs	r1, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff56 	bl	8002030 <LedControl_SetColorIndividual>
            break;
 8002184:	e05f      	b.n	8002246 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_GREEN:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 8002186:	797a      	ldrb	r2, [r7, #5]
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff4f 	bl	8002030 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff49 	bl	8002030 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2200      	movs	r2, #0
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff43 	bl	8002030 <LedControl_SetColorIndividual>
			break;
 80021aa:	e04c      	b.n	8002246 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_BLUE:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, led_level);
 80021ac:	797a      	ldrb	r2, [r7, #5]
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2102      	movs	r1, #2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff3c 	bl	8002030 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff36 	bl	8002030 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2200      	movs	r2, #0
 80021c8:	2101      	movs	r1, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff30 	bl	8002030 <LedControl_SetColorIndividual>
            break;
 80021d0:	e039      	b.n	8002246 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_WHITE:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, led_level);
 80021d2:	797a      	ldrb	r2, [r7, #5]
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	2102      	movs	r1, #2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff29 	bl	8002030 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 80021de:	797a      	ldrb	r2, [r7, #5]
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff23 	bl	8002030 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 80021ea:	797a      	ldrb	r2, [r7, #5]
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff1d 	bl	8002030 <LedControl_SetColorIndividual>
        	break;
 80021f6:	e026      	b.n	8002246 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_YELLOW:
			LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2200      	movs	r2, #0
 80021fc:	2102      	movs	r1, #2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff16 	bl	8002030 <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 8002204:	797a      	ldrb	r2, [r7, #5]
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff10 	bl	8002030 <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 8002210:	797a      	ldrb	r2, [r7, #5]
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2101      	movs	r1, #1
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff0a 	bl	8002030 <LedControl_SetColorIndividual>
			break;
 800221c:	e013      	b.n	8002246 <LedControl_SetColorGeneral+0x11e>

        case LED_COLOR_BLACK:
			LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2200      	movs	r2, #0
 8002222:	2102      	movs	r1, #2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff03 	bl	8002030 <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fefd 	bl	8002030 <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2200      	movs	r2, #0
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fef7 	bl	8002030 <LedControl_SetColorIndividual>
			break;
 8002242:	e000      	b.n	8002246 <LedControl_SetColorGeneral+0x11e>

        default:
            break;
 8002244:	bf00      	nop
    }
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop

08002250 <LedControl_SetAllColor>:
 */
void
LedControl_SetAllColor(
	uint8_t led_color,
	uint8_t led_level
) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	460a      	mov	r2, r1
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	4613      	mov	r3, r2
 800225e:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < NUM_OF_LED; i++) {
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e008      	b.n	8002278 <LedControl_SetAllColor+0x28>
    	LedControl_SetColorGeneral(i, led_color, led_level);
 8002266:	79ba      	ldrb	r2, [r7, #6]
 8002268:	79f9      	ldrb	r1, [r7, #7]
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5b 	bl	8002128 <LedControl_SetColorGeneral>
    for (uint8_t i = 0; i < NUM_OF_LED; i++) {
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3301      	adds	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d9f3      	bls.n	8002266 <LedControl_SetAllColor+0x16>
    }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <LEDGPIO_Config>:
  * @brief  Configure GPIO for led
  * @param  None
  * @retval None
  */
static void LEDGPIO_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
 800228e:	2101      	movs	r1, #1
 8002290:	2003      	movs	r0, #3
 8002292:	f7fe fed9 	bl	8001048 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 0, 1, 3, 10 and 11 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_GREEN_PIN | LED1_BLUE_PIN | LED2_RED_PIN | LED2_GREEN_PIN;
 8002296:	f640 4303 	movw	r3, #3075	; 0xc03
 800229a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800229c:	2302      	movs	r3, #2
 800229e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80022a0:	2303      	movs	r3, #3
 80022a2:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022a4:	2300      	movs	r3, #0
 80022a6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80022a8:	2301      	movs	r3, #1
 80022aa:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80022ac:	463b      	mov	r3, r7
 80022ae:	4619      	mov	r1, r3
 80022b0:	4818      	ldr	r0, [pc, #96]	; (8002314 <LEDGPIO_Config+0x8c>)
 80022b2:	f7fe fc11 	bl	8000ad8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2);
 80022b6:	2201      	movs	r2, #1
 80022b8:	2100      	movs	r1, #0
 80022ba:	4816      	ldr	r0, [pc, #88]	; (8002314 <LEDGPIO_Config+0x8c>)
 80022bc:	f7fe fceb 	bl	8000c96 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
 80022c0:	2201      	movs	r2, #1
 80022c2:	2101      	movs	r1, #1
 80022c4:	4813      	ldr	r0, [pc, #76]	; (8002314 <LEDGPIO_Config+0x8c>)
 80022c6:	f7fe fce6 	bl	8000c96 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);
 80022ca:	2201      	movs	r2, #1
 80022cc:	210b      	movs	r1, #11
 80022ce:	4811      	ldr	r0, [pc, #68]	; (8002314 <LEDGPIO_Config+0x8c>)
 80022d0:	f7fe fce1 	bl	8000c96 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_TIM1);
 80022d4:	2201      	movs	r2, #1
 80022d6:	210a      	movs	r1, #10
 80022d8:	480e      	ldr	r0, [pc, #56]	; (8002314 <LEDGPIO_Config+0x8c>)
 80022da:	f7fe fcdc 	bl	8000c96 <GPIO_PinAFConfig>

	/* GPIOB Configuration: Channel 13 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_RED_PIN;
 80022de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022e2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80022e4:	463b      	mov	r3, r7
 80022e6:	4619      	mov	r1, r3
 80022e8:	480b      	ldr	r0, [pc, #44]	; (8002318 <LEDGPIO_Config+0x90>)
 80022ea:	f7fe fbf5 	bl	8000ad8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_TIM1);
 80022ee:	2201      	movs	r2, #1
 80022f0:	210d      	movs	r1, #13
 80022f2:	4809      	ldr	r0, [pc, #36]	; (8002318 <LEDGPIO_Config+0x90>)
 80022f4:	f7fe fccf 	bl	8000c96 <GPIO_PinAFConfig>

	/* GPIOA Configuration: Board STM32 */
	GPIO_InitStructure.GPIO_Pin = LED_BOARD_PIN;
 80022f8:	2320      	movs	r3, #32
 80022fa:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80022fc:	2301      	movs	r3, #1
 80022fe:	713b      	strb	r3, [r7, #4]
	GPIO_Init(LED_BOARD_PORT, &GPIO_InitStructure);
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <LEDGPIO_Config+0x8c>)
 8002306:	f7fe fbe7 	bl	8000ad8 <GPIO_Init>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400

0800231c <LEDTIM_Config>:
  * @brief  Configure the TIM1 and TIM2 Pins.
  * @param  None
  * @retval None
  */
static void LEDTIM_Config(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	uint16_t ChannelPulse = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Compute CCR1 value to generate a duty cycle at 50% for channel 1 and 1N */
	ChannelPulse = (uint16_t) (((uint32_t) 0 * (LED_TIMER_PERIOD - 1)) / 100);
 8002326:	2300      	movs	r3, #0
 8002328:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* TIM1 and TIM2 clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800232a:	2101      	movs	r1, #1
 800232c:	2001      	movs	r0, #1
 800232e:	f7fe fecb 	bl	80010c8 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002332:	2101      	movs	r1, #1
 8002334:	2001      	movs	r0, #1
 8002336:	f7fe fea7 	bl	8001088 <RCC_APB1PeriphClockCmd>

	/* Time Base configuration */
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800233e:	2300      	movs	r3, #0
 8002340:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_Period = LED_TIMER_PERIOD;
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <LEDTIM_Config+0xe0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2e      	ldr	r2, [pc, #184]	; (8002400 <LEDTIM_Config+0xe4>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	0b9b      	lsrs	r3, r3, #14
 800234e:	3b01      	subs	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	843b      	strh	r3, [r7, #32]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	4619      	mov	r1, r3
 8002362:	4828      	ldr	r0, [pc, #160]	; (8002404 <LEDTIM_Config+0xe8>)
 8002364:	f7fe fef0 	bl	8001148 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002368:	f107 0318 	add.w	r3, r7, #24
 800236c:	4619      	mov	r1, r3
 800236e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002372:	f7fe fee9 	bl	8001148 <TIM_TimeBaseInit>

	/* Channel 1, 2, 3 and 4 Configuration in PWM mode */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002376:	2370      	movs	r3, #112	; 0x70
 8002378:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800237a:	2301      	movs	r3, #1
 800237c:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 800237e:	2304      	movs	r3, #4
 8002380:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_Pulse = ChannelPulse;
 8002382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002384:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002386:	2302      	movs	r3, #2
 8002388:	823b      	strh	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 800238a:	2300      	movs	r3, #0
 800238c:	827b      	strh	r3, [r7, #18]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 800238e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002392:	82bb      	strh	r3, [r7, #20]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8002394:	2300      	movs	r3, #0
 8002396:	82fb      	strh	r3, [r7, #22]

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	4619      	mov	r1, r3
 800239c:	4819      	ldr	r0, [pc, #100]	; (8002404 <LEDTIM_Config+0xe8>)
 800239e:	f7fe ff5f 	bl	8001260 <TIM_OC1Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4817      	ldr	r0, [pc, #92]	; (8002404 <LEDTIM_Config+0xe8>)
 80023a8:	f7ff f85c 	bl	8001464 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4814      	ldr	r0, [pc, #80]	; (8002404 <LEDTIM_Config+0xe8>)
 80023b2:	f7ff f8dd 	bl	8001570 <TIM_OC4Init>

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023be:	f7fe ff4f 	bl	8001260 <TIM_OC1Init>
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023ca:	f7fe ffc3 	bl	8001354 <TIM_OC2Init>

	/* TIM1 and TIM2 counter enable */
	TIM_Cmd(TIM1, ENABLE);
 80023ce:	2101      	movs	r1, #1
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <LEDTIM_Config+0xe8>)
 80023d2:	f7fe ff25 	bl	8001220 <TIM_Cmd>
	TIM_Cmd(TIM2, ENABLE);
 80023d6:	2101      	movs	r1, #1
 80023d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023dc:	f7fe ff20 	bl	8001220 <TIM_Cmd>

	/* TIM1 and TIM2 Main Output Enable */
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80023e0:	2101      	movs	r1, #1
 80023e2:	4808      	ldr	r0, [pc, #32]	; (8002404 <LEDTIM_Config+0xe8>)
 80023e4:	f7ff f964 	bl	80016b0 <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 80023e8:	2101      	movs	r1, #1
 80023ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023ee:	f7ff f95f 	bl	80016b0 <TIM_CtrlPWMOutputs>
}
 80023f2:	bf00      	nop
 80023f4:	3728      	adds	r7, #40	; 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000000 	.word	0x20000000
 8002400:	eeb83a0d 	.word	0xeeb83a0d
 8002404:	40010000 	.word	0x40010000

08002408 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <EventSchedulerInit+0x2c>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6013      	str	r3, [r2, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 800241c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002420:	2201      	movs	r2, #1
 8002422:	4905      	ldr	r1, [pc, #20]	; (8002438 <EventSchedulerInit+0x30>)
 8002424:	4805      	ldr	r0, [pc, #20]	; (800243c <EventSchedulerInit+0x34>)
 8002426:	f002 fd5b 	bl	8004ee0 <bufInit>
    }
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000114 	.word	0x20000114
 8002438:	20000218 	.word	0x20000218
 800243c:	20000118 	.word	0x20000118

08002440 <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	4619      	mov	r1, r3
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <EventSchedulerAdd+0x28>)
 8002450:	f002 fdac 	bl	8004fac <bufEnDat>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <EventSchedulerAdd+0x1e>
        return SUCCESS;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <EventSchedulerAdd+0x20>
    }
    
    return FAIL;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000218 	.word	0x20000218

0800246c <processEventScheduler>:
 * @brief  Proccess event in queue
 * @param  None
 * @retval None
 */
void
processEventScheduler(void) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	uint8_t event;
    
    if (pAppStateFunc != NULL) {
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <processEventScheduler+0x30>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <processEventScheduler+0x28>
        if (bufDeDat(&eventQueue, (uint8_t *)&event) == ERR_OK) {
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	4619      	mov	r1, r3
 800247e:	4808      	ldr	r0, [pc, #32]	; (80024a0 <processEventScheduler+0x34>)
 8002480:	f002 fde4 	bl	800504c <bufDeDat>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <processEventScheduler+0x28>
            pAppStateFunc(event);
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <processEventScheduler+0x30>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	79fa      	ldrb	r2, [r7, #7]
 8002490:	4610      	mov	r0, r2
 8002492:	4798      	blx	r3
        }
    }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000114 	.word	0x20000114
 80024a0:	20000218 	.word	0x20000218

080024a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	da0b      	bge.n	80024d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <NVIC_SetPriority+0x4c>)
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	3b04      	subs	r3, #4
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ce:	e009      	b.n	80024e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <NVIC_SetPriority+0x50>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ffc2 	bl	80024a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8002542:	463b      	mov	r3, r7
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fcd1 	bl	8000eec <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <TimerInit+0x3c>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ffcf 	bl	80024f8 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 800255a:	2101      	movs	r1, #1
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ffa0 	bl	80024a4 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8002564:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002568:	2100      	movs	r1, #0
 800256a:	4804      	ldr	r0, [pc, #16]	; (800257c <TimerInit+0x40>)
 800256c:	f002 fdb3 	bl	80050d6 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	10624dd3 	.word	0x10624dd3
 800257c:	20000228 	.word	0x20000228

08002580 <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8002590:	2300      	movs	r3, #0
 8002592:	75fb      	strb	r3, [r7, #23]
 8002594:	e04c      	b.n	8002630 <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 8002596:	7dfa      	ldrb	r2, [r7, #23]
 8002598:	4929      	ldr	r1, [pc, #164]	; (8002640 <TimerStart+0xc0>)
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	3310      	adds	r3, #16
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d13e      	bne.n	800262a <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 80025ac:	7dfa      	ldrb	r2, [r7, #23]
 80025ae:	4924      	ldr	r1, [pc, #144]	; (8002640 <TimerStart+0xc0>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 80025be:	7dfa      	ldrb	r2, [r7, #23]
 80025c0:	491f      	ldr	r1, [pc, #124]	; (8002640 <TimerStart+0xc0>)
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	3310      	adds	r3, #16
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 80025d2:	7dfa      	ldrb	r2, [r7, #23]
 80025d4:	491a      	ldr	r1, [pc, #104]	; (8002640 <TimerStart+0xc0>)
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	330c      	adds	r3, #12
 80025e2:	79fa      	ldrb	r2, [r7, #7]
 80025e4:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 80025e6:	7dfa      	ldrb	r2, [r7, #23]
 80025e8:	4915      	ldr	r1, [pc, #84]	; (8002640 <TimerStart+0xc0>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	3314      	adds	r3, #20
 80025f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025f8:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 80025fa:	7dfc      	ldrb	r4, [r7, #23]
 80025fc:	f000 f872 	bl	80026e4 <GetMilSecTick>
 8002600:	4602      	mov	r2, r0
 8002602:	490f      	ldr	r1, [pc, #60]	; (8002640 <TimerStart+0xc0>)
 8002604:	4623      	mov	r3, r4
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4423      	add	r3, r4
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	3304      	adds	r3, #4
 8002610:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 8002612:	7dfa      	ldrb	r2, [r7, #23]
 8002614:	490a      	ldr	r1, [pc, #40]	; (8002640 <TimerStart+0xc0>)
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3308      	adds	r3, #8
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	e006      	b.n	8002638 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	3301      	adds	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	d9af      	bls.n	8002596 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 8002636:	23ff      	movs	r3, #255	; 0xff
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd90      	pop	{r4, r7, pc}
 8002640:	20000228 	.word	0x20000228

08002644 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b0f      	cmp	r3, #15
 8002652:	d80a      	bhi.n	800266a <TimerStop+0x26>
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	4922      	ldr	r1, [pc, #136]	; (80026e0 <TimerStop+0x9c>)
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3310      	adds	r3, #16
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <TimerStop+0x2a>
        return 0;
 800266a:	2300      	movs	r3, #0
 800266c:	e031      	b.n	80026d2 <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 800266e:	79fa      	ldrb	r2, [r7, #7]
 8002670:	491b      	ldr	r1, [pc, #108]	; (80026e0 <TimerStop+0x9c>)
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	4917      	ldr	r1, [pc, #92]	; (80026e0 <TimerStop+0x9c>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	3310      	adds	r3, #16
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8002694:	79fa      	ldrb	r2, [r7, #7]
 8002696:	4912      	ldr	r1, [pc, #72]	; (80026e0 <TimerStop+0x9c>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	330c      	adds	r3, #12
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	490d      	ldr	r1, [pc, #52]	; (80026e0 <TimerStop+0x9c>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	3308      	adds	r3, #8
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 80026bc:	79fa      	ldrb	r2, [r7, #7]
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <TimerStop+0x9c>)
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3304      	adds	r3, #4
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
    
    return 1;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000228 	.word	0x20000228

080026e4 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <GetMilSecTick+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200003a8 	.word	0x200003a8

080026fc <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e068      	b.n	80027da <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	4938      	ldr	r1, [pc, #224]	; (80027ec <processTimerScheduler+0xf0>)
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	440b      	add	r3, r1
 8002716:	3310      	adds	r3, #16
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d05a      	beq.n	80027d4 <processTimerScheduler+0xd8>
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f865 	bl	80027f0 <TimeExpired>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d053      	beq.n	80027d4 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	492f      	ldr	r1, [pc, #188]	; (80027ec <processTimerScheduler+0xf0>)
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	3310      	adds	r3, #16
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	492a      	ldr	r1, [pc, #168]	; (80027ec <processTimerScheduler+0xf0>)
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	440b      	add	r3, r1
 800274e:	3314      	adds	r3, #20
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	4925      	ldr	r1, [pc, #148]	; (80027ec <processTimerScheduler+0xf0>)
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	330c      	adds	r3, #12
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2bff      	cmp	r3, #255	; 0xff
 800276a:	d020      	beq.n	80027ae <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	491f      	ldr	r1, [pc, #124]	; (80027ec <processTimerScheduler+0xf0>)
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	330c      	adds	r3, #12
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8002780:	2b00      	cmp	r3, #0
 8002782:	d014      	beq.n	80027ae <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	4919      	ldr	r1, [pc, #100]	; (80027ec <processTimerScheduler+0xf0>)
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	330c      	adds	r3, #12
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b2d8      	uxtb	r0, r3
 800279c:	4913      	ldr	r1, [pc, #76]	; (80027ec <processTimerScheduler+0xf0>)
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	330c      	adds	r3, #12
 80027aa:	4602      	mov	r2, r0
 80027ac:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <processTimerScheduler+0xf0>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	330c      	adds	r3, #12
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff3b 	bl	8002644 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	3301      	adds	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d993      	bls.n	8002708 <processTimerScheduler+0xc>
        }
    }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000228 	.word	0x20000228

080027f0 <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027fe:	b672      	cpsid	i
}
 8002800:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 8002802:	f7ff ff6f 	bl	80026e4 <GetMilSecTick>
 8002806:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	d80a      	bhi.n	8002824 <TimeExpired+0x34>
 800280e:	79fa      	ldrb	r2, [r7, #7]
 8002810:	492b      	ldr	r1, [pc, #172]	; (80028c0 <TimeExpired+0xd0>)
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	3310      	adds	r3, #16
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 8002824:	b662      	cpsie	i
}
 8002826:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8002828:	2300      	movs	r3, #0
 800282a:	e044      	b.n	80028b6 <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 800282c:	79fa      	ldrb	r2, [r7, #7]
 800282e:	4924      	ldr	r1, [pc, #144]	; (80028c0 <TimeExpired+0xd0>)
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	3304      	adds	r3, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d30c      	bcc.n	800285e <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 8002844:	79fa      	ldrb	r2, [r7, #7]
 8002846:	491e      	ldr	r1, [pc, #120]	; (80028c0 <TimeExpired+0xd0>)
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	3304      	adds	r3, #4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e00e      	b.n	800287c <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 800285e:	79fa      	ldrb	r2, [r7, #7]
 8002860:	4917      	ldr	r1, [pc, #92]	; (80028c0 <TimeExpired+0xd0>)
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	3304      	adds	r3, #4
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	43db      	mvns	r3, r3
 800287a:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 800287c:	79fa      	ldrb	r2, [r7, #7]
 800287e:	4910      	ldr	r1, [pc, #64]	; (80028c0 <TimeExpired+0xd0>)
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	3308      	adds	r3, #8
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d203      	bcs.n	800289c <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 8002894:	b662      	cpsie	i
}
 8002896:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8002898:	2300      	movs	r3, #0
 800289a:	e00c      	b.n	80028b6 <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 800289c:	79fa      	ldrb	r2, [r7, #7]
 800289e:	4908      	ldr	r1, [pc, #32]	; (80028c0 <TimeExpired+0xd0>)
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	3304      	adds	r3, #4
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028b0:	b662      	cpsie	i
}
 80028b2:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 80028b4:	2301      	movs	r3, #1
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000228 	.word	0x20000228

080028c4 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Handler+0x18>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	4a03      	ldr	r2, [pc, #12]	; (80028dc <SysTick_Handler+0x18>)
 80028d0:	6013      	str	r3, [r2, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	200003a8 	.word	0x200003a8

080028e0 <LightSensor_Init>:
 * @retval None
 */
void
LightSensor_Init(
	ADC_READ_MODE adc_read_mode
) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b09e      	sub	sp, #120	; 0x78
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
 80028ea:	2101      	movs	r1, #1
 80028ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028f0:	f7fe fbea 	bl	80010c8 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80028f4:	2101      	movs	r1, #1
 80028f6:	2004      	movs	r0, #4
 80028f8:	f7fe fba6 	bl	8001048 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80028fc:	2101      	movs	r1, #1
 80028fe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002902:	f7fe fba1 	bl	8001048 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = ADC_PIN;
 8002906:	2320      	movs	r3, #32
 8002908:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800290a:	2303      	movs	r3, #3
 800290c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	GPIO_Init(ADC_PORT, &GPIO_InitStructure);
 8002916:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800291a:	4619      	mov	r1, r3
 800291c:	4843      	ldr	r0, [pc, #268]	; (8002a2c <LightSensor_Init+0x14c>)
 800291e:	f7fe f8db 	bl	8000ad8 <GPIO_Init>

	/* ADC Deinitialization ***************************************************/
	ADC_DeInit();
 8002922:	f7fd fd61 	bl	80003e8 <ADC_DeInit>

	/* ADC Common Init ********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002926:	2300      	movs	r3, #0
 8002928:	66bb      	str	r3, [r7, #104]	; 0x68
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 800292a:	2300      	movs	r3, #0
 800292c:	66fb      	str	r3, [r7, #108]	; 0x6c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800292e:	2300      	movs	r3, #0
 8002930:	673b      	str	r3, [r7, #112]	; 0x70
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8002932:	2300      	movs	r3, #0
 8002934:	677b      	str	r3, [r7, #116]	; 0x74
	ADC_CommonInit(&ADC_CommonInitStructure);
 8002936:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fdb8 	bl	80004b0 <ADC_CommonInit>

	/* ADC1 Init **************************************************************/
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8002940:	2300      	movs	r3, #0
 8002942:	653b      	str	r3, [r7, #80]	; 0x50
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8002950:	2300      	movs	r3, #0
 8002952:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8002954:	2300      	movs	r3, #0
 8002956:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002958:	2300      	movs	r3, #0
 800295a:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	ADC_Init(ADCx_SENSOR, &ADC_InitStructure);
 8002962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002966:	4619      	mov	r1, r3
 8002968:	4831      	ldr	r0, [pc, #196]	; (8002a30 <LightSensor_Init+0x150>)
 800296a:	f7fd fd4b 	bl	8000404 <ADC_Init>

	if (adc_read_mode == ADC_READ_MODE_POLLING)
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d110      	bne.n	8002996 <LightSensor_Init+0xb6>
	{
		ADC_EOCOnEachRegularChannelCmd(ADCx_SENSOR, ENABLE);
 8002974:	2101      	movs	r1, #1
 8002976:	482e      	ldr	r0, [pc, #184]	; (8002a30 <LightSensor_Init+0x150>)
 8002978:	f7fd feb8 	bl	80006ec <ADC_EOCOnEachRegularChannelCmd>
		ADC_ContinuousModeCmd(ADCx_SENSOR, DISABLE);
 800297c:	2100      	movs	r1, #0
 800297e:	482c      	ldr	r0, [pc, #176]	; (8002a30 <LightSensor_Init+0x150>)
 8002980:	f7fd fed0 	bl	8000724 <ADC_ContinuousModeCmd>
		ADC_DiscModeChannelCountConfig(ADCx_SENSOR, 1);
 8002984:	2101      	movs	r1, #1
 8002986:	482a      	ldr	r0, [pc, #168]	; (8002a30 <LightSensor_Init+0x150>)
 8002988:	f7fd fee8 	bl	800075c <ADC_DiscModeChannelCountConfig>
		ADC_DiscModeCmd(ADCx_SENSOR, ENABLE);
 800298c:	2101      	movs	r1, #1
 800298e:	4828      	ldr	r0, [pc, #160]	; (8002a30 <LightSensor_Init+0x150>)
 8002990:	f7fd ff06 	bl	80007a0 <ADC_DiscModeCmd>
 8002994:	e036      	b.n	8002a04 <LightSensor_Init+0x124>
	}
	else
	{
		/* DMA2_Stream0 channel0 configuration ********************************/
		DMA_DeInit(DMA2_Stream0);
 8002996:	4827      	ldr	r0, [pc, #156]	; (8002a34 <LightSensor_Init+0x154>)
 8002998:	f7fd ff56 	bl	8000848 <DMA_DeInit>
		DMA_InitStructure.DMA_Channel = DMA_CHANNELx;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADCx_DR_ADDRESS;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <LightSensor_Init+0x158>)
 80029a2:	613b      	str	r3, [r7, #16]
		DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&uhADCConvertedValue;
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <LightSensor_Init+0x15c>)
 80029a6:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
		DMA_InitStructure.DMA_BufferSize = 1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80029b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80029be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80029c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80029ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
		DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80029d0:	2300      	movs	r3, #0
 80029d2:	63bb      	str	r3, [r7, #56]	; 0x38
		DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80029d4:	2301      	movs	r3, #1
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
		DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80029d8:	2300      	movs	r3, #0
 80029da:	643b      	str	r3, [r7, #64]	; 0x40
		DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80029dc:	2300      	movs	r3, #0
 80029de:	647b      	str	r3, [r7, #68]	; 0x44
		DMA_Init(DMA_STREAMx, &DMA_InitStructure);
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	4619      	mov	r1, r3
 80029e6:	4813      	ldr	r0, [pc, #76]	; (8002a34 <LightSensor_Init+0x154>)
 80029e8:	f7fe f802 	bl	80009f0 <DMA_Init>

		/* DMA2_Stream0 enable */
		DMA_Cmd(DMA_STREAMx, ENABLE);
 80029ec:	2101      	movs	r1, #1
 80029ee:	4811      	ldr	r0, [pc, #68]	; (8002a34 <LightSensor_Init+0x154>)
 80029f0:	f7fe f856 	bl	8000aa0 <DMA_Cmd>

		/* Enable DMA request after last transfer (Single-ADC mode) */
		ADC_DMARequestAfterLastTransferCmd(ADCx_SENSOR, ENABLE);
 80029f4:	2101      	movs	r1, #1
 80029f6:	480e      	ldr	r0, [pc, #56]	; (8002a30 <LightSensor_Init+0x150>)
 80029f8:	f7fd ff0a 	bl	8000810 <ADC_DMARequestAfterLastTransferCmd>

		/* Enable ADC1 DMA */
		ADC_DMACmd(ADCx_SENSOR, ENABLE);
 80029fc:	2101      	movs	r1, #1
 80029fe:	480c      	ldr	r0, [pc, #48]	; (8002a30 <LightSensor_Init+0x150>)
 8002a00:	f7fd feea 	bl	80007d8 <ADC_DMACmd>
	}

	/* ADC1 regular channel15 configuration ************************************/
	ADC_RegularChannelConfig(ADCx_SENSOR, ADC_Channel_15, 1, ADC_SampleTime_15Cycles);
 8002a04:	2301      	movs	r3, #1
 8002a06:	2201      	movs	r2, #1
 8002a08:	210f      	movs	r1, #15
 8002a0a:	4809      	ldr	r0, [pc, #36]	; (8002a30 <LightSensor_Init+0x150>)
 8002a0c:	f7fd fd94 	bl	8000538 <ADC_RegularChannelConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADCx_SENSOR, ENABLE);
 8002a10:	2101      	movs	r1, #1
 8002a12:	4807      	ldr	r0, [pc, #28]	; (8002a30 <LightSensor_Init+0x150>)
 8002a14:	f7fd fd74 	bl	8000500 <ADC_Cmd>

	if (adc_read_mode == ADC_READ_MODE_DMA)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <LightSensor_Init+0x144>
	{
		/* Start ADC1 Software Conversion */
		ADC_SoftwareStartConv(ADCx_SENSOR);
 8002a1e:	4804      	ldr	r0, [pc, #16]	; (8002a30 <LightSensor_Init+0x150>)
 8002a20:	f7fd fe54 	bl	80006cc <ADC_SoftwareStartConv>
	}
}
 8002a24:	bf00      	nop
 8002a26:	3778      	adds	r7, #120	; 0x78
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	40012000 	.word	0x40012000
 8002a34:	40026410 	.word	0x40026410
 8002a38:	4001204c 	.word	0x4001204c
 8002a3c:	200003ac 	.word	0x200003ac

08002a40 <TemHumSensor_Init>:
 * @brief  Initialize module SI7020
 * @param  None
 * @retval None
 */
void TemHumSensor_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
    BYTE CMDR_USERREG1[2] = { 2, 0xE7 };
    BYTE CMDR_HEATERCTR[2] = { 2, 0x11 };
    #endif

    /* Initialized module i2c */
    i2c_config();
 8002a44:	f000 f802 	bl	8002a4c <i2c_config>

    Si7020GetVerFW();

    Si7020GetSerialNum(pReg);
    #endif /* SI7020_DEBUG */
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <i2c_config>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
void i2c_config(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
	// Initialization struct
	I2C_InitTypeDef I2C_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	// Step 1: Initialize I2C
	RCC_APB1PeriphClockCmd(I2Cx_RCC, ENABLE);
 8002a52:	2101      	movs	r1, #1
 8002a54:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a58:	f7fe fb16 	bl	8001088 <RCC_APB1PeriphClockCmd>
	I2C_InitStruct.I2C_ClockSpeed = 400000;
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <i2c_config+0x88>)
 8002a5e:	60bb      	str	r3, [r7, #8]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8002a60:	2300      	movs	r3, #0
 8002a62:	81bb      	strh	r3, [r7, #12]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8002a64:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002a68:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8002a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a72:	827b      	strh	r3, [r7, #18]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a78:	82bb      	strh	r3, [r7, #20]
	I2C_Init(I2Cx_SENSOR, &I2C_InitStruct);
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4815      	ldr	r0, [pc, #84]	; (8002ad8 <i2c_config+0x8c>)
 8002a82:	f7fe f951 	bl	8000d28 <I2C_Init>
	I2C_Cmd(I2Cx_SENSOR, ENABLE);
 8002a86:	2101      	movs	r1, #1
 8002a88:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <i2c_config+0x8c>)
 8002a8a:	f7fe fa0f 	bl	8000eac <I2C_Cmd>

	// Step 2: Initialize GPIO as open drain alternate function
	RCC_AHB1PeriphClockCmd(I2C_GPIO_RCC, ENABLE);
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7fe fad9 	bl	8001048 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Pin = I2C_PIN_SCL | I2C_PIN_SDA;
 8002a96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a9a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(I2C_GPIO, &GPIO_InitStruct);
 8002aac:	463b      	mov	r3, r7
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480a      	ldr	r0, [pc, #40]	; (8002adc <i2c_config+0x90>)
 8002ab2:	f7fe f811 	bl	8000ad8 <GPIO_Init>

	/* Connect PXx to I2C_SCL */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource8, GPIO_AF_I2C1);
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	2108      	movs	r1, #8
 8002aba:	4808      	ldr	r0, [pc, #32]	; (8002adc <i2c_config+0x90>)
 8002abc:	f7fe f8eb 	bl	8000c96 <GPIO_PinAFConfig>

	/* Connect PXx to I2C_SDA */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource9, GPIO_AF_I2C1);
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	2109      	movs	r1, #9
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <i2c_config+0x90>)
 8002ac6:	f7fe f8e6 	bl	8000c96 <GPIO_PinAFConfig>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	00061a80 	.word	0x00061a80
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	40020400 	.word	0x40020400

08002ae0 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae6:	b672      	cpsid	i
}
 8002ae8:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8002aea:	f240 5125 	movw	r1, #1317	; 0x525
 8002aee:	480f      	ldr	r0, [pc, #60]	; (8002b2c <USART2_IRQHandler+0x4c>)
 8002af0:	f7fe fe14 	bl	800171c <USART_GetITStatus>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d112      	bne.n	8002b20 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <USART2_IRQHandler+0x50>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8002b00:	480a      	ldr	r0, [pc, #40]	; (8002b2c <USART2_IRQHandler+0x4c>)
 8002b02:	f7fe fdfb 	bl	80016fc <USART_ReceiveData>
 8002b06:	4603      	mov	r3, r0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8002b0c:	1cfb      	adds	r3, r7, #3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f002 fa4b 	bl	8004fac <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8002b16:	f240 5125 	movw	r1, #1317	; 0x525
 8002b1a:	4804      	ldr	r0, [pc, #16]	; (8002b2c <USART2_IRQHandler+0x4c>)
 8002b1c:	f7fe fe59 	bl	80017d2 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b20:	b662      	cpsie	i
}
 8002b22:	bf00      	nop
    }
    __enable_irq();
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40004400 	.word	0x40004400
 8002b30:	200003b0 	.word	0x200003b0

08002b34 <delayMicroseconds>:
//ucg_int_t get_tx(void) { return tx; };
//ucg_int_t get_ty(void) { return ty; };
//ucg_t *get_ucg(void) { return &ucg; };

static void delayMicroseconds(uint32_t microseconds)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
//	}
//	uint32_t i;
//	for( i = 0; i < microseconds; i++ )
//	{
//	}
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <ucg_gpio_init>:

static void ucg_gpio_init(void) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2007      	movs	r0, #7
 8002b52:	f7fe fa79 	bl	8001048 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002b56:	2301      	movs	r3, #1
 8002b58:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 8002b66:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8002b6a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480a      	ldr	r0, [pc, #40]	; (8002b9c <ucg_gpio_init+0x54>)
 8002b72:	f7fd ffb1 	bl	8000ad8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 8002b76:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002b7a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <ucg_gpio_init+0x58>)
 8002b82:	f7fd ffa9 	bl	8000ad8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b8a:	463b      	mov	r3, r7
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <ucg_gpio_init+0x5c>)
 8002b90:	f7fd ffa2 	bl	8000ad8 <GPIO_Init>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800

08002ba8 <ucg_com_arduino_send_generic_SW_SPI>:

static void ucg_com_arduino_send_generic_SW_SPI(ucg_t *ucg, uint8_t data)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	73fb      	strb	r3, [r7, #15]

  do
  {
    if ( data & 128 )
 8002bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	da05      	bge.n	8002bcc <ucg_com_arduino_send_generic_SW_SPI+0x24>
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	4814      	ldr	r0, [pc, #80]	; (8002c18 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002bc6:	f7fe f84e 	bl	8000c66 <GPIO_WriteBit>
 8002bca:	e004      	b.n	8002bd6 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
    }
    else
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	4811      	ldr	r0, [pc, #68]	; (8002c18 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002bd2:	f7fe f848 	bl	8000c66 <GPIO_WriteBit>
    }
    // no delay required, also Arduino Due is slow enough
    // delay required for ESP32
    delayMicroseconds(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f7ff ffac 	bl	8002b34 <delayMicroseconds>
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 1);
 8002bdc:	2201      	movs	r2, #1
 8002bde:	2120      	movs	r1, #32
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002be2:	f7fe f840 	bl	8000c66 <GPIO_WriteBit>
    delayMicroseconds(1);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7ff ffa4 	bl	8002b34 <delayMicroseconds>
    i--;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	4808      	ldr	r0, [pc, #32]	; (8002c18 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002bf8:	f7fe f835 	bl	8000c66 <GPIO_WriteBit>
    delayMicroseconds(1);
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f7ff ff99 	bl	8002b34 <delayMicroseconds>
    data <<= 1;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	70fb      	strb	r3, [r7, #3]
  } while( i > 0 );
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1d4      	bne.n	8002bb8 <ucg_com_arduino_send_generic_SW_SPI+0x10>
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40020000 	.word	0x40020000

08002c1c <ucg_com_arduino_generic_SW_SPI>:

static int16_t ucg_com_arduino_generic_SW_SPI(ucg_t *ucg, int16_t msg, uint16_t arg, uint8_t *data)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	813b      	strh	r3, [r7, #8]
  switch(msg)
 8002c2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c32:	3b0a      	subs	r3, #10
 8002c34:	2b0b      	cmp	r3, #11
 8002c36:	f200 80dc 	bhi.w	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <ucg_com_arduino_generic_SW_SPI+0x24>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c71 	.word	0x08002c71
 8002c44:	08002df3 	.word	0x08002df3
 8002c48:	08002cc3 	.word	0x08002cc3
 8002c4c:	08002ccd 	.word	0x08002ccd
 8002c50:	08002cdd 	.word	0x08002cdd
 8002c54:	08002ced 	.word	0x08002ced
 8002c58:	08002cff 	.word	0x08002cff
 8002c5c:	08002d1f 	.word	0x08002d1f
 8002c60:	08002d47 	.word	0x08002d47
 8002c64:	08002d7d 	.word	0x08002d7d
 8002c68:	08002d9b 	.word	0x08002d9b
 8002c6c:	08002deb 	.word	0x08002deb
      /* "data" is a pointer to ucg_com_info_t structure with the following information: */
      /*	((ucg_com_info_t *)data)->serial_clk_speed value in nanoseconds */
      /*	((ucg_com_info_t *)data)->parallel_clk_speed value in nanoseconds */
    
      /* setup pins */
      ucg_gpio_init();
 8002c70:	f7ff ff6a 	bl	8002b48 <ucg_gpio_init>

      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 8002c74:	2201      	movs	r2, #1
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	4860      	ldr	r0, [pc, #384]	; (8002dfc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002c7a:	f7fd fff4 	bl	8000c66 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, 1);
 8002c7e:	2201      	movs	r2, #1
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	485f      	ldr	r0, [pc, #380]	; (8002e00 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002c84:	f7fd ffef 	bl	8000c66 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, 1);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	485d      	ldr	r0, [pc, #372]	; (8002e04 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8002c8e:	f7fd ffea 	bl	8000c66 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8002c92:	2201      	movs	r2, #1
 8002c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c98:	4858      	ldr	r0, [pc, #352]	; (8002dfc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002c9a:	f7fd ffe4 	bl	8000c66 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	4856      	ldr	r0, [pc, #344]	; (8002dfc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002ca4:	f7fd ffdf 	bl	8000c66 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_ENABLE_PORT, SPI1_ENABLE_PIN, 1);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cae:	4854      	ldr	r0, [pc, #336]	; (8002e00 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002cb0:	f7fd ffd9 	bl	8000c66 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_MODE_PORT, SPI1_MODE_PIN, 1);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cba:	4850      	ldr	r0, [pc, #320]	; (8002dfc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002cbc:	f7fd ffd3 	bl	8000c66 <GPIO_WriteBit>
      break;
 8002cc0:	e097      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_POWER_DOWN:
      break;

    case UCG_COM_MSG_DELAY:
      delayMicroseconds(arg);
 8002cc2:	893b      	ldrh	r3, [r7, #8]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff35 	bl	8002b34 <delayMicroseconds>
      break;
 8002cca:	e092      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_RESET_LINE:
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, arg);
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	484b      	ldr	r0, [pc, #300]	; (8002e04 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8002cd6:	f7fd ffc6 	bl	8000c66 <GPIO_WriteBit>
      break;
 8002cda:	e08a      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CS_LINE:
	  GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, arg);
 8002cdc:	893b      	ldrh	r3, [r7, #8]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	4846      	ldr	r0, [pc, #280]	; (8002e00 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002ce6:	f7fd ffbe 	bl	8000c66 <GPIO_WriteBit>
      break;
 8002cea:	e082      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CD_LINE:
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, arg);
 8002cec:	893b      	ldrh	r3, [r7, #8]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf6:	4841      	ldr	r0, [pc, #260]	; (8002dfc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002cf8:	f7fd ffb5 	bl	8000c66 <GPIO_WriteBit>
      break;
 8002cfc:	e079      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_BYTE:
      ucg_com_arduino_send_generic_SW_SPI(ucg, arg);
 8002cfe:	893b      	ldrh	r3, [r7, #8]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	4619      	mov	r1, r3
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff ff4f 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
      break;
 8002d0a:	e072      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_1_BYTE:
      while( arg > 0 ) {
	    ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff ff48 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
	    arg--;
 8002d18:	893b      	ldrh	r3, [r7, #8]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f3      	bne.n	8002d0c <ucg_com_arduino_generic_SW_SPI+0xf0>
      }
      break;
 8002d24:	e065      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_2_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff ff3b 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3301      	adds	r3, #1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff ff34 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ec      	bne.n	8002d26 <ucg_com_arduino_generic_SW_SPI+0x10a>
      }
      break;
 8002d4c:	e051      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_3_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff ff27 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff ff20 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[2]);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff ff19 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8002d76:	893b      	ldrh	r3, [r7, #8]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e5      	bne.n	8002d4e <ucg_com_arduino_generic_SW_SPI+0x132>
      }
      break;
 8002d82:	e036      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_STR:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data++);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff ff0a 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8002d9a:	893b      	ldrh	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f1      	bne.n	8002d84 <ucg_com_arduino_generic_SW_SPI+0x168>
      }
      break;
 8002da0:	e027      	b.n	8002df2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_CD_DATA_SEQUENCE:
      while(arg > 0)
      {
		if ( *data != 0 )
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d010      	beq.n	8002dcc <ucg_com_arduino_generic_SW_SPI+0x1b0>
		{
		  if ( *data == 1 )
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d106      	bne.n	8002dc0 <ucg_com_arduino_generic_SW_SPI+0x1a4>
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002db8:	4810      	ldr	r0, [pc, #64]	; (8002dfc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002dba:	f7fd ff54 	bl	8000c66 <GPIO_WriteBit>
 8002dbe:	e005      	b.n	8002dcc <ucg_com_arduino_generic_SW_SPI+0x1b0>
		  }
		  else
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc6:	480d      	ldr	r0, [pc, #52]	; (8002dfc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002dc8:	f7fd ff4d 	bl	8000c66 <GPIO_WriteBit>
		  }
		}
		data++;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	607b      	str	r3, [r7, #4]
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fee5 	bl	8002ba8 <ucg_com_arduino_send_generic_SW_SPI>
		data++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3301      	adds	r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
		arg--;
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	813b      	strh	r3, [r7, #8]
      while(arg > 0)
 8002dea:	893b      	ldrh	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1d8      	bne.n	8002da2 <ucg_com_arduino_generic_SW_SPI+0x186>
      }
      break;
 8002df0:	bf00      	nop
  }
  return 1;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800

08002e08 <Ucglib4WireSWSPI_begin>:

void Ucglib4WireSWSPI_begin(ucg_t *ucg, uint8_t is_transparent)
{ 
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  ucg_Init(ucg, ucg_dev_st7735_18x128x128, ucg_ext_st7735_18, ucg_com_arduino_generic_SW_SPI);
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <Ucglib4WireSWSPI_begin+0x2c>)
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <Ucglib4WireSWSPI_begin+0x30>)
 8002e18:	4908      	ldr	r1, [pc, #32]	; (8002e3c <Ucglib4WireSWSPI_begin+0x34>)
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f001 febc 	bl	8004b98 <ucg_Init>
  ucg_SetFontMode(ucg, is_transparent);
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	4619      	mov	r1, r3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f001 fca0 	bl	800476a <ucg_SetFontMode>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	08002c1d 	.word	0x08002c1d
 8002e38:	08003e99 	.word	0x08003e99
 8002e3c:	08003fc1 	.word	0x08003fc1

08002e40 <ucg_DrawBox>:
*/

#include "ucg.h"

void ucg_DrawBox(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  while( h > 0 )
 8002e5a:	e014      	b.n	8002e86 <ucg_DrawBox+0x46>
  {
    ucg_DrawHLine(ucg, x, y, w);
 8002e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e64:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f001 ff07 	bl	8004c7c <ucg_DrawHLine>
    h--;
 8002e6e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	833b      	strh	r3, [r7, #24]
    y++;
 8002e7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	813b      	strh	r3, [r7, #8]
  while( h > 0 )
 8002e86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	dce6      	bgt.n	8002e5c <ucg_DrawBox+0x1c>
  }  
}
 8002e8e:	bf00      	nop
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <ucg_ClearScreen>:
  - clear the screen with black color
  - reset clip range to max
  - set draw color to white
*/
void ucg_ClearScreen(ucg_t *ucg)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	6078      	str	r0, [r7, #4]
  ucg_SetColor(ucg, 0, 0, 0, 0);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f001 ff04 	bl	8004cb8 <ucg_SetColor>
  ucg_SetMaxClipRange(ucg);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f001 f84c 	bl	8003f4e <ucg_SetMaxClipRange>
  ucg_DrawBox(ucg, 0, 0, ucg_GetWidth(ucg), ucg_GetHeight(ucg));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffb8 	bl	8002e40 <ucg_DrawBox>
  ucg_SetColor(ucg, 0, 255, 255, 255);
 8002ed0:	23ff      	movs	r3, #255	; 0xff
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	23ff      	movs	r3, #255	; 0xff
 8002ed6:	22ff      	movs	r2, #255	; 0xff
 8002ed8:	2100      	movs	r1, #0
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f001 feec 	bl	8004cb8 <ucg_SetColor>
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <ucg_ccs_init>:
/*
  Setup change from "start" to "end" with a specified amount of "steps".
  After calling this procedure, ccs->current will contain the "start" value.
*/
void ucg_ccs_init(ucg_ccs_t *ccs, uint8_t start, uint8_t end, ucg_int_t steps)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	70fb      	strb	r3, [r7, #3]
 8002efa:	460b      	mov	r3, r1
 8002efc:	70bb      	strb	r3, [r7, #2]
 8002efe:	4613      	mov	r3, r2
 8002f00:	803b      	strh	r3, [r7, #0]
  ccs->start = start;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	705a      	strb	r2, [r3, #1]
  ccs->num = end-start;
 8002f08:	78bb      	ldrb	r3, [r7, #2]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	b21a      	sxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	809a      	strh	r2, [r3, #4]
  ccs->den = steps-1;
 8002f1a:	883b      	ldrh	r3, [r7, #0]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b21a      	sxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	811a      	strh	r2, [r3, #8]
  ccs->dir = 1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	805a      	strh	r2, [r3, #2]
  
  ccs->quot = ccs->num / ccs->den;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	80da      	strh	r2, [r3, #6]
  if ( ccs->num < 0 )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da0c      	bge.n	8002f68 <ucg_ccs_init+0x80>
  {
    ccs->num = -ccs->num;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	425b      	negs	r3, r3
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	b21a      	sxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	809a      	strh	r2, [r3, #4]
    ccs->dir = -1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f66:	805a      	strh	r2, [r3, #2]
  }
  ccs->rem = ccs->num % ccs->den;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002f74:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f78:	fb01 f202 	mul.w	r2, r1, r2
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	815a      	strh	r2, [r3, #10]
  
  ccs->frac = ccs->den/2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f8a:	0fda      	lsrs	r2, r3, #31
 8002f8c:	4413      	add	r3, r2
 8002f8e:	105b      	asrs	r3, r3, #1
 8002f90:	b21a      	sxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	819a      	strh	r2, [r3, #12]
  ccs->current = start;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	701a      	strb	r2, [r3, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <ucg_ccs_step>:
/*
  Make one step towards the "end" value. 
  ccs->curront will contain the updated value.
*/
void ucg_ccs_step(ucg_ccs_t *ccs)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  
  ccs->current += ccs->quot;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	701a      	strb	r2, [r3, #0]
  ccs->frac += ccs->rem;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	b21a      	sxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	819a      	strh	r2, [r3, #12]
  if ( ccs->frac >= ccs->den )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	db16      	blt.n	800301c <ucg_ccs_step+0x74>
  {
    ccs->current += ccs->dir;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	701a      	strb	r2, [r3, #0]
    ccs->frac -= ccs->den;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003010:	b29b      	uxth	r3, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	b29b      	uxth	r3, r3
 8003016:	b21a      	sxth	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	819a      	strh	r2, [r3, #12]
  }  
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <ucg_ccs_seek>:
  
  Seek to the specified "pos"ition.
  "pos" must be between 0 and "end"-1
*/
void ucg_ccs_seek(ucg_ccs_t *ccs, ucg_int_t pos)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
  ucg_int_t p;
  ccs->current = ccs->quot;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	701a      	strb	r2, [r3, #0]
  ccs->current *= pos;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	fb12 f303 	smulbb	r3, r2, r3
 800304c:	b2da      	uxtb	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	701a      	strb	r2, [r3, #0]
  p = ccs->rem * pos  + ccs->den/2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003058:	b29a      	uxth	r2, r3
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	fb12 f303 	smulbb	r3, r2, r3
 8003060:	b29a      	uxth	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003068:	0fd9      	lsrs	r1, r3, #31
 800306a:	440b      	add	r3, r1
 800306c:	105b      	asrs	r3, r3, #1
 800306e:	b21b      	sxth	r3, r3
 8003070:	b29b      	uxth	r3, r3
 8003072:	4413      	add	r3, r2
 8003074:	b29b      	uxth	r3, r3
 8003076:	81fb      	strh	r3, [r7, #14]
  if ( ccs->dir >= 0 )
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0e      	blt.n	80030a0 <ucg_ccs_seek+0x78>
    ccs->current += p / ccs->den;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8003090:	fb93 f3f1 	sdiv	r3, r3, r1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	4413      	add	r3, r2
 8003098:	b2da      	uxtb	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e00d      	b.n	80030bc <ucg_ccs_seek+0x94>
  else
    ccs->current -= p / ccs->den;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80030ae:	fb93 f3f1 	sdiv	r3, r3, r1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	701a      	strb	r2, [r3, #0]
  ccs->frac = p % ccs->den;
 80030bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80030c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80030ca:	fb01 f202 	mul.w	r2, r1, r2
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	b21a      	sxth	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	819a      	strh	r2, [r3, #12]
  ccs->current += ccs->start;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	785b      	ldrb	r3, [r3, #1]
 80030de:	4413      	add	r3, r2
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	701a      	strb	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <ucg_clip_is_x_visible>:

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg) UCG_NOINLINE;
static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg) UCG_NOINLINE;

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.x;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030fe:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.x;
 8003100:	89fa      	ldrh	r2, [r7, #14]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8003108:	b29b      	uxth	r3, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b29b      	uxth	r3, r3
 800310e:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8003110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003114:	2b00      	cmp	r3, #0
 8003116:	da01      	bge.n	800311c <ucg_clip_is_x_visible+0x2a>
    return 0;
 8003118:	2300      	movs	r3, #0
 800311a:	e009      	b.n	8003130 <ucg_clip_is_x_visible+0x3e>
  if ( t >= ucg->clip_box.size.w )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8003122:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003126:	429a      	cmp	r2, r3
 8003128:	db01      	blt.n	800312e <ucg_clip_is_x_visible+0x3c>
    return 0;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <ucg_clip_is_x_visible+0x3e>
  
  return 1;
 800312e:	2301      	movs	r3, #1
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <ucg_clip_is_y_visible>:

static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.y;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003148:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.y;
 800314a:	89fa      	ldrh	r2, [r7, #14]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8003152:	b29b      	uxth	r3, r3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	b29b      	uxth	r3, r3
 8003158:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 800315a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da01      	bge.n	8003166 <ucg_clip_is_y_visible+0x2a>
    return 0;
 8003162:	2300      	movs	r3, #0
 8003164:	e009      	b.n	800317a <ucg_clip_is_y_visible+0x3e>
  if ( t >= ucg->clip_box.size.h )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800316c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003170:	429a      	cmp	r2, r3
 8003172:	db01      	blt.n	8003178 <ucg_clip_is_y_visible+0x3c>
    return 0;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <ucg_clip_is_y_visible+0x3e>
  
  return 1;
 8003178:	2301      	movs	r3, #1
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <ucg_clip_intersection>:
  Assumptions:
    a <= b
    c <= d
*/
static ucg_int_t ucg_clip_intersection(ucg_int_t *ap, ucg_int_t *bp, ucg_int_t c, ucg_int_t d)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	4611      	mov	r1, r2
 8003192:	461a      	mov	r2, r3
 8003194:	460b      	mov	r3, r1
 8003196:	80fb      	strh	r3, [r7, #6]
 8003198:	4613      	mov	r3, r2
 800319a:	80bb      	strh	r3, [r7, #4]
  ucg_int_t a = *ap;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	82fb      	strh	r3, [r7, #22]
  ucg_int_t b = *bp;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	82bb      	strh	r3, [r7, #20]
  
  if ( a >= d )
 80031a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	db01      	blt.n	80031b8 <ucg_clip_intersection+0x32>
    return 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e01a      	b.n	80031ee <ucg_clip_intersection+0x68>
  if ( b <= c )
 80031b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80031bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dc01      	bgt.n	80031c8 <ucg_clip_intersection+0x42>
    return 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e012      	b.n	80031ee <ucg_clip_intersection+0x68>
  if ( a < c )
 80031c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	da02      	bge.n	80031da <ucg_clip_intersection+0x54>
    *ap = c;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	88fa      	ldrh	r2, [r7, #6]
 80031d8:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 80031da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80031de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	dd02      	ble.n	80031ec <ucg_clip_intersection+0x66>
    *bp = d;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	88ba      	ldrh	r2, [r7, #4]
 80031ea:	801a      	strh	r2, [r3, #0]
  return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <ucg_clip_is_pixel_visible>:

ucg_int_t ucg_clip_is_pixel_visible(ucg_t *ucg)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  if ( ucg_clip_is_x_visible(ucg) == 0 )
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ff75 	bl	80030f2 <ucg_clip_is_x_visible>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <ucg_clip_is_pixel_visible+0x18>
    return 0;
 800320e:	2300      	movs	r3, #0
 8003210:	e008      	b.n	8003224 <ucg_clip_is_pixel_visible+0x2a>
  if ( ucg_clip_is_y_visible(ucg) == 0 )
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ff92 	bl	800313c <ucg_clip_is_y_visible>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <ucg_clip_is_pixel_visible+0x28>
    return 0;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <ucg_clip_is_pixel_visible+0x2a>
  return 1;
 8003222:	2301      	movs	r3, #1
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <ucg_clip_l90fx>:
/*
  assumes, that ucg->arg contains data for l90fx and does clipping 
  against ucg->clip_box
*/
ucg_int_t ucg_clip_l90fx(ucg_t *ucg)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  ucg_int_t a;
  ucg_int_t b;
  ucg->arg.offset = 0;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	861a      	strh	r2, [r3, #48]	; 0x30
  switch(ucg->arg.dir)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003240:	2b03      	cmp	r3, #3
 8003242:	f200 816d 	bhi.w	8003520 <ucg_clip_l90fx+0x2f4>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <ucg_clip_l90fx+0x20>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	0800325d 	.word	0x0800325d
 8003250:	08003303 	.word	0x08003303
 8003254:	080033a9 	.word	0x080033a9
 8003258:	08003465 	.word	0x08003465
  {
    case 0:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff6d 	bl	800313c <ucg_clip_is_y_visible>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <ucg_clip_l90fx+0x40>
	return 0; 
 8003268:	2300      	movs	r3, #0
 800326a:	e15a      	b.n	8003522 <ucg_clip_l90fx+0x2f6>
      a = ucg->arg.pixel.pos.x;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003272:	81fb      	strh	r3, [r7, #14]
      b = a;
 8003274:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003278:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003280:	b29a      	uxth	r2, r3
 8003282:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003286:	b29b      	uxth	r3, r3
 8003288:	4413      	add	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	b21b      	sxth	r3, r3
 800328e:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800329c:	b29a      	uxth	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	f107 010c 	add.w	r1, r7, #12
 80032b0:	f107 000e 	add.w	r0, r7, #14
 80032b4:	4622      	mov	r2, r4
 80032b6:	f7ff ff66 	bl	8003186 <ucg_clip_intersection>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <ucg_clip_l90fx+0x98>
	return 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e12e      	b.n	8003522 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.offset = a - ucg->arg.pixel.pos.x;
 80032c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	b21a      	sxth	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = a;
 80032dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	849a      	strh	r2, [r3, #36]	; 0x24
      b -= a;
 80032e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 80032f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 8003300:	e10e      	b.n	8003520 <ucg_clip_l90fx+0x2f4>
    case 1:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff fef5 	bl	80030f2 <ucg_clip_is_x_visible>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <ucg_clip_l90fx+0xe6>
	return 0;
 800330e:	2300      	movs	r3, #0
 8003310:	e107      	b.n	8003522 <ucg_clip_l90fx+0x2f6>
      
      a = ucg->arg.pixel.pos.y;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003318:	81fb      	strh	r3, [r7, #14]
      b = a;
 800331a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800331e:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003326:	b29a      	uxth	r2, r3
 8003328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800332c:	b29b      	uxth	r3, r3
 800332e:	4413      	add	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	b21b      	sxth	r3, r3
 8003334:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8003342:	b29a      	uxth	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800334a:	b29b      	uxth	r3, r3
 800334c:	4413      	add	r3, r2
 800334e:	b29b      	uxth	r3, r3
 8003350:	b21b      	sxth	r3, r3
 8003352:	f107 010c 	add.w	r1, r7, #12
 8003356:	f107 000e 	add.w	r0, r7, #14
 800335a:	4622      	mov	r2, r4
 800335c:	f7ff ff13 	bl	8003186 <ucg_clip_intersection>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <ucg_clip_l90fx+0x13e>
	return 0;
 8003366:	2300      	movs	r3, #0
 8003368:	e0db      	b.n	8003522 <ucg_clip_l90fx+0x2f6>

      ucg->arg.offset = a - ucg->arg.pixel.pos.y;
 800336a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800336e:	b29a      	uxth	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003376:	b29b      	uxth	r3, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	b29b      	uxth	r3, r3
 800337c:	b21a      	sxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = a;
 8003382:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	84da      	strh	r2, [r3, #38]	; 0x26
      b -= a;
 800338a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800338e:	b29a      	uxth	r2, r3
 8003390:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003394:	b29b      	uxth	r3, r3
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	b29b      	uxth	r3, r3
 800339a:	b21b      	sxth	r3, r3
 800339c:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 800339e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 80033a6:	e0bb      	b.n	8003520 <ucg_clip_l90fx+0x2f4>
    case 2:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fec7 	bl	800313c <ucg_clip_is_y_visible>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <ucg_clip_l90fx+0x18c>
	return 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e0b4      	b.n	8003522 <ucg_clip_l90fx+0x2f6>
      
      b = ucg->arg.pixel.pos.x;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80033be:	81bb      	strh	r3, [r7, #12]
      b++;
 80033c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 80033ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033d2:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 80033d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b21b      	sxth	r3, r3
 80033e8:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80033fe:	b29b      	uxth	r3, r3
 8003400:	4413      	add	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	b21b      	sxth	r3, r3
 8003406:	f107 010c 	add.w	r1, r7, #12
 800340a:	f107 000e 	add.w	r0, r7, #14
 800340e:	4622      	mov	r2, r4
 8003410:	f7ff feb9 	bl	8003186 <ucg_clip_intersection>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <ucg_clip_l90fx+0x1f2>
	return 0;
 800341a:	2300      	movs	r3, #0
 800341c:	e081      	b.n	8003522 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 800341e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003422:	b29a      	uxth	r2, r3
 8003424:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003428:	b29b      	uxth	r3, r3
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	b29b      	uxth	r3, r3
 800342e:	b21a      	sxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8003434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	b21b      	sxth	r3, r3
 8003440:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.x-b;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003448:	b29a      	uxth	r2, r3
 800344a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800344e:	b29b      	uxth	r3, r3
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	b29b      	uxth	r3, r3
 8003454:	b21a      	sxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = b;
 800345a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	849a      	strh	r2, [r3, #36]	; 0x24
      
      break;
 8003462:	e05d      	b.n	8003520 <ucg_clip_l90fx+0x2f4>
    case 3:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fe44 	bl	80030f2 <ucg_clip_is_x_visible>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <ucg_clip_l90fx+0x248>
	return 0;
 8003470:	2300      	movs	r3, #0
 8003472:	e056      	b.n	8003522 <ucg_clip_l90fx+0x2f6>

      b = ucg->arg.pixel.pos.y;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800347a:	81bb      	strh	r3, [r7, #12]
      b++;
 800347c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003480:	b29b      	uxth	r3, r3
 8003482:	3301      	adds	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	b21b      	sxth	r3, r3
 8003488:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 800348a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800348e:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 8003490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800349c:	b29b      	uxth	r3, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	b21b      	sxth	r3, r3
 80034a4:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4413      	add	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	b21b      	sxth	r3, r3
 80034c2:	f107 010c 	add.w	r1, r7, #12
 80034c6:	f107 000e 	add.w	r0, r7, #14
 80034ca:	4622      	mov	r2, r4
 80034cc:	f7ff fe5b 	bl	8003186 <ucg_clip_intersection>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <ucg_clip_l90fx+0x2ae>
	return 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e023      	b.n	8003522 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 80034da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 80034f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.y-b;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003504:	b29a      	uxth	r2, r3
 8003506:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800350a:	b29b      	uxth	r3, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	b29b      	uxth	r3, r3
 8003510:	b21a      	sxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = b;
 8003516:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	84da      	strh	r2, [r3, #38]	; 0x26
      
      
      break;
 800351e:	bf00      	nop
  }

  return 1;
 8003520:	2301      	movs	r3, #1
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bd90      	pop	{r4, r7, pc}
 800352a:	bf00      	nop

0800352c <ucg_clip_l90se>:
  return 1;
}
*/

ucg_int_t ucg_clip_l90se(ucg_t *ucg)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if ( ucg_clip_l90fx(ucg) == 0 )
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff fe79 	bl	800322c <ucg_clip_l90fx>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <ucg_clip_l90se+0x18>
      return 0;
 8003540:	2300      	movs	r3, #0
 8003542:	e019      	b.n	8003578 <ucg_clip_l90se+0x4c>
  for ( i = 0; i < 3; i++ )
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e012      	b.n	8003570 <ucg_clip_l90se+0x44>
  {
    ucg_ccs_seek(ucg->arg.ccs_line+i, ucg->arg.offset);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	18ca      	adds	r2, r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f7ff fd5f 	bl	8003028 <ucg_ccs_seek>
  for ( i = 0; i < 3; i++ )
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	3301      	adds	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d9e9      	bls.n	800354a <ucg_clip_l90se+0x1e>
  }  
  return 1;
 8003576:	2301      	movs	r3, #1
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <ucg_com_PowerDown>:
  return 1;
}


void ucg_com_PowerDown(ucg_t *ucg)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ( (ucg->com_status & UCG_COM_STATUS_MASK_POWER) != 0 )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <ucg_com_PowerDown+0x24>
    ucg->com_cb(ucg, UCG_COM_MSG_POWER_DOWN, 0, NULL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69dc      	ldr	r4, [r3, #28]
 800359a:	2300      	movs	r3, #0
 800359c:	2200      	movs	r2, #0
 800359e:	210b      	movs	r1, #11
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	47a0      	blx	r4
  ucg->com_status &= ~UCG_COM_STATUS_MASK_POWER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80035aa:	f023 0308 	bic.w	r3, r3, #8
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}

080035be <ucg_com_PowerUp>:

/*
  clk_speed in nano-seconds, range: 0..4095
*/
int16_t ucg_com_PowerUp(ucg_t *ucg, uint16_t serial_clk_speed, uint16_t parallel_clk_speed)
{
 80035be:	b590      	push	{r4, r7, lr}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	807b      	strh	r3, [r7, #2]
 80035ca:	4613      	mov	r3, r2
 80035cc:	803b      	strh	r3, [r7, #0]
  int16_t r;
  ucg_com_info_t com_info;
  com_info.serial_clk_speed = serial_clk_speed;
 80035ce:	887b      	ldrh	r3, [r7, #2]
 80035d0:	813b      	strh	r3, [r7, #8]
  com_info.parallel_clk_speed = parallel_clk_speed;
 80035d2:	883b      	ldrh	r3, [r7, #0]
 80035d4:	817b      	strh	r3, [r7, #10]
  
  ucg_com_PowerDown(ucg);  
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ffd2 	bl	8003580 <ucg_com_PowerDown>
  ucg->com_initial_change_sent = 0;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  r = ucg->com_cb(ucg, UCG_COM_MSG_POWER_UP, 0UL, (uint8_t *)&com_info);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69dc      	ldr	r4, [r3, #28]
 80035e8:	f107 0308 	add.w	r3, r7, #8
 80035ec:	2200      	movs	r2, #0
 80035ee:	210a      	movs	r1, #10
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	47a0      	blx	r4
 80035f4:	4603      	mov	r3, r0
 80035f6:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 80035f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <ucg_com_PowerUp+0x54>
  {
    ucg->com_status |= UCG_COM_STATUS_MASK_POWER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003606:	f043 0308 	orr.w	r3, r3, #8
 800360a:	b2da      	uxtb	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  }
  return r;
 8003612:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}

0800361e <ucg_com_SetLineStatus>:

void ucg_com_SetLineStatus(ucg_t *ucg, uint8_t level, uint8_t mask, uint8_t msg)
{
 800361e:	b590      	push	{r4, r7, lr}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	4608      	mov	r0, r1
 8003628:	4611      	mov	r1, r2
 800362a:	461a      	mov	r2, r3
 800362c:	4603      	mov	r3, r0
 800362e:	70fb      	strb	r3, [r7, #3]
 8003630:	460b      	mov	r3, r1
 8003632:	70bb      	strb	r3, [r7, #2]
 8003634:	4613      	mov	r3, r2
 8003636:	707b      	strb	r3, [r7, #1]
  if ( level == 0 )
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d131      	bne.n	80036a2 <ucg_com_SetLineStatus+0x84>
  {
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == mask )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003644:	78bb      	ldrb	r3, [r7, #2]
 8003646:	4013      	ands	r3, r2
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <ucg_com_SetLineStatus+0x42>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8003654:	78bb      	ldrb	r3, [r7, #2]
 8003656:	4013      	ands	r3, r2
 8003658:	b2db      	uxtb	r3, r3
 800365a:	78ba      	ldrb	r2, [r7, #2]
 800365c:	429a      	cmp	r2, r3
 800365e:	d14b      	bne.n	80036f8 <ucg_com_SetLineStatus+0xda>
    {
      ucg->com_cb(ucg, msg, level, NULL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69dc      	ldr	r4, [r3, #28]
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	b219      	sxth	r1, r3
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	b29a      	uxth	r2, r3
 800366c:	2300      	movs	r3, #0
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	47a0      	blx	r4
      ucg->com_status &= ~mask;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003678:	b25a      	sxtb	r2, r3
 800367a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800367e:	43db      	mvns	r3, r3
 8003680:	b25b      	sxtb	r3, r3
 8003682:	4013      	ands	r3, r2
 8003684:	b25b      	sxtb	r3, r3
 8003686:	b2da      	uxtb	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003694:	78bb      	ldrb	r3, [r7, #2]
 8003696:	4313      	orrs	r3, r2
 8003698:	b2da      	uxtb	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
      ucg->com_cb(ucg, msg, level, NULL);
      ucg->com_status |= mask;
      ucg->com_initial_change_sent |= mask;
    }
  }
}
 80036a0:	e02a      	b.n	80036f8 <ucg_com_SetLineStatus+0xda>
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == 0 )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80036a8:	78bb      	ldrb	r3, [r7, #2]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <ucg_com_SetLineStatus+0xa4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80036b8:	78bb      	ldrb	r3, [r7, #2]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11a      	bne.n	80036f8 <ucg_com_SetLineStatus+0xda>
      ucg->com_cb(ucg, msg, level, NULL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69dc      	ldr	r4, [r3, #28]
 80036c6:	787b      	ldrb	r3, [r7, #1]
 80036c8:	b219      	sxth	r1, r3
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	2300      	movs	r3, #0
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	47a0      	blx	r4
      ucg->com_status |= mask;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80036da:	78bb      	ldrb	r3, [r7, #2]
 80036dc:	4313      	orrs	r3, r2
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80036ec:	78bb      	ldrb	r3, [r7, #2]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}

08003700 <ucg_com_SetResetLineStatus>:

void ucg_com_SetResetLineStatus(ucg_t *ucg, uint8_t level)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_RESET, UCG_COM_MSG_CHANGE_RESET_LINE);
 800370c:	78f9      	ldrb	r1, [r7, #3]
 800370e:	230d      	movs	r3, #13
 8003710:	2204      	movs	r2, #4
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ff83 	bl	800361e <ucg_com_SetLineStatus>
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <ucg_com_SetCSLineStatus>:

void ucg_com_SetCSLineStatus(ucg_t *ucg, uint8_t level)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CS, UCG_COM_MSG_CHANGE_CS_LINE);
 800372c:	78f9      	ldrb	r1, [r7, #3]
 800372e:	230e      	movs	r3, #14
 8003730:	2202      	movs	r2, #2
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ff73 	bl	800361e <ucg_com_SetLineStatus>
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <ucg_com_SetCDLineStatus>:

void ucg_com_SetCDLineStatus(ucg_t *ucg, uint8_t level)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CD, UCG_COM_MSG_CHANGE_CD_LINE);
 800374c:	78f9      	ldrb	r1, [r7, #3]
 800374e:	230f      	movs	r3, #15
 8003750:	2201      	movs	r2, #1
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ff63 	bl	800361e <ucg_com_SetLineStatus>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <ucg_com_DelayMicroseconds>:

/* delay in microseconds */
void ucg_com_DelayMicroseconds(ucg_t *ucg, uint16_t delay)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
  ucg->com_cb(ucg, UCG_COM_MSG_DELAY, delay, NULL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69dc      	ldr	r4, [r3, #28]
 8003770:	887a      	ldrh	r2, [r7, #2]
 8003772:	2300      	movs	r3, #0
 8003774:	210c      	movs	r1, #12
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	47a0      	blx	r4
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bd90      	pop	{r4, r7, pc}

08003782 <ucg_com_DelayMilliseconds>:

/* delay in milliseconds */
void ucg_com_DelayMilliseconds(ucg_t *ucg, uint16_t delay)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 800378e:	e007      	b.n	80037a0 <ucg_com_DelayMilliseconds+0x1e>
  {
    ucg_com_DelayMicroseconds(ucg, 1000);
 8003790:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ffe3 	bl	8003760 <ucg_com_DelayMicroseconds>
    delay--;
 800379a:	887b      	ldrh	r3, [r7, #2]
 800379c:	3b01      	subs	r3, #1
 800379e:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f4      	bne.n	8003790 <ucg_com_DelayMilliseconds+0xe>
  }
}
 80037a6:	bf00      	nop
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <ucg_com_SendByte>:


#ifndef ucg_com_SendByte
void ucg_com_SendByte(ucg_t *ucg, uint8_t byte)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, byte, NULL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69dc      	ldr	r4, [r3, #28]
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	2110      	movs	r1, #16
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	47a0      	blx	r4
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}

080037d4 <ucg_com_SendStringP>:
{
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_STR, cnt, (uint8_t *)byte_ptr);
}

void ucg_com_SendStringP(ucg_t *ucg, uint16_t cnt, const ucg_pgm_uint8_t *byte_ptr)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	460b      	mov	r3, r1
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	817b      	strh	r3, [r7, #10]
  uint8_t b;
  while( cnt > 0 )
 80037e2:	e010      	b.n	8003806 <ucg_com_SendStringP+0x32>
  {
    b = ucg_pgm_read(byte_ptr);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	75fb      	strb	r3, [r7, #23]
    //b = *byte_ptr;
    ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, b, NULL);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	69dc      	ldr	r4, [r3, #28]
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	2110      	movs	r1, #16
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	47a0      	blx	r4
    byte_ptr++;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3301      	adds	r3, #1
 80037fe:	607b      	str	r3, [r7, #4]
    cnt--;
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	3b01      	subs	r3, #1
 8003804:	817b      	strh	r3, [r7, #10]
  while( cnt > 0 )
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1eb      	bne.n	80037e4 <ucg_com_SendStringP+0x10>
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd90      	pop	{r4, r7, pc}

08003816 <ucg_com_SendCmdArg>:
#define END()					0x00

*/

static void ucg_com_SendCmdArg(ucg_t *ucg, const ucg_pgm_uint8_t *data, uint8_t cmd_cnt, uint8_t arg_cnt)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	4611      	mov	r1, r2
 8003822:	461a      	mov	r2, r3
 8003824:	460b      	mov	r3, r1
 8003826:	71fb      	strb	r3, [r7, #7]
 8003828:	4613      	mov	r3, r2
 800382a:	71bb      	strb	r3, [r7, #6]
  ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd>>1)&1 );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	4619      	mov	r1, r3
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff ff7e 	bl	8003740 <ucg_com_SetCDLineStatus>
  ucg_com_SendStringP(ucg, cmd_cnt, data);
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	b29b      	uxth	r3, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	4619      	mov	r1, r3
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff ffc1 	bl	80037d4 <ucg_com_SendStringP>
  if ( arg_cnt > 0 )
 8003852:	79bb      	ldrb	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d014      	beq.n	8003882 <ucg_com_SendCmdArg+0x6c>
  {
    data += cmd_cnt;
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
    ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	4619      	mov	r1, r3
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff ff66 	bl	8003740 <ucg_com_SetCDLineStatus>
    ucg_com_SendStringP(ucg, arg_cnt, data);
 8003874:	79bb      	ldrb	r3, [r7, #6]
 8003876:	b29b      	uxth	r3, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	4619      	mov	r1, r3
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff ffa9 	bl	80037d4 <ucg_com_SendStringP>
  }
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <ucg_com_SendCmdSeq>:


//void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint8_t hi;
  uint8_t lo;

  for(;;)
  {
    b = ucg_pgm_read(data);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	73fb      	strb	r3, [r7, #15]
    //b = *data;
    hi = (b) >> 4;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	73bb      	strb	r3, [r7, #14]
    lo = (b) & 0x0f;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	737b      	strb	r3, [r7, #13]
    switch( hi )
 80038aa:	7bbb      	ldrb	r3, [r7, #14]
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	f200 8127 	bhi.w	8003b00 <ucg_com_SendCmdSeq+0x274>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <ucg_com_SendCmdSeq+0x2c>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	08003b01 	.word	0x08003b01
 80038bc:	080038f9 	.word	0x080038f9
 80038c0:	080038f9 	.word	0x080038f9
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003b01 	.word	0x08003b01
 80038cc:	08003b01 	.word	0x08003b01
 80038d0:	08003919 	.word	0x08003919
 80038d4:	0800394b 	.word	0x0800394b
 80038d8:	0800398f 	.word	0x0800398f
 80038dc:	080039bb 	.word	0x080039bb
 80038e0:	080039e7 	.word	0x080039e7
 80038e4:	08003a47 	.word	0x08003a47
 80038e8:	08003b01 	.word	0x08003b01
 80038ec:	08003b01 	.word	0x08003b01
 80038f0:	08003b01 	.word	0x08003b01
 80038f4:	08003aa7 	.word	0x08003aa7
      case 0:
	return;		/* end marker */
      case 1:
      case 2:
      case 3:
	ucg_com_SendCmdArg(ucg, data+1, hi, lo);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	1c59      	adds	r1, r3, #1
 80038fc:	7b7b      	ldrb	r3, [r7, #13]
 80038fe:	7bba      	ldrb	r2, [r7, #14]
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff88 	bl	8003816 <ucg_com_SendCmdArg>
	data+=1+hi+lo;
 8003906:	7bbb      	ldrb	r3, [r7, #14]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	7b7b      	ldrb	r3, [r7, #13]
 800390c:	4413      	add	r3, r2
 800390e:	461a      	mov	r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4413      	add	r3, r2
 8003914:	603b      	str	r3, [r7, #0]
	break;
 8003916:	e0f2      	b.n	8003afe <ucg_com_SendCmdSeq+0x272>
      case 6:
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff0a 	bl	8003740 <ucg_com_SetCDLineStatus>
	ucg_com_SendStringP(ucg, lo, data+1);
 800392c:	7b7b      	ldrb	r3, [r7, #13]
 800392e:	b299      	uxth	r1, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	461a      	mov	r2, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ff4c 	bl	80037d4 <ucg_com_SendStringP>
	data+=1+lo;      
 800393c:	7b7b      	ldrb	r3, [r7, #13]
 800393e:	3301      	adds	r3, #1
 8003940:	461a      	mov	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	4413      	add	r3, r2
 8003946:	603b      	str	r3, [r7, #0]
	break;
 8003948:	e0d9      	b.n	8003afe <ucg_com_SendCmdSeq+0x272>
      case 7:	/* note: 0x070 is used to set data line status */
	ucg_com_SetCDLineStatus(ucg, ((ucg->com_cfg_cd>>1)&1)^1 );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	4619      	mov	r1, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff feeb 	bl	8003740 <ucg_com_SetCDLineStatus>
	if ( lo > 0 )
 800396a:	7b7b      	ldrb	r3, [r7, #13]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <ucg_com_SendCmdSeq+0xf4>
	  ucg_com_SendStringP(ucg, lo, data+1);
 8003970:	7b7b      	ldrb	r3, [r7, #13]
 8003972:	b299      	uxth	r1, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	461a      	mov	r2, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff2a 	bl	80037d4 <ucg_com_SendStringP>
	data+=1+lo;      
 8003980:	7b7b      	ldrb	r3, [r7, #13]
 8003982:	3301      	adds	r3, #1
 8003984:	461a      	mov	r2, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	4413      	add	r3, r2
 800398a:	603b      	str	r3, [r7, #0]
	break;
 800398c:	e0b7      	b.n	8003afe <ucg_com_SendCmdSeq+0x272>
      case 8:
	data++;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMilliseconds(ucg, (((uint16_t)lo)<<8) + b );
 800399a:	7b7b      	ldrb	r3, [r7, #13]
 800399c:	b29b      	uxth	r3, r3
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fee8 	bl	8003782 <ucg_com_DelayMilliseconds>
	data++;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	603b      	str	r3, [r7, #0]
	break;
 80039b8:	e0a1      	b.n	8003afe <ucg_com_SendCmdSeq+0x272>
      case 9:
	data++;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMicroseconds(ucg, (((uint16_t)lo)<<8) + b );
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff fec1 	bl	8003760 <ucg_com_DelayMicroseconds>
	data++;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	603b      	str	r3, [r7, #0]
	break;
 80039e4:	e08b      	b.n	8003afe <ucg_com_SendCmdSeq+0x272>
      case 10:
	data++;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	73fb      	strb	r3, [r7, #15]
	data++;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	733b      	strb	r3, [r7, #12]
	data++;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fe94 	bl	8003740 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003a26:	441a      	add	r2, r3
 8003a28:	7b7b      	ldrb	r3, [r7, #13]
 8003a2a:	fa42 f303 	asr.w	r3, r2, r3
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	4013      	ands	r3, r2
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	7b3b      	ldrb	r3, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff feb6 	bl	80037b0 <ucg_com_SendByte>
	//data+=2;
	break;
 8003a44:	e05b      	b.n	8003afe <ucg_com_SendCmdSeq+0x272>
      case 11:
	data++;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	73fb      	strb	r3, [r7, #15]
	data++;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	733b      	strb	r3, [r7, #12]
	data++;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fe64 	bl	8003740 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003a86:	441a      	add	r2, r3
 8003a88:	7b7b      	ldrb	r3, [r7, #13]
 8003a8a:	fa42 f303 	asr.w	r3, r2, r3
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	7b3b      	ldrb	r3, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fe86 	bl	80037b0 <ucg_com_SendByte>
	//data+=2;
	break;
 8003aa4:	e02b      	b.n	8003afe <ucg_com_SendCmdSeq+0x272>
      case 15:
	hi = lo >> 2;
 8003aa6:	7b7b      	ldrb	r3, [r7, #13]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	73bb      	strb	r3, [r7, #14]
	lo &= 3;
 8003aac:	7b7b      	ldrb	r3, [r7, #13]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	737b      	strb	r3, [r7, #13]
	switch(hi)
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d018      	beq.n	8003aec <ucg_com_SendCmdSeq+0x260>
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	dc1b      	bgt.n	8003af6 <ucg_com_SendCmdSeq+0x26a>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <ucg_com_SendCmdSeq+0x23c>
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d009      	beq.n	8003ada <ucg_com_SendCmdSeq+0x24e>
 8003ac6:	e016      	b.n	8003af6 <ucg_com_SendCmdSeq+0x26a>
	{
	  case 0:
	    ucg_com_SetResetLineStatus(ucg, lo&1);
 8003ac8:	7b7b      	ldrb	r3, [r7, #13]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fe14 	bl	8003700 <ucg_com_SetResetLineStatus>
	    break;
 8003ad8:	e00d      	b.n	8003af6 <ucg_com_SendCmdSeq+0x26a>
	  case 1:
	    ucg_com_SetCSLineStatus(ucg, lo&1);
 8003ada:	7b7b      	ldrb	r3, [r7, #13]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff fe1b 	bl	8003720 <ucg_com_SetCSLineStatus>
	    break;
 8003aea:	e004      	b.n	8003af6 <ucg_com_SendCmdSeq+0x26a>
	  case 3:
	    ucg->com_cfg_cd = lo;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7b7a      	ldrb	r2, [r7, #13]
 8003af0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	    break;
 8003af4:	bf00      	nop
	}
	data++;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	603b      	str	r3, [r7, #0]
	break;
 8003afc:	bf00      	nop
    b = ucg_pgm_read(data);
 8003afe:	e6ca      	b.n	8003896 <ucg_com_SendCmdSeq+0xa>
      default:
	return;
 8003b00:	bf00      	nop
    }  
  }
}
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <ucg_dev_default_cb>:
  this should be (finally) called by any other device callback to handle
  messages, which are not yet handled.
*/

ucg_int_t ucg_dev_default_cb(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	460b      	mov	r3, r1
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003b16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d00a      	beq.n	8003b34 <ucg_dev_default_cb+0x2c>
 8003b1e:	2b17      	cmp	r3, #23
 8003b20:	d10f      	bne.n	8003b42 <ucg_dev_default_cb+0x3a>
  {
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	4798      	blx	r3
 8003b30:	4603      	mov	r3, r0
 8003b32:	e007      	b.n	8003b44 <ucg_dev_default_cb+0x3c>
    case UCG_MSG_SET_CLIP_BOX:
      ucg->clip_box = *(ucg_box_t *)data;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	3370      	adds	r3, #112	; 0x70
 8003b3a:	6810      	ldr	r0, [r2, #0]
 8003b3c:	6851      	ldr	r1, [r2, #4]
 8003b3e:	c303      	stmia	r3!, {r0, r1}
      break;
 8003b40:	bf00      	nop
  }
  return 1;	/* all ok */
 8003b42:	2301      	movs	r3, #1
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <ucg_ext_none>:

/*
  will be used as default cb if no extentions callback is provided
*/
ucg_int_t ucg_ext_none(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	460b      	mov	r3, r1
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	817b      	strh	r3, [r7, #10]
  return 1;	/* all ok */  
 8003b5a:	2301      	movs	r3, #1
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <ucg_handle_st7735_l90fx>:
  UCG_DATA(),								/* change to data mode */
  UCG_END()
};

ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  if ( ucg_clip_l90fx(ucg) != 0 )
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fb5b 	bl	800322c <ucg_clip_l90fx>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d056      	beq.n	8003c2a <ucg_handle_st7735_l90fx+0xc2>
  {
    switch(ucg->arg.dir)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d010      	beq.n	8003ba8 <ucg_handle_st7735_l90fx+0x40>
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	dc20      	bgt.n	8003bcc <ucg_handle_st7735_l90fx+0x64>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <ucg_handle_st7735_l90fx+0x2c>
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d005      	beq.n	8003b9e <ucg_handle_st7735_l90fx+0x36>
 8003b92:	e01b      	b.n	8003bcc <ucg_handle_st7735_l90fx+0x64>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8003b94:	4927      	ldr	r1, [pc, #156]	; (8003c34 <ucg_handle_st7735_l90fx+0xcc>)
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fe78 	bl	800388c <ucg_com_SendCmdSeq>
	break;
 8003b9c:	e028      	b.n	8003bf0 <ucg_handle_st7735_l90fx+0x88>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 8003b9e:	4926      	ldr	r1, [pc, #152]	; (8003c38 <ucg_handle_st7735_l90fx+0xd0>)
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fe73 	bl	800388c <ucg_com_SendCmdSeq>
	break;
 8003ba6:	e023      	b.n	8003bf0 <ucg_handle_st7735_l90fx+0x88>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bac:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.x = 127-tmp;
 8003bae:	89fb      	ldrh	r3, [r7, #14]
 8003bb0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b21a      	sxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8003bbc:	491f      	ldr	r1, [pc, #124]	; (8003c3c <ucg_handle_st7735_l90fx+0xd4>)
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fe64 	bl	800388c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	89fa      	ldrh	r2, [r7, #14]
 8003bc8:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8003bca:	e011      	b.n	8003bf0 <ucg_handle_st7735_l90fx+0x88>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd0:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.y = 127-tmp;
 8003bd2:	89fb      	ldrh	r3, [r7, #14]
 8003bd4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	b21a      	sxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8003be0:	4917      	ldr	r1, [pc, #92]	; (8003c40 <ucg_handle_st7735_l90fx+0xd8>)
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fe52 	bl	800388c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	89fa      	ldrh	r2, [r7, #14]
 8003bec:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 8003bee:	bf00      	nop
    }
    c[0] = ucg->arg.pixel.rgb.color[0];
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf6:	723b      	strb	r3, [r7, #8]
    c[1] = ucg->arg.pixel.rgb.color[1];
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bfe:	727b      	strb	r3, [r7, #9]
    c[2] = ucg->arg.pixel.rgb.color[2];
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c06:	72bb      	strb	r3, [r7, #10]
    ucg_com_SendRepeat3Bytes(ucg, ucg->arg.len, c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69dc      	ldr	r4, [r3, #28]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	f107 0308 	add.w	r3, r7, #8
 8003c18:	2113      	movs	r1, #19
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	47a0      	blx	r4
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8003c1e:	2101      	movs	r1, #1
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fd7d 	bl	8003720 <ucg_com_SetCSLineStatus>
    return 1;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <ucg_handle_st7735_l90fx+0xc4>
  }
  return 0;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}
 8003c34:	08005960 	.word	0x08005960
 8003c38:	08005980 	.word	0x08005980
 8003c3c:	080059a4 	.word	0x080059a4
 8003c40:	080059c8 	.word	0x080059c8

08003c44 <ucg_handle_st7735_l90se>:
  return 0;
}


ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  
  /* Setup ccs for l90se. This will be updated by ucg_clip_l90se if required */
  
  for ( i = 0; i < 3; i++ )
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	75fb      	strb	r3, [r7, #23]
 8003c50:	e01a      	b.n	8003c88 <ucg_handle_st7735_l90se+0x44>
  {
    ucg_ccs_init(ucg->arg.ccs_line+i, ucg->arg.rgb[0].color[i], ucg->arg.rgb[1].color[i], ucg->arg.len);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003c58:	7dfa      	ldrb	r2, [r7, #23]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	18c8      	adds	r0, r1, r3
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4413      	add	r3, r2
 8003c74:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003c7e:	f7ff f933 	bl	8002ee8 <ucg_ccs_init>
  for ( i = 0; i < 3; i++ )
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	3301      	adds	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d9e1      	bls.n	8003c52 <ucg_handle_st7735_l90se+0xe>
  }
  
  /* check if the line is visible */
  
  if ( ucg_clip_l90se(ucg) != 0 )
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff fc4c 	bl	800352c <ucg_clip_l90se>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d074      	beq.n	8003d84 <ucg_handle_st7735_l90se+0x140>
  {
    ucg_int_t i;
    switch(ucg->arg.dir)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d010      	beq.n	8003cc6 <ucg_handle_st7735_l90se+0x82>
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	dc20      	bgt.n	8003cea <ucg_handle_st7735_l90se+0xa6>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <ucg_handle_st7735_l90se+0x6e>
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d005      	beq.n	8003cbc <ucg_handle_st7735_l90se+0x78>
 8003cb0:	e01b      	b.n	8003cea <ucg_handle_st7735_l90se+0xa6>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8003cb2:	4937      	ldr	r1, [pc, #220]	; (8003d90 <ucg_handle_st7735_l90se+0x14c>)
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fde9 	bl	800388c <ucg_com_SendCmdSeq>
	break;
 8003cba:	e028      	b.n	8003d0e <ucg_handle_st7735_l90se+0xca>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 8003cbc:	4935      	ldr	r1, [pc, #212]	; (8003d94 <ucg_handle_st7735_l90se+0x150>)
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fde4 	bl	800388c <ucg_com_SendCmdSeq>
	break;
 8003cc4:	e023      	b.n	8003d0e <ucg_handle_st7735_l90se+0xca>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cca:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.x = 127-tmp;
 8003ccc:	8a7b      	ldrh	r3, [r7, #18]
 8003cce:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b21a      	sxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8003cda:	492f      	ldr	r1, [pc, #188]	; (8003d98 <ucg_handle_st7735_l90se+0x154>)
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff fdd5 	bl	800388c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8a7a      	ldrh	r2, [r7, #18]
 8003ce6:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8003ce8:	e011      	b.n	8003d0e <ucg_handle_st7735_l90se+0xca>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cee:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.y = 127-tmp;
 8003cf0:	8a7b      	ldrh	r3, [r7, #18]
 8003cf2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	b21a      	sxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8003cfe:	4927      	ldr	r1, [pc, #156]	; (8003d9c <ucg_handle_st7735_l90se+0x158>)
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fdc3 	bl	800388c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8a7a      	ldrh	r2, [r7, #18]
 8003d0a:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 8003d0c:	bf00      	nop
    }
    
    for( i = 0; i < ucg->arg.len; i++ )
 8003d0e:	2300      	movs	r3, #0
 8003d10:	82bb      	strh	r3, [r7, #20]
 8003d12:	e02a      	b.n	8003d6a <ucg_handle_st7735_l90se+0x126>
    {
      c[0] = ucg->arg.ccs_line[0].current;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003d1a:	733b      	strb	r3, [r7, #12]
      c[1] = ucg->arg.ccs_line[1].current; 
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d22:	737b      	strb	r3, [r7, #13]
      c[2] = ucg->arg.ccs_line[2].current;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003d2a:	73bb      	strb	r3, [r7, #14]
      ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69dc      	ldr	r4, [r3, #28]
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	2201      	movs	r2, #1
 8003d36:	2113      	movs	r1, #19
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	47a0      	blx	r4
      ucg_ccs_step(ucg->arg.ccs_line+0);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3346      	adds	r3, #70	; 0x46
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff f931 	bl	8002fa8 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+1);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3346      	adds	r3, #70	; 0x46
 8003d4a:	330e      	adds	r3, #14
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff f92b 	bl	8002fa8 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+2);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3346      	adds	r3, #70	; 0x46
 8003d56:	331c      	adds	r3, #28
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff f925 	bl	8002fa8 <ucg_ccs_step>
    for( i = 0; i < ucg->arg.len; i++ )
 8003d5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	82bb      	strh	r3, [r7, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003d70:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	dbcd      	blt.n	8003d14 <ucg_handle_st7735_l90se+0xd0>
    }
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8003d78:	2101      	movs	r1, #1
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fcd0 	bl	8003720 <ucg_com_SetCSLineStatus>
    return 1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <ucg_handle_st7735_l90se+0x142>
  }
  return 0;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08005960 	.word	0x08005960
 8003d94:	08005980 	.word	0x08005980
 8003d98:	080059a4 	.word	0x080059a4
 8003d9c:	080059c8 	.word	0x080059c8

08003da0 <ucg_dev_ic_st7735_18>:
	UCG_CS(1),					/* disable chip */
	UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	460b      	mov	r3, r1
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003dae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003db2:	3b0a      	subs	r3, #10
 8003db4:	2b0b      	cmp	r3, #11
 8003db6:	d85f      	bhi.n	8003e78 <ucg_dev_ic_st7735_18+0xd8>
 8003db8:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <ucg_dev_ic_st7735_18+0x20>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003df1 	.word	0x08003df1
 8003dc4:	08003e0b 	.word	0x08003e0b
 8003dc8:	08003e79 	.word	0x08003e79
 8003dcc:	08003e79 	.word	0x08003e79
 8003dd0:	08003e79 	.word	0x08003e79
 8003dd4:	08003e17 	.word	0x08003e17
 8003dd8:	08003e79 	.word	0x08003e79
 8003ddc:	08003e79 	.word	0x08003e79
 8003de0:	08003e79 	.word	0x08003e79
 8003de4:	08003e79 	.word	0x08003e79
 8003de8:	08003e27 	.word	0x08003e27
 8003dec:	08003e6f 	.word	0x08003e6f
  {
    case UCG_MSG_DEV_POWER_UP:
      /* setup com interface and provide information on the clock speed */
      /* of the serial and parallel interface. Values are nanoseconds. */
	  ucg->display_offset.x = 2;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2202      	movs	r2, #2
 8003df4:	841a      	strh	r2, [r3, #32]
	  ucg->display_offset.y = 1;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	845a      	strh	r2, [r3, #34]	; 0x22
      return ucg_com_PowerUp(ucg, 100, 66);
 8003dfc:	2242      	movs	r2, #66	; 0x42
 8003dfe:	2164      	movs	r1, #100	; 0x64
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fbdc 	bl	80035be <ucg_com_PowerUp>
 8003e06:	4603      	mov	r3, r0
 8003e08:	e03e      	b.n	8003e88 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DEV_POWER_DOWN:
      ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
 8003e0a:	4921      	ldr	r1, [pc, #132]	; (8003e90 <ucg_dev_ic_st7735_18+0xf0>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fd3d 	bl	800388c <ucg_com_SendCmdSeq>
      return 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e038      	b.n	8003e88 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	805a      	strh	r2, [r3, #2]
      return 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e030      	b.n	8003e88 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_PIXEL:
      if ( ucg_clip_is_pixel_visible(ucg) !=0 )
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff f9e7 	bl	80031fa <ucg_clip_is_pixel_visible>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01b      	beq.n	8003e6a <ucg_dev_ic_st7735_18+0xca>
      {
	uint8_t c[3];
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_seq);	
 8003e32:	4918      	ldr	r1, [pc, #96]	; (8003e94 <ucg_dev_ic_st7735_18+0xf4>)
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff fd29 	bl	800388c <ucg_com_SendCmdSeq>
	c[0] = ucg->arg.pixel.rgb.color[0];
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e40:	753b      	strb	r3, [r7, #20]
	c[1] = ucg->arg.pixel.rgb.color[1];
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e48:	757b      	strb	r3, [r7, #21]
	c[2] = ucg->arg.pixel.rgb.color[2];
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e50:	75bb      	strb	r3, [r7, #22]
	ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	69dc      	ldr	r4, [r3, #28]
 8003e56:	f107 0314 	add.w	r3, r7, #20
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	2113      	movs	r1, #19
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	47a0      	blx	r4
	ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8003e62:	2101      	movs	r1, #1
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff fc5b 	bl	8003720 <ucg_com_SetCSLineStatus>
      }
      return 1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00c      	b.n	8003e88 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_L90FX:
      //ucg_handle_l90fx(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90fx(ucg);
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff fe7a 	bl	8003b68 <ucg_handle_st7735_l90fx>
      return 1;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e007      	b.n	8003e88 <ucg_dev_ic_st7735_18+0xe8>
    /*
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
    */
  }
  return ucg_dev_default_cb(ucg, msg, data);  
 8003e78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fe41 	bl	8003b08 <ucg_dev_default_cb>
 8003e86:	4603      	mov	r3, r0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd90      	pop	{r4, r7, pc}
 8003e90:	080059ec 	.word	0x080059ec
 8003e94:	08005940 	.word	0x08005940

08003e98 <ucg_ext_st7735_18>:

ucg_int_t ucg_ext_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003ea6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003eaa:	2b17      	cmp	r3, #23
 8003eac:	d103      	bne.n	8003eb6 <ucg_ext_st7735_18+0x1e>
  {
    case UCG_MSG_DRAW_L90SE:
      //ucg_handle_l90se(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90se(ucg);
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff fec8 	bl	8003c44 <ucg_handle_st7735_l90se>
      break;
 8003eb4:	bf00      	nop
  }
  return 1;
 8003eb6:	2301      	movs	r3, #1
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <ucg_PowerDown>:

#include "ucg.h"
#include <stddef.h>

void ucg_PowerDown(ucg_t *ucg)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if ( ucg->is_power_up != 0 )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <ucg_PowerDown+0x2c>
  {
    ucg->device_cb(ucg, UCG_MSG_DEV_POWER_DOWN, NULL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2200      	movs	r2, #0
 8003edc:	210b      	movs	r1, #11
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
    ucg->is_power_up = 0;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	7813      	ldrb	r3, [r2, #0]
 8003ee6:	f36f 0300 	bfc	r3, #0, #1
 8003eea:	7013      	strb	r3, [r2, #0]
  }
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <ucg_PowerUp>:

ucg_int_t ucg_PowerUp(ucg_t *ucg)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  ucg_int_t r;
  /* power down first. will do nothing if power is already down */
  ucg_PowerDown(ucg);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ffdf 	bl	8003ec0 <ucg_PowerDown>
  /* now try to power up the display */
  r = ucg->device_cb(ucg, UCG_MSG_DEV_POWER_UP, NULL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	210a      	movs	r1, #10
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8003f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <ucg_PowerUp+0x30>
  {
    ucg->is_power_up = 1;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	7813      	ldrb	r3, [r2, #0]
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	7013      	strb	r3, [r2, #0]
  }
  return r;
 8003f24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <ucg_SetClipBox>:

void ucg_SetClipBox(ucg_t *ucg, ucg_box_t *clip_box)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  ucg->device_cb(ucg, UCG_MSG_SET_CLIP_BOX, (void *)(clip_box));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	210c      	movs	r1, #12
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <ucg_SetMaxClipRange>:
  clip_box.size.h = h;
  ucg_SetClipBox(ucg, &clip_box);
}

void ucg_SetMaxClipRange(ucg_t *ucg)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  ucg_box_t new_clip_box;
  new_clip_box.size = ucg->dimension;
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	3202      	adds	r2, #2
 8003f5e:	6810      	ldr	r0, [r2, #0]
 8003f60:	6018      	str	r0, [r3, #0]
  new_clip_box.ul.x = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	813b      	strh	r3, [r7, #8]
  new_clip_box.ul.y = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	817b      	strh	r3, [r7, #10]
  ucg_SetClipBox(ucg, &new_clip_box);
 8003f6a:	f107 0308 	add.w	r3, r7, #8
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ffdd 	bl	8003f30 <ucg_SetClipBox>
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <ucg_GetDimension>:
/* 
  Query the display dimension from the driver, reset clip window to maximum 
  new dimension
*/
void ucg_GetDimension(ucg_t *ucg)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_GET_DIMENSION, &(ucg->dimension));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	3202      	adds	r2, #2
 8003f8e:	210f      	movs	r1, #15
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
  ucg_SetMaxClipRange(ucg);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ffda 	bl	8003f4e <ucg_SetMaxClipRange>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <ucg_DrawL90FXWithArg>:
{
  ucg->device_cb(ucg, UCG_MSG_DRAW_PIXEL, NULL);
}

void ucg_DrawL90FXWithArg(ucg_t *ucg)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_L90FX, &(ucg->arg));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	3224      	adds	r2, #36	; 0x24
 8003fb2:	2115      	movs	r1, #21
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <ucg_dev_st7735_18x128x128>:
  UCG_CS(1),					/* disable chip */
  UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_st7735_18x128x128(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003fce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	d021      	beq.n	800401a <ucg_dev_st7735_18x128x128+0x5a>
 8003fd6:	2b0f      	cmp	r3, #15
 8003fd8:	dc27      	bgt.n	800402a <ucg_dev_st7735_18x128x128+0x6a>
 8003fda:	2b0a      	cmp	r3, #10
 8003fdc:	d002      	beq.n	8003fe4 <ucg_dev_st7735_18x128x128+0x24>
 8003fde:	2b0b      	cmp	r3, #11
 8003fe0:	d012      	beq.n	8004008 <ucg_dev_st7735_18x128x128+0x48>
 8003fe2:	e022      	b.n	800402a <ucg_dev_st7735_18x128x128+0x6a>
  {
    case UCG_MSG_DEV_POWER_UP:
      /* 1. Call to the controller procedures to setup the com interface */
      if ( ucg_dev_ic_st7735_18(ucg, msg, data) == 0 )
 8003fe4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff fed7 	bl	8003da0 <ucg_dev_ic_st7735_18>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <ucg_dev_st7735_18x128x128+0x3c>
	return 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e01e      	b.n	800403a <ucg_dev_st7735_18x128x128+0x7a>

      /* 2. Send specific init sequence for this display module */
      ucg_com_SendCmdSeq(ucg, ucg_tft_128x160_st7735_init_seq);
 8003ffc:	4911      	ldr	r1, [pc, #68]	; (8004044 <ucg_dev_st7735_18x128x128+0x84>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff fc44 	bl	800388c <ucg_com_SendCmdSeq>
      
      return 1;
 8004004:	2301      	movs	r3, #1
 8004006:	e018      	b.n	800403a <ucg_dev_st7735_18x128x128+0x7a>
      
    case UCG_MSG_DEV_POWER_DOWN:
      /* let do power down by the conroller procedures */
      return ucg_dev_ic_st7735_18(ucg, msg, data);  
 8004008:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4619      	mov	r1, r3
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff fec5 	bl	8003da0 <ucg_dev_ic_st7735_18>
 8004016:	4603      	mov	r3, r0
 8004018:	e00f      	b.n	800403a <ucg_dev_st7735_18x128x128+0x7a>
    
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	805a      	strh	r2, [r3, #2]
      return 1;
 8004026:	2301      	movs	r3, #1
 8004028:	e007      	b.n	800403a <ucg_dev_st7735_18x128x128+0x7a>
  }
  
  /* all other messages are handled by the controller procedures */
  return ucg_dev_ic_st7735_18(ucg, msg, data);  
 800402a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4619      	mov	r1, r3
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff feb4 	bl	8003da0 <ucg_dev_ic_st7735_18>
 8004038:	4603      	mov	r3, r0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	080059f4 	.word	0x080059f4

08004048 <ucg_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE;
static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	607b      	str	r3, [r7, #4]
  return ucg_pgm_read( (ucg_pgm_uint8_t *)font );  
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	781b      	ldrb	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <ucg_font_get_word>:

static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE; 
static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	607b      	str	r3, [r7, #4]
    pos = ucg_pgm_read( (ucg_pgm_uint8_t *)font );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	81fb      	strh	r3, [r7, #14]
    font++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3301      	adds	r3, #1
 800408a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	81fb      	strh	r3, [r7, #14]
    pos += ucg_pgm_read( (ucg_pgm_uint8_t *)font);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	b29a      	uxth	r2, r3
 8004098:	89fb      	ldrh	r3, [r7, #14]
 800409a:	4413      	add	r3, r2
 800409c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800409e:	89fb      	ldrh	r3, [r7, #14]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <ucg_read_font_info>:

/*========================================================================*/
/* new font format */
void ucg_read_font_info(ucg_font_info_t *font_info, const ucg_fntpgm_uint8_t *font)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = ucg_font_get_byte(font, 0);
 80040b6:	2100      	movs	r1, #0
 80040b8:	6838      	ldr	r0, [r7, #0]
 80040ba:	f7ff ffc5 	bl	8004048 <ucg_font_get_byte>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = ucg_font_get_byte(font, 1);
 80040c6:	2101      	movs	r1, #1
 80040c8:	6838      	ldr	r0, [r7, #0]
 80040ca:	f7ff ffbd 	bl	8004048 <ucg_font_get_byte>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = ucg_font_get_byte(font, 2);
 80040d6:	2102      	movs	r1, #2
 80040d8:	6838      	ldr	r0, [r7, #0]
 80040da:	f7ff ffb5 	bl	8004048 <ucg_font_get_byte>
 80040de:	4603      	mov	r3, r0
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = ucg_font_get_byte(font, 3);
 80040e6:	2103      	movs	r1, #3
 80040e8:	6838      	ldr	r0, [r7, #0]
 80040ea:	f7ff ffad 	bl	8004048 <ucg_font_get_byte>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = ucg_font_get_byte(font, 4);
 80040f6:	2104      	movs	r1, #4
 80040f8:	6838      	ldr	r0, [r7, #0]
 80040fa:	f7ff ffa5 	bl	8004048 <ucg_font_get_byte>
 80040fe:	4603      	mov	r3, r0
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = ucg_font_get_byte(font, 5);
 8004106:	2105      	movs	r1, #5
 8004108:	6838      	ldr	r0, [r7, #0]
 800410a:	f7ff ff9d 	bl	8004048 <ucg_font_get_byte>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = ucg_font_get_byte(font, 6);
 8004116:	2106      	movs	r1, #6
 8004118:	6838      	ldr	r0, [r7, #0]
 800411a:	f7ff ff95 	bl	8004048 <ucg_font_get_byte>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = ucg_font_get_byte(font, 7);
 8004126:	2107      	movs	r1, #7
 8004128:	6838      	ldr	r0, [r7, #0]
 800412a:	f7ff ff8d 	bl	8004048 <ucg_font_get_byte>
 800412e:	4603      	mov	r3, r0
 8004130:	461a      	mov	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = ucg_font_get_byte(font, 8);
 8004136:	2108      	movs	r1, #8
 8004138:	6838      	ldr	r0, [r7, #0]
 800413a:	f7ff ff85 	bl	8004048 <ucg_font_get_byte>
 800413e:	4603      	mov	r3, r0
 8004140:	461a      	mov	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = ucg_font_get_byte(font, 9);
 8004146:	2109      	movs	r1, #9
 8004148:	6838      	ldr	r0, [r7, #0]
 800414a:	f7ff ff7d 	bl	8004048 <ucg_font_get_byte>
 800414e:	4603      	mov	r3, r0
 8004150:	b25a      	sxtb	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = ucg_font_get_byte(font, 10);
 8004156:	210a      	movs	r1, #10
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	f7ff ff75 	bl	8004048 <ucg_font_get_byte>
 800415e:	4603      	mov	r3, r0
 8004160:	b25a      	sxtb	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = ucg_font_get_byte(font, 11);
 8004166:	210b      	movs	r1, #11
 8004168:	6838      	ldr	r0, [r7, #0]
 800416a:	f7ff ff6d 	bl	8004048 <ucg_font_get_byte>
 800416e:	4603      	mov	r3, r0
 8004170:	b25a      	sxtb	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = ucg_font_get_byte(font, 12);
 8004176:	210c      	movs	r1, #12
 8004178:	6838      	ldr	r0, [r7, #0]
 800417a:	f7ff ff65 	bl	8004048 <ucg_font_get_byte>
 800417e:	4603      	mov	r3, r0
 8004180:	b25a      	sxtb	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = ucg_font_get_byte(font, 13);
 8004186:	210d      	movs	r1, #13
 8004188:	6838      	ldr	r0, [r7, #0]
 800418a:	f7ff ff5d 	bl	8004048 <ucg_font_get_byte>
 800418e:	4603      	mov	r3, r0
 8004190:	b25a      	sxtb	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = ucg_font_get_byte(font, 14);
 8004196:	210e      	movs	r1, #14
 8004198:	6838      	ldr	r0, [r7, #0]
 800419a:	f7ff ff55 	bl	8004048 <ucg_font_get_byte>
 800419e:	4603      	mov	r3, r0
 80041a0:	b25a      	sxtb	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = ucg_font_get_byte(font, 15);
 80041a6:	210f      	movs	r1, #15
 80041a8:	6838      	ldr	r0, [r7, #0]
 80041aa:	f7ff ff4d 	bl	8004048 <ucg_font_get_byte>
 80041ae:	4603      	mov	r3, r0
 80041b0:	b25a      	sxtb	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = ucg_font_get_byte(font, 16);
 80041b6:	2110      	movs	r1, #16
 80041b8:	6838      	ldr	r0, [r7, #0]
 80041ba:	f7ff ff45 	bl	8004048 <ucg_font_get_byte>
 80041be:	4603      	mov	r3, r0
 80041c0:	b25a      	sxtb	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = ucg_font_get_word(font, 17);
 80041c6:	2111      	movs	r1, #17
 80041c8:	6838      	ldr	r0, [r7, #0]
 80041ca:	f7ff ff4f 	bl	800406c <ucg_font_get_word>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461a      	mov	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = ucg_font_get_word(font, 19);  
 80041d6:	2113      	movs	r1, #19
 80041d8:	6838      	ldr	r0, [r7, #0]
 80041da:	f7ff ff47 	bl	800406c <ucg_font_get_word>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	829a      	strh	r2, [r3, #20]
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <ucg_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t ucg_font_decode_get_unsigned_bits(ucg_font_decode_t *f, uint8_t cnt) 
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7b1b      	ldrb	r3, [r3, #12]
 80041fe:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) );  
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	7b7b      	ldrb	r3, [r7, #13]
 800420c:	fa42 f303 	asr.w	r3, r2, r3
 8004210:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004212:	7b7b      	ldrb	r3, [r7, #13]
 8004214:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8004216:	7bba      	ldrb	r2, [r7, #14]
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	4413      	add	r3, r2
 800421c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800421e:	7bbb      	ldrb	r3, [r7, #14]
 8004220:	2b07      	cmp	r3, #7
 8004222:	d91a      	bls.n	800425a <ucg_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004224:	2308      	movs	r3, #8
 8004226:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8004228:	7b3a      	ldrb	r2, [r7, #12]
 800422a:	7b7b      	ldrb	r3, [r7, #13]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) ) << (s);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	7b3b      	ldrb	r3, [r7, #12]
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	b25a      	sxtb	r2, r3
 800424a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800424e:	4313      	orrs	r3, r2
 8004250:	b25b      	sxtb	r3, r3
 8004252:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	3b08      	subs	r3, #8
 8004258:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	f04f 32ff 	mov.w	r2, #4294967295
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	b2db      	uxtb	r3, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	b2da      	uxtb	r2, r3
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	4013      	ands	r3, r2
 800426e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	7bba      	ldrb	r2, [r7, #14]
 8004274:	731a      	strb	r2, [r3, #12]
  return val;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <ucg_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t ucg_font_decode_get_signed_bits(ucg_font_decode_t *f, uint8_t cnt)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt);
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ffaa 	bl	80041ee <ucg_font_decode_get_unsigned_bits>
 800429a:	4603      	mov	r3, r0
 800429c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800429e:	2301      	movs	r3, #1
 80042a0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80042a8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	7bbb      	ldrb	r3, [r7, #14]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	73fb      	strb	r3, [r7, #15]
  return v;
 80042be:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <ucg_add_vector_y>:
}
*/

static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80042ca:	b490      	push	{r4, r7}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	4604      	mov	r4, r0
 80042d2:	4608      	mov	r0, r1
 80042d4:	4611      	mov	r1, r2
 80042d6:	461a      	mov	r2, r3
 80042d8:	4623      	mov	r3, r4
 80042da:	80fb      	strh	r3, [r7, #6]
 80042dc:	4603      	mov	r3, r0
 80042de:	717b      	strb	r3, [r7, #5]
 80042e0:	460b      	mov	r3, r1
 80042e2:	713b      	strb	r3, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d016      	beq.n	800431c <ucg_add_vector_y+0x52>
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	dc1c      	bgt.n	800432c <ucg_add_vector_y+0x62>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <ucg_add_vector_y+0x32>
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d008      	beq.n	800430c <ucg_add_vector_y+0x42>
 80042fa:	e017      	b.n	800432c <ucg_add_vector_y+0x62>
  {
    case 0:
      dy += y;
 80042fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004300:	b29a      	uxth	r2, r3
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	4413      	add	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	80fb      	strh	r3, [r7, #6]
      break;
 800430a:	e017      	b.n	800433c <ucg_add_vector_y+0x72>
    case 1:
      dy += x;
 800430c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004310:	b29a      	uxth	r2, r3
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	4413      	add	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	80fb      	strh	r3, [r7, #6]
      break;
 800431a:	e00f      	b.n	800433c <ucg_add_vector_y+0x72>
    case 2:
      dy -= y;
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004322:	b29b      	uxth	r3, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	b29b      	uxth	r3, r3
 8004328:	80fb      	strh	r3, [r7, #6]
      break;
 800432a:	e007      	b.n	800433c <ucg_add_vector_y+0x72>
    default:
      dy -= x;
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004332:	b29b      	uxth	r3, r3
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	b29b      	uxth	r3, r3
 8004338:	80fb      	strh	r3, [r7, #6]
      break;      
 800433a:	bf00      	nop
  }
  return dy;
 800433c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bc90      	pop	{r4, r7}
 8004348:	4770      	bx	lr

0800434a <ucg_add_vector_x>:

static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800434a:	b490      	push	{r4, r7}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	4604      	mov	r4, r0
 8004352:	4608      	mov	r0, r1
 8004354:	4611      	mov	r1, r2
 8004356:	461a      	mov	r2, r3
 8004358:	4623      	mov	r3, r4
 800435a:	80fb      	strh	r3, [r7, #6]
 800435c:	4603      	mov	r3, r0
 800435e:	717b      	strb	r3, [r7, #5]
 8004360:	460b      	mov	r3, r1
 8004362:	713b      	strb	r3, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d016      	beq.n	800439c <ucg_add_vector_x+0x52>
 800436e:	2b02      	cmp	r3, #2
 8004370:	dc1c      	bgt.n	80043ac <ucg_add_vector_x+0x62>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <ucg_add_vector_x+0x32>
 8004376:	2b01      	cmp	r3, #1
 8004378:	d008      	beq.n	800438c <ucg_add_vector_x+0x42>
 800437a:	e017      	b.n	80043ac <ucg_add_vector_x+0x62>
  {
    case 0:
      dx += x;
 800437c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004380:	b29a      	uxth	r2, r3
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	4413      	add	r3, r2
 8004386:	b29b      	uxth	r3, r3
 8004388:	80fb      	strh	r3, [r7, #6]
      break;
 800438a:	e017      	b.n	80043bc <ucg_add_vector_x+0x72>
    case 1:
      dx -= y;
 800438c:	88fa      	ldrh	r2, [r7, #6]
 800438e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004392:	b29b      	uxth	r3, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	b29b      	uxth	r3, r3
 8004398:	80fb      	strh	r3, [r7, #6]
      break;
 800439a:	e00f      	b.n	80043bc <ucg_add_vector_x+0x72>
    case 2:
      dx -= x;
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	80fb      	strh	r3, [r7, #6]
      break;
 80043aa:	e007      	b.n	80043bc <ucg_add_vector_x+0x72>
    default:
      dx += y;
 80043ac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	4413      	add	r3, r2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	80fb      	strh	r3, [r7, #6]
      break;      
 80043ba:	bf00      	nop
  }
  return dx;
 80043bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc90      	pop	{r4, r7}
 80043c8:	4770      	bx	lr

080043ca <ucg_font_decode_len>:
  Called by:
    ucg_font_decode_glyph()
*/
/* optimized */
void ucg_font_decode_len(ucg_t *ucg, uint8_t len, uint8_t is_foreground)
{
 80043ca:	b590      	push	{r4, r7, lr}
 80043cc:	b089      	sub	sp, #36	; 0x24
 80043ce:	af02      	add	r7, sp, #8
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	460b      	mov	r3, r1
 80043d4:	70fb      	strb	r3, [r7, #3]
 80043d6:	4613      	mov	r3, r2
 80043d8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  ucg_int_t x, y;
  
  ucg_font_decode_t *decode = &(ucg->font_decode);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3380      	adds	r3, #128	; 0x80
 80043de:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80043ea:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80043f2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80043fa:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	7d7b      	ldrb	r3, [r7, #21]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004408:	7dfa      	ldrb	r2, [r7, #23]
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	429a      	cmp	r2, r3
 800440e:	d201      	bcs.n	8004414 <ucg_font_decode_len+0x4a>
      current = cnt;
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //ucg_font_decode_draw_pixel(ucg, lx, ly, current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	889b      	ldrh	r3, [r3, #4]
 8004418:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	88db      	ldrh	r3, [r3, #6]
 800441e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
    x = ucg_add_vector_x(x, lx, ly, decode->dir);
 8004420:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004424:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	7b9b      	ldrb	r3, [r3, #14]
 800442c:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8004430:	f7ff ff8b 	bl	800434a <ucg_add_vector_x>
 8004434:	4603      	mov	r3, r0
 8004436:	81bb      	strh	r3, [r7, #12]
    y = ucg_add_vector_y(y, lx, ly, decode->dir);
 8004438:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800443c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	7b9b      	ldrb	r3, [r3, #14]
 8004444:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8004448:	f7ff ff3f 	bl	80042ca <ucg_add_vector_y>
 800444c:	4603      	mov	r3, r0
 800444e:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8004450:	78bb      	ldrb	r3, [r7, #2]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d010      	beq.n	8004478 <ucg_font_decode_len+0xae>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 0);
 8004456:	7dbb      	ldrb	r3, [r7, #22]
 8004458:	b218      	sxth	r0, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	7b9b      	ldrb	r3, [r3, #14]
 800445e:	b21b      	sxth	r3, r3
 8004460:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004464:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004468:	2400      	movs	r4, #0
 800446a:	9401      	str	r4, [sp, #4]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	4603      	mov	r3, r0
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fbbf 	bl	8004bf4 <ucg_Draw90Line>
 8004476:	e013      	b.n	80044a0 <ucg_font_decode_len+0xd6>
    }
    else if ( decode->is_transparent == 0 )    
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	7b5b      	ldrb	r3, [r3, #13]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10f      	bne.n	80044a0 <ucg_font_decode_len+0xd6>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 1);
 8004480:	7dbb      	ldrb	r3, [r7, #22]
 8004482:	b218      	sxth	r0, r3
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	7b9b      	ldrb	r3, [r3, #14]
 8004488:	b21b      	sxth	r3, r3
 800448a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800448e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004492:	2401      	movs	r4, #1
 8004494:	9401      	str	r4, [sp, #4]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	4603      	mov	r3, r0
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fbaa 	bl	8004bf4 <ucg_Draw90Line>
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80044a0:	7dfa      	ldrb	r2, [r7, #23]
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d309      	bcc.n	80044bc <ucg_font_decode_len+0xf2>
      break;
    cnt -= rem;
 80044a8:	7dfa      	ldrb	r2, [r7, #23]
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	757b      	strb	r3, [r7, #21]
    ly++;
 80044b4:	7d3b      	ldrb	r3, [r7, #20]
 80044b6:	3301      	adds	r3, #1
 80044b8:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80044ba:	e79b      	b.n	80043f4 <ucg_font_decode_len+0x2a>
      break;
 80044bc:	bf00      	nop
  }
  //ucg_font_decode_draw_pixel(ucg, x,y, cnt, is_foreground);
  lx += cnt;
 80044be:	7d7a      	ldrb	r2, [r7, #21]
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	4413      	add	r3, r2
 80044c4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80044c6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80044ce:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	725a      	strb	r2, [r3, #9]
  
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd90      	pop	{r4, r7, pc}

080044de <ucg_font_setup_decode>:

static void ucg_font_setup_decode(ucg_t *ucg, const uint8_t *glyph_data)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  ucg_font_decode_t *decode = &(ucg->font_decode);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3380      	adds	r3, #128	; 0x80
 80044ec:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	731a      	strb	r2, [r3, #12]
  
  decode->decode_ptr += 1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]
  decode->decode_ptr += 1;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]
  
  decode->glyph_width = ucg_font_decode_get_unsigned_bits(decode, ucg->font_info.bits_per_char_width);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004514:	4619      	mov	r1, r3
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff fe69 	bl	80041ee <ucg_font_decode_get_unsigned_bits>
 800451c:	4603      	mov	r3, r0
 800451e:	b25a      	sxtb	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = ucg_font_decode_get_unsigned_bits(decode,ucg->font_info.bits_per_char_height);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800452a:	4619      	mov	r1, r3
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fe5e 	bl	80041ee <ucg_font_decode_get_unsigned_bits>
 8004532:	4603      	mov	r3, r0
 8004534:	b25a      	sxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	72da      	strb	r2, [r3, #11]
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <ucg_font_decode_glyph>:
    ucg_font_decode_len()
*/
/* optimized */

int8_t ucg_font_decode_glyph(ucg_t *ucg, const uint8_t *glyph_data)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
  int8_t d;
  int8_t h;
//  ucg_scan = ucg;
//  decode = &(ucg_scan->font_decode);
    
  ucg_font_setup_decode(ucg, glyph_data);
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ffc5 	bl	80044de <ucg_font_setup_decode>
  h = ucg->font_decode.glyph_height;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800455a:	73fb      	strb	r3, [r7, #15]
  
  x = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_x);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f7ff fe8a 	bl	8004284 <ucg_font_decode_get_signed_bits>
 8004570:	4603      	mov	r3, r0
 8004572:	73bb      	strb	r3, [r7, #14]
  y = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_y);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7ff fe7e 	bl	8004284 <ucg_font_decode_get_signed_bits>
 8004588:	4603      	mov	r3, r0
 800458a:	737b      	strb	r3, [r7, #13]
  d = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_delta_x);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7ff fe72 	bl	8004284 <ucg_font_decode_get_signed_bits>
 80045a0:	4603      	mov	r3, r0
 80045a2:	733b      	strb	r3, [r7, #12]
  
  if ( ucg->font_decode.glyph_width > 0 )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dd69      	ble.n	8004682 <ucg_font_decode_glyph+0x140>
  {
	ucg->font_decode.target_x = ucg_add_vector_x(ucg->font_decode.target_x, x, -(h+y), ucg->font_decode.dir);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	7b7b      	ldrb	r3, [r7, #13]
 80045b8:	4413      	add	r3, r2
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	425b      	negs	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	b25a      	sxtb	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80045c8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80045cc:	f7ff febd 	bl	800434a <ucg_add_vector_x>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ucg->font_decode.target_y = ucg_add_vector_y(ucg->font_decode.target_y, x, -(h+y), ucg->font_decode.dir);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 80045e0:	7bfa      	ldrb	r2, [r7, #15]
 80045e2:	7b7b      	ldrb	r3, [r7, #13]
 80045e4:	4413      	add	r3, r2
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	425b      	negs	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	b25a      	sxtb	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80045f4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80045f8:	f7ff fe67 	bl	80042ca <ucg_add_vector_y>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    //ucg_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

    /* reset local x/y position */
	ucg->font_decode.x = 0;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	ucg->font_decode.y = 0;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    for(;;)
    {
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f7ff fde2 	bl	80041ee <ucg_font_decode_get_unsigned_bits>
 800462a:	4603      	mov	r3, r0
 800462c:	72fb      	strb	r3, [r7, #11]
      b = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7ff fdd6 	bl	80041ee <ucg_font_decode_get_unsigned_bits>
 8004642:	4603      	mov	r3, r0
 8004644:	72bb      	strb	r3, [r7, #10]
      do
      {
		ucg_font_decode_len(ucg, a, 0);
 8004646:	7afb      	ldrb	r3, [r7, #11]
 8004648:	2200      	movs	r2, #0
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff febc 	bl	80043ca <ucg_font_decode_len>
		ucg_font_decode_len(ucg, b, 1);
 8004652:	7abb      	ldrb	r3, [r7, #10]
 8004654:	2201      	movs	r2, #1
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff feb6 	bl	80043ca <ucg_font_decode_len>
      } while( ucg_font_decode_get_unsigned_bits(&ucg->font_decode, 1) != 0 );
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3380      	adds	r3, #128	; 0x80
 8004662:	2101      	movs	r1, #1
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fdc2 	bl	80041ee <ucg_font_decode_get_unsigned_bits>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ea      	bne.n	8004646 <ucg_font_decode_glyph+0x104>

      if ( ucg->font_decode.y >= h )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8004676:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800467a:	429a      	cmp	r2, r3
 800467c:	dd00      	ble.n	8004680 <ucg_font_decode_glyph+0x13e>
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 800467e:	e7ca      	b.n	8004616 <ucg_font_decode_glyph+0xd4>
	    break;
 8004680:	bf00      	nop
    }
  }
  return d;
 8004682:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <ucg_font_get_glyph_data>:
    encoding: Encoding (ASCII code) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *ucg_font_get_glyph_data(ucg_t *ucg, uint8_t encoding)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	70fb      	strb	r3, [r7, #3]
  const uint8_t *font = ucg->font;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800469e:	60fb      	str	r3, [r7, #12]
  font += UCG_FONT_DATA_STRUCT_SIZE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3315      	adds	r3, #21
 80046a4:	60fb      	str	r3, [r7, #12]
  
  if ( encoding >= 'a' )
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	2b60      	cmp	r3, #96	; 0x60
 80046aa:	d907      	bls.n	80046bc <ucg_font_get_glyph_data+0x2e>
  {
    font += ucg->font_info.start_pos_lower_a;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e009      	b.n	80046d0 <ucg_font_get_glyph_data+0x42>
  }
  else if ( encoding >= 'A' )
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d906      	bls.n	80046d0 <ucg_font_get_glyph_data+0x42>
  {
    font += ucg->font_info.start_pos_upper_A;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80046c8:	461a      	mov	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  }
  
  for(;;)
  {
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3301      	adds	r3, #1
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00e      	beq.n	80046f8 <ucg_font_get_glyph_data+0x6a>
      break;
    if ( ucg_pgm_read( (ucg_pgm_uint8_t *)font ) == encoding )
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d101      	bne.n	80046e8 <ucg_font_get_glyph_data+0x5a>
    {
      return font;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	e009      	b.n	80046fc <ucg_font_get_glyph_data+0x6e>
    }
    font += ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 80046f6:	e7eb      	b.n	80046d0 <ucg_font_get_glyph_data+0x42>
      break;
 80046f8:	bf00      	nop
  }
  return NULL;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <ucg_font_draw_glyph>:

ucg_int_t ucg_font_draw_glyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	461a      	mov	r2, r3
 8004716:	4603      	mov	r3, r0
 8004718:	817b      	strh	r3, [r7, #10]
 800471a:	460b      	mov	r3, r1
 800471c:	813b      	strh	r3, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	71fb      	strb	r3, [r7, #7]
  ucg_int_t dx = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	82fb      	strh	r3, [r7, #22]
  ucg->font_decode.target_x = x;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	897a      	ldrh	r2, [r7, #10]
 800472a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  ucg->font_decode.target_y = y;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	893a      	ldrh	r2, [r7, #8]
 8004732:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  //ucg->font_decode.is_transparent = is_transparent; this is already set
  ucg->font_decode.dir = dir;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	79fa      	ldrb	r2, [r7, #7]
 800473a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  const uint8_t *glyph_data = ucg_font_get_glyph_data(ucg, encoding);
 800473e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004742:	4619      	mov	r1, r3
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff ffa2 	bl	800468e <ucg_font_get_glyph_data>
 800474a:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <ucg_font_draw_glyph+0x56>
  {
    dx = ucg_font_decode_glyph(ucg, glyph_data);
 8004752:	6939      	ldr	r1, [r7, #16]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff fef4 	bl	8004542 <ucg_font_decode_glyph>
 800475a:	4603      	mov	r3, r0
 800475c:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800475e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <ucg_SetFontMode>:
    UCG_FONT_MODE_SOLID
    UCG_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void ucg_SetFontMode(ucg_t *ucg, uint8_t is_transparent)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
  ucg->font_decode.is_transparent = is_transparent;		// new font procedures
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <ucg_DrawGlyph>:

ucg_int_t ucg_DrawGlyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	4608      	mov	r0, r1
 8004796:	4611      	mov	r1, r2
 8004798:	461a      	mov	r2, r3
 800479a:	4603      	mov	r3, r0
 800479c:	817b      	strh	r3, [r7, #10]
 800479e:	460b      	mov	r3, r1
 80047a0:	813b      	strh	r3, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	71fb      	strb	r3, [r7, #7]
  switch(dir)
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d837      	bhi.n	800481c <ucg_DrawGlyph+0x90>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <ucg_DrawGlyph+0x28>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047c5 	.word	0x080047c5
 80047b8:	080047db 	.word	0x080047db
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	08004807 	.word	0x08004807
  {
    case 0:
      y += ucg->font_calc_vref(ucg);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	4798      	blx	r3
 80047cc:	4603      	mov	r3, r0
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	893b      	ldrh	r3, [r7, #8]
 80047d2:	4413      	add	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	813b      	strh	r3, [r7, #8]
      break;
 80047d8:	e020      	b.n	800481c <ucg_DrawGlyph+0x90>
    case 1:
      x -= ucg->font_calc_vref(ucg);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	4798      	blx	r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	897a      	ldrh	r2, [r7, #10]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	817b      	strh	r3, [r7, #10]
      break;
 80047ee:	e015      	b.n	800481c <ucg_DrawGlyph+0x90>
    case 2:
      y -= ucg->font_calc_vref(ucg);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	4798      	blx	r3
 80047f8:	4603      	mov	r3, r0
 80047fa:	893a      	ldrh	r2, [r7, #8]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	813b      	strh	r3, [r7, #8]
      break;
 8004804:	e00a      	b.n	800481c <ucg_DrawGlyph+0x90>
    case 3:
      x += ucg->font_calc_vref(ucg);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	4798      	blx	r3
 800480e:	4603      	mov	r3, r0
 8004810:	b29a      	uxth	r2, r3
 8004812:	897b      	ldrh	r3, [r7, #10]
 8004814:	4413      	add	r3, r2
 8004816:	b29b      	uxth	r3, r3
 8004818:	817b      	strh	r3, [r7, #10]
      break;
 800481a:	bf00      	nop
  }
  return ucg_font_draw_glyph(ucg, x, y, dir, encoding);
 800481c:	79f8      	ldrb	r0, [r7, #7]
 800481e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004822:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004826:	7e3b      	ldrb	r3, [r7, #24]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	4603      	mov	r3, r0
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff ff6b 	bl	8004708 <ucg_font_draw_glyph>
 8004832:	4603      	mov	r3, r0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <task_drawString>:

ucg_draw_string_t ucg_draw_str;

void task_drawString(void *arg)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
	ucg_int_t delta = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	81fb      	strh	r3, [r7, #14]
	ucg_t *ucg = (ucg_t *)arg;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60bb      	str	r3, [r7, #8]

	static uint8_t next = 0;
	switch (next)
 800484c:	4b45      	ldr	r3, [pc, #276]	; (8004964 <task_drawString+0x128>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <task_drawString+0x1e>
 8004854:	2b01      	cmp	r3, #1
 8004856:	d01e      	beq.n	8004896 <task_drawString+0x5a>
 8004858:	e07b      	b.n	8004952 <task_drawString+0x116>
	{
		case 0:
			if (bufNumItems(&fontQueue) != 0)
 800485a:	4843      	ldr	r0, [pc, #268]	; (8004968 <task_drawString+0x12c>)
 800485c:	f000 fb5b 	bl	8004f16 <bufNumItems>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <task_drawString+0x3a>
			{
				bufDeDat(&fontQueue, (uint8_t *)&ucg_draw_str);
 8004866:	4941      	ldr	r1, [pc, #260]	; (800496c <task_drawString+0x130>)
 8004868:	483f      	ldr	r0, [pc, #252]	; (8004968 <task_drawString+0x12c>)
 800486a:	f000 fbef 	bl	800504c <bufDeDat>
				next = 1;
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <task_drawString+0x128>)
 8004870:	2201      	movs	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
					TimerStop(idTaskScanDecodeLen);
					idTaskScanDecodeLen = NO_TIMER;
				}
				next = 0;
			}
			break;
 8004874:	e071      	b.n	800495a <task_drawString+0x11e>
				if (idTaskScanDecodeLen != NO_TIMER)
 8004876:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <task_drawString+0x134>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2bff      	cmp	r3, #255	; 0xff
 800487c:	d007      	beq.n	800488e <task_drawString+0x52>
					TimerStop(idTaskScanDecodeLen);
 800487e:	4b3c      	ldr	r3, [pc, #240]	; (8004970 <task_drawString+0x134>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd fede 	bl	8002644 <TimerStop>
					idTaskScanDecodeLen = NO_TIMER;
 8004888:	4b39      	ldr	r3, [pc, #228]	; (8004970 <task_drawString+0x134>)
 800488a:	22ff      	movs	r2, #255	; 0xff
 800488c:	701a      	strb	r2, [r3, #0]
				next = 0;
 800488e:	4b35      	ldr	r3, [pc, #212]	; (8004964 <task_drawString+0x128>)
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
			break;
 8004894:	e061      	b.n	800495a <task_drawString+0x11e>

		case 1:
			if ( *ucg_draw_str.str != '\0' )
 8004896:	4b35      	ldr	r3, [pc, #212]	; (800496c <task_drawString+0x130>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d054      	beq.n	800494a <task_drawString+0x10e>
			{
				delta = ucg_DrawGlyph(ucg, ucg_draw_str.x, ucg_draw_str.y, ucg_draw_str.dir, (uint8_t)*ucg_draw_str.str);
 80048a0:	4b32      	ldr	r3, [pc, #200]	; (800496c <task_drawString+0x130>)
 80048a2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80048a6:	4b31      	ldr	r3, [pc, #196]	; (800496c <task_drawString+0x130>)
 80048a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80048ac:	4b2f      	ldr	r3, [pc, #188]	; (800496c <task_drawString+0x130>)
 80048ae:	7918      	ldrb	r0, [r3, #4]
 80048b0:	4b2e      	ldr	r3, [pc, #184]	; (800496c <task_drawString+0x130>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4603      	mov	r3, r0
 80048ba:	68b8      	ldr	r0, [r7, #8]
 80048bc:	f7ff ff66 	bl	800478c <ucg_DrawGlyph>
 80048c0:	4603      	mov	r3, r0
 80048c2:	81fb      	strh	r3, [r7, #14]

				switch (ucg_draw_str.dir)
 80048c4:	4b29      	ldr	r3, [pc, #164]	; (800496c <task_drawString+0x130>)
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d837      	bhi.n	800493c <task_drawString+0x100>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <task_drawString+0x98>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048fb 	.word	0x080048fb
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004927 	.word	0x08004927
				{
					case 0:
						ucg_draw_str.x += delta;
 80048e4:	4b21      	ldr	r3, [pc, #132]	; (800496c <task_drawString+0x130>)
 80048e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	89fb      	ldrh	r3, [r7, #14]
 80048ee:	4413      	add	r3, r2
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	b21a      	sxth	r2, r3
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <task_drawString+0x130>)
 80048f6:	801a      	strh	r2, [r3, #0]
						break;
 80048f8:	e021      	b.n	800493e <task_drawString+0x102>

					case 1:
						ucg_draw_str.y += delta;
 80048fa:	4b1c      	ldr	r3, [pc, #112]	; (800496c <task_drawString+0x130>)
 80048fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004900:	b29a      	uxth	r2, r3
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	4413      	add	r3, r2
 8004906:	b29b      	uxth	r3, r3
 8004908:	b21a      	sxth	r2, r3
 800490a:	4b18      	ldr	r3, [pc, #96]	; (800496c <task_drawString+0x130>)
 800490c:	805a      	strh	r2, [r3, #2]
						break;
 800490e:	e016      	b.n	800493e <task_drawString+0x102>

					case 2:
						ucg_draw_str.x -= delta;
 8004910:	4b16      	ldr	r3, [pc, #88]	; (800496c <task_drawString+0x130>)
 8004912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004916:	b29a      	uxth	r2, r3
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	b29b      	uxth	r3, r3
 800491e:	b21a      	sxth	r2, r3
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <task_drawString+0x130>)
 8004922:	801a      	strh	r2, [r3, #0]
						break;
 8004924:	e00b      	b.n	800493e <task_drawString+0x102>

					case 3:
						ucg_draw_str.y -= delta;
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <task_drawString+0x130>)
 8004928:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800492c:	b29a      	uxth	r2, r3
 800492e:	89fb      	ldrh	r3, [r7, #14]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	b29b      	uxth	r3, r3
 8004934:	b21a      	sxth	r2, r3
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <task_drawString+0x130>)
 8004938:	805a      	strh	r2, [r3, #2]
						break;
 800493a:	e000      	b.n	800493e <task_drawString+0x102>

					default:
						break;
 800493c:	bf00      	nop
				}

				ucg_draw_str.str++;
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <task_drawString+0x130>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	3301      	adds	r3, #1
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <task_drawString+0x130>)
 8004946:	6093      	str	r3, [r2, #8]
			}
			else
			{
				next = 0;
			}
			break;
 8004948:	e007      	b.n	800495a <task_drawString+0x11e>
				next = 0;
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <task_drawString+0x128>)
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
			break;
 8004950:	e003      	b.n	800495a <task_drawString+0x11e>

		default:
			next = 0;
 8004952:	4b04      	ldr	r3, [pc, #16]	; (8004964 <task_drawString+0x128>)
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
			break;
 8004958:	bf00      	nop
	}
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	200013d4 	.word	0x200013d4
 8004968:	200003b8 	.word	0x200003b8
 800496c:	200013c8 	.word	0x200013c8
 8004970:	20000060 	.word	0x20000060

08004974 <ucg_DrawString>:

ucg_int_t ucg_DrawString(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, const char *str)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4603      	mov	r3, r0
 8004984:	817b      	strh	r3, [r7, #10]
 8004986:	460b      	mov	r3, r1
 8004988:	813b      	strh	r3, [r7, #8]
 800498a:	4613      	mov	r3, r2
 800498c:	71fb      	strb	r3, [r7, #7]
	ucg_int_t sum = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	83fb      	strh	r3, [r7, #30]
	ucg_draw_string_t drawStr;

	drawStr.x = x;
 8004992:	897b      	ldrh	r3, [r7, #10]
 8004994:	823b      	strh	r3, [r7, #16]
	drawStr.y = y;
 8004996:	893b      	ldrh	r3, [r7, #8]
 8004998:	827b      	strh	r3, [r7, #18]
	drawStr.dir = dir;
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	753b      	strb	r3, [r7, #20]
    drawStr.str = (char *)str;
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	61bb      	str	r3, [r7, #24]

	bufEnDat(&fontQueue, (uint8_t *)&drawStr);
 80049a2:	f107 0310 	add.w	r3, r7, #16
 80049a6:	4619      	mov	r1, r3
 80049a8:	480c      	ldr	r0, [pc, #48]	; (80049dc <ucg_DrawString+0x68>)
 80049aa:	f000 faff 	bl	8004fac <bufEnDat>

	/* decode glyph */
	if (idTaskScanDecodeLen == NO_TIMER)
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <ucg_DrawString+0x6c>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2bff      	cmp	r3, #255	; 0xff
 80049b4:	d10b      	bne.n	80049ce <ucg_DrawString+0x5a>
	{
		idTaskScanDecodeLen = TimerStart("ucg_DrawString", 30, TIMER_REPEAT_FOREVER, task_drawString, ucg);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <ucg_DrawString+0x70>)
 80049bc:	22ff      	movs	r2, #255	; 0xff
 80049be:	211e      	movs	r1, #30
 80049c0:	4809      	ldr	r0, [pc, #36]	; (80049e8 <ucg_DrawString+0x74>)
 80049c2:	f7fd fddd 	bl	8002580 <TimerStart>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <ucg_DrawString+0x6c>)
 80049cc:	701a      	strb	r2, [r3, #0]
	}

	return sum;
 80049ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200003b8 	.word	0x200003b8
 80049e0:	20000060 	.word	0x20000060
 80049e4:	0800483d 	.word	0x0800483d
 80049e8:	080057a0 	.word	0x080057a0

080049ec <ucg_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void ucg_UpdateRefHeight(ucg_t *ucg)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  if ( ucg->font == NULL )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05d      	beq.n	8004ab8 <ucg_UpdateRefHeight+0xcc>
    return;
  ucg->font_ref_ascent = ucg->font_info.ascent_A;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  ucg->font_ref_descent = ucg->font_info.descent_g;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
  if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_TEXT )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d04d      	beq.n	8004aba <ucg_UpdateRefHeight+0xce>
  {
  }
  else if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_XTEXT )
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d11c      	bne.n	8004a62 <ucg_UpdateRefHeight+0x76>
  {
    if ( ucg->font_ref_ascent < ucg->font_info.ascent_para )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8004a34:	429a      	cmp	r2, r3
 8004a36:	da05      	bge.n	8004a44 <ucg_UpdateRefHeight+0x58>
      ucg->font_ref_ascent = ucg->font_info.ascent_para;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.descent_para )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8004a50:	429a      	cmp	r2, r3
 8004a52:	dd32      	ble.n	8004aba <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.descent_para;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8004a60:	e02b      	b.n	8004aba <ucg_UpdateRefHeight+0xce>
  }
  else
  {
    if ( ucg->font_ref_ascent < ucg->font_info.max_char_height+ucg->font_info.y_offset )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8004a68:	461a      	mov	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8004a70:	4619      	mov	r1, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004a78:	440b      	add	r3, r1
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	da0d      	bge.n	8004a9a <ucg_UpdateRefHeight+0xae>
      ucg->font_ref_ascent = ucg->font_info.max_char_height+ucg->font_info.y_offset;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	b25a      	sxtb	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.y_offset )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	dd07      	ble.n	8004aba <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.y_offset;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8004ab6:	e000      	b.n	8004aba <ucg_UpdateRefHeight+0xce>
    return;
 8004ab8:	bf00      	nop
  }  
}
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <ucg_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

ucg_int_t ucg_font_calc_vref_font(ucg_t *ucg)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return 0;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <ucg_SetFontPosBaseline>:

void ucg_SetFontPosBaseline(ucg_t *ucg)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  ucg->font_calc_vref = ucg_font_calc_vref_font;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <ucg_SetFontPosBaseline+0x1c>)
 8004ae8:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	08004ac5 	.word	0x08004ac5

08004afc <ucg_SetFont>:
}

/*===============================================*/

void ucg_SetFont(ucg_t *ucg, const ucg_fntpgm_uint8_t  *font)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  if ( ucg->font != font )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d012      	beq.n	8004b36 <ucg_SetFont+0x3a>
  {
    ucg->font = font;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	679a      	str	r2, [r3, #120]	; 0x78
    ucg_read_font_info(&(ucg->font_info), font);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3390      	adds	r3, #144	; 0x90
 8004b1a:	6839      	ldr	r1, [r7, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fac5 	bl	80040ac <ucg_read_font_info>
    ucg_UpdateRefHeight(ucg);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff ff62 	bl	80049ec <ucg_UpdateRefHeight>
    //ucg_SetFontPosBaseline(ucg);

    // Init queue font
    bufInit(pQueueFont, &fontQueue, sizeof(ucg_draw_string_t), SIZE_QUEUE_DATA_FONT);
 8004b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b2c:	220c      	movs	r2, #12
 8004b2e:	4904      	ldr	r1, [pc, #16]	; (8004b40 <ucg_SetFont+0x44>)
 8004b30:	4804      	ldr	r0, [pc, #16]	; (8004b44 <ucg_SetFont+0x48>)
 8004b32:	f000 f9d5 	bl	8004ee0 <bufInit>
  }
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200003b8 	.word	0x200003b8
 8004b44:	200003c8 	.word	0x200003c8

08004b48 <ucg_init_struct>:
uint8_t global_SREG_backup;		// used by the atomic macros
#endif


void ucg_init_struct(ucg_t *ucg)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  //memset(ucg, 0, sizeof(ucg_t));
  ucg->is_power_up = 0;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	7813      	ldrb	r3, [r2, #0]
 8004b54:	f36f 0300 	bfc	r3, #0, #1
 8004b58:	7013      	strb	r3, [r2, #0]
  ucg->rotate_chain_device_cb = 0;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	611a      	str	r2, [r3, #16]
  ucg->arg.scale = 1;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	865a      	strh	r2, [r3, #50]	; 0x32
  //ucg->display_offset.x = 0;
  //ucg->display_offset.y = 0;
  ucg->font = 0;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	679a      	str	r2, [r3, #120]	; 0x78
  //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
  ucg->font_decode.is_transparent = 1;  // new font procedures
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  
  ucg->com_initial_change_sent = 0;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  ucg->com_status = 0;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  ucg->com_cfg_cd = 0;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <ucg_Init>:


ucg_int_t ucg_Init(ucg_t *ucg, ucg_dev_fnptr device_cb, ucg_dev_fnptr ext_cb, ucg_com_fnptr com_cb)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  ucg_int_t r;
  ucg_init_struct(ucg);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff ffce 	bl	8004b48 <ucg_init_struct>
  if ( ext_cb == (ucg_dev_fnptr)0 )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <ucg_Init+0x22>
    ucg->ext_cb = ucg_ext_none;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <ucg_Init+0x58>)
 8004bb6:	60da      	str	r2, [r3, #12]
 8004bb8:	e002      	b.n	8004bc0 <ucg_Init+0x28>
 else 
    ucg->ext_cb = ext_cb;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]
  ucg->device_cb = device_cb;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	609a      	str	r2, [r3, #8]
  ucg->com_cb = com_cb;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	61da      	str	r2, [r3, #28]
  ucg_SetFontPosBaseline(ucg);
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff ff85 	bl	8004adc <ucg_SetFontPosBaseline>
  r = ucg_PowerUp(ucg);
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff f98e 	bl	8003ef4 <ucg_PowerUp>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	82fb      	strh	r3, [r7, #22]
  ucg_GetDimension(ucg);
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff f9ce 	bl	8003f7e <ucg_GetDimension>
  return r;
 8004be2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	08003b4d 	.word	0x08003b4d

08004bf4 <ucg_Draw90Line>:
*/

#include "ucg.h"

void ucg_Draw90Line(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len, ucg_int_t dir, ucg_int_t col_idx)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	817b      	strh	r3, [r7, #10]
 8004c06:	460b      	mov	r3, r1
 8004c08:	813b      	strh	r3, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	80fb      	strh	r3, [r7, #6]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[col_idx].color[0];
 8004c0e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004c12:	68f9      	ldr	r1, [r7, #12]
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	333a      	adds	r3, #58	; 0x3a
 8004c1e:	781a      	ldrb	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[col_idx].color[1];
 8004c26:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	4413      	add	r3, r2
 8004c32:	440b      	add	r3, r1
 8004c34:	333b      	adds	r3, #59	; 0x3b
 8004c36:	781a      	ldrb	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[col_idx].color[2];
 8004c3e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	4613      	mov	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	333c      	adds	r3, #60	; 0x3c
 8004c4e:	781a      	ldrb	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  ucg->arg.pixel.pos.x = x;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	897a      	ldrh	r2, [r7, #10]
 8004c5a:	849a      	strh	r2, [r3, #36]	; 0x24
  ucg->arg.pixel.pos.y = y;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	893a      	ldrh	r2, [r7, #8]
 8004c60:	84da      	strh	r2, [r3, #38]	; 0x26
  ucg->arg.len = len;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	88fa      	ldrh	r2, [r7, #6]
 8004c66:	859a      	strh	r2, [r3, #44]	; 0x2c
  ucg->arg.dir = dir;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8b3a      	ldrh	r2, [r7, #24]
 8004c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  ucg_DrawL90FXWithArg(ucg);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff f997 	bl	8003fa2 <ucg_DrawL90FXWithArg>
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <ucg_DrawHLine>:

void ucg_DrawHLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	4608      	mov	r0, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	817b      	strh	r3, [r7, #10]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	813b      	strh	r3, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 0, 0);
 8004c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004c9e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	9001      	str	r0, [sp, #4]
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	9000      	str	r0, [sp, #0]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff ffa2 	bl	8004bf4 <ucg_Draw90Line>
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <ucg_SetColor>:
*/

#include "ucg.h"

void ucg_SetColor(ucg_t *ucg, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	70fb      	strb	r3, [r7, #3]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	70bb      	strb	r3, [r7, #2]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	707b      	strb	r3, [r7, #1]
  //ucg->arg.pixel.rgb.color[0] = r;
  //ucg->arg.pixel.rgb.color[1] = g;
  //ucg->arg.pixel.rgb.color[2] = b;
  ucg->arg.rgb[idx].color[0] = r;
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4413      	add	r3, r2
 8004cdc:	440b      	add	r3, r1
 8004cde:	333a      	adds	r3, #58	; 0x3a
 8004ce0:	78ba      	ldrb	r2, [r7, #2]
 8004ce2:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[1] = g;
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4413      	add	r3, r2
 8004cee:	440b      	add	r3, r1
 8004cf0:	333b      	adds	r3, #59	; 0x3b
 8004cf2:	787a      	ldrb	r2, [r7, #1]
 8004cf4:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[2] = b;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	4413      	add	r3, r2
 8004d00:	440b      	add	r3, r1
 8004d02:	333c      	adds	r3, #60	; 0x3c
 8004d04:	7c3a      	ldrb	r2, [r7, #16]
 8004d06:	701a      	strb	r2, [r3, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <ucg_UndoRotate>:
#include "ucg.h"
#include <assert.h>

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_UndoRotate(ucg_t *ucg)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  if ( ucg->rotate_chain_device_cb != NULL )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d006      	beq.n	8004d32 <ucg_UndoRotate+0x1e>
  {
    ucg->device_cb = ucg->rotate_chain_device_cb;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
    ucg->rotate_chain_device_cb = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	611a      	str	r2, [r3, #16]
  }
  ucg_GetDimension(ucg);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff f923 	bl	8003f7e <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff f908 	bl	8003f4e <ucg_SetMaxClipRange>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <ucg_rotate_180_xy>:

/*================================================*/
/* 180 degree */

static void ucg_rotate_180_xy(ucg_t *ucg, ucg_xy_t *xy)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
    ucg_int_t x, y;
    y = ucg->rotate_dimension.h;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8adb      	ldrh	r3, [r3, #22]
 8004d54:	81fb      	strh	r3, [r7, #14]
    y -= xy->y;
 8004d56:	89fa      	ldrh	r2, [r7, #14]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	81fb      	strh	r3, [r7, #14]
    y--;
 8004d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	81fb      	strh	r3, [r7, #14]
    xy->y = y;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	89fa      	ldrh	r2, [r7, #14]
 8004d76:	805a      	strh	r2, [r3, #2]
  
    x = ucg->rotate_dimension.w;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8a9b      	ldrh	r3, [r3, #20]
 8004d7c:	81bb      	strh	r3, [r7, #12]
    x -= xy->x;
 8004d7e:	89ba      	ldrh	r2, [r7, #12]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	81bb      	strh	r3, [r7, #12]
    x--;
 8004d8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	81bb      	strh	r3, [r7, #12]
    xy->x = x;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	89ba      	ldrh	r2, [r7, #12]
 8004d9e:	801a      	strh	r2, [r3, #0]
  
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <ucg_dev_rotate180>:

ucg_int_t ucg_dev_rotate180(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	460b      	mov	r3, r1
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8004dba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004dbe:	3b0c      	subs	r3, #12
 8004dc0:	2b0b      	cmp	r3, #11
 8004dc2:	d866      	bhi.n	8004e92 <ucg_dev_rotate180+0xe6>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <ucg_dev_rotate180+0x20>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e1b 	.word	0x08004e1b
 8004dd0:	08004e93 	.word	0x08004e93
 8004dd4:	08004e93 	.word	0x08004e93
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e93 	.word	0x08004e93
 8004de0:	08004e93 	.word	0x08004e93
 8004de4:	08004e93 	.word	0x08004e93
 8004de8:	08004e93 	.word	0x08004e93
 8004dec:	08004e63 	.word	0x08004e63
 8004df0:	08004e63 	.word	0x08004e63
 8004df4:	08004e93 	.word	0x08004e93
 8004df8:	08004e63 	.word	0x08004e63
  {
    case UCG_MSG_GET_DIMENSION:
      ucg->rotate_chain_device_cb(ucg, msg, &(ucg->rotate_dimension)); 
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	3214      	adds	r2, #20
 8004e04:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	4798      	blx	r3
      *((ucg_wh_t *)data) = (ucg->rotate_dimension);
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3314      	adds	r3, #20
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	6010      	str	r0, [r2, #0]
      return 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e043      	b.n	8004ea2 <ucg_dev_rotate180+0xf6>
    case UCG_MSG_SET_CLIP_BOX:
      /* calculate and rotate lower right point of the clip box */
      ((ucg_box_t * )data)->ul.y += ((ucg_box_t * )data)->size.h-1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	b21a      	sxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	805a      	strh	r2, [r3, #2]
      ((ucg_box_t * )data)->ul.x += ((ucg_box_t * )data)->size.w-1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	b21a      	sxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	801a      	strh	r2, [r3, #0]
      ucg_rotate_180_xy(ucg, &(((ucg_box_t * )data)->ul)); 
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff ff73 	bl	8004d46 <ucg_rotate_180_xy>
      /* box dimensions are the same */
      break;
 8004e60:	e017      	b.n	8004e92 <ucg_dev_rotate180+0xe6>
#ifdef UCG_MSG_DRAW_L90BF
    case UCG_MSG_DRAW_L90BF:
#endif /* UCG_MSG_DRAW_L90BF */
    case UCG_MSG_DRAW_L90SE:
    //case UCG_MSG_DRAW_L90RL:
      ucg->arg.dir+=2;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	b21a      	sxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg->arg.dir&=3;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	b21a      	sxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg_rotate_180_xy(ucg, &(ucg->arg.pixel.pos)); 
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3324      	adds	r3, #36	; 0x24
 8004e88:	4619      	mov	r1, r3
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff ff5b 	bl	8004d46 <ucg_rotate_180_xy>
      break;
 8004e90:	bf00      	nop
  }
  return ucg->rotate_chain_device_cb(ucg, msg, data);  
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	4798      	blx	r3
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop

08004eac <ucg_SetRotate180>:

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_SetRotate180(ucg_t *ucg)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  ucg_UndoRotate(ucg);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff ff2d 	bl	8004d14 <ucg_UndoRotate>
  ucg->rotate_chain_device_cb = ucg->device_cb;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	611a      	str	r2, [r3, #16]
  ucg->device_cb = ucg_dev_rotate180;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a05      	ldr	r2, [pc, #20]	; (8004edc <ucg_SetRotate180+0x30>)
 8004ec6:	609a      	str	r2, [r3, #8]
  ucg_GetDimension(ucg);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff f858 	bl	8003f7e <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff f83d 	bl	8003f4e <ucg_SetMaxClipRange>
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	08004dad 	.word	0x08004dad

08004ee0 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	460b      	mov	r3, r1
 8004ef0:	71fb      	strb	r3, [r7, #7]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	88ba      	ldrh	r2, [r7, #4]
 8004efa:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	79fa      	ldrb	r2, [r7, #7]
 8004f00:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8004f08:	68b8      	ldr	r0, [r7, #8]
 8004f0a:	f000 f836 	bl	8004f7a <bufFlush>
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	885b      	ldrh	r3, [r3, #2]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	885a      	ldrh	r2, [r3, #2]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	bf2c      	ite	cs
 8004f42:	2301      	movcs	r3, #1
 8004f44:	2300      	movcc	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	88da      	ldrh	r2, [r3, #6]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	891b      	ldrh	r3, [r3, #8]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68d8      	ldr	r0, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f000 f899 	bl	80050d6 <memsetl>
}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fb6:	b672      	cpsid	i
}
 8004fb8:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e021      	b.n	8005004 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	88c9      	ldrh	r1, [r1, #6]
 8004fce:	440b      	add	r3, r1
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	88db      	ldrh	r3, [r3, #6]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	b21a      	sxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	b21b      	sxth	r3, r3
 8004fe8:	4013      	ands	r3, r2
 8004fea:	b21b      	sxth	r3, r3
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	885b      	ldrh	r3, [r3, #2]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	3301      	adds	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	791b      	ldrb	r3, [r3, #4]
 8005008:	7bfa      	ldrb	r2, [r7, #15]
 800500a:	429a      	cmp	r2, r3
 800500c:	d3d8      	bcc.n	8004fc0 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff ff8d 	bl	8004f2e <bufIsFull>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d011      	beq.n	800503e <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	891a      	ldrh	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	791b      	ldrb	r3, [r3, #4]
 8005022:	b29b      	uxth	r3, r3
 8005024:	4413      	add	r3, r2
 8005026:	b29b      	uxth	r3, r3
 8005028:	b21a      	sxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	3b01      	subs	r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	b21b      	sxth	r3, r3
 8005034:	4013      	ands	r3, r2
 8005036:	b21b      	sxth	r3, r3
 8005038:	b29a      	uxth	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800503e:	b662      	cpsie	i
}
 8005040:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005056:	b672      	cpsid	i
}
 8005058:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff ff7a 	bl	8004f54 <bufIsEmpty>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d006      	beq.n	8005074 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800506c:	b662      	cpsie	i
}
 800506e:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 8005070:	2302      	movs	r3, #2
 8005072:	e02c      	b.n	80050ce <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8005074:	2300      	movs	r3, #0
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	e021      	b.n	80050be <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	8912      	ldrh	r2, [r2, #8]
 8005082:	441a      	add	r2, r3
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	440b      	add	r3, r1
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	891b      	ldrh	r3, [r3, #8]
 8005092:	3301      	adds	r3, #1
 8005094:	b29b      	uxth	r3, r3
 8005096:	b21a      	sxth	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	b29b      	uxth	r3, r3
 80050a0:	b21b      	sxth	r3, r3
 80050a2:	4013      	ands	r3, r2
 80050a4:	b21b      	sxth	r3, r3
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	885b      	ldrh	r3, [r3, #2]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	3301      	adds	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	791b      	ldrb	r3, [r3, #4]
 80050c2:	7bfa      	ldrb	r2, [r7, #15]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d3d8      	bcc.n	800507a <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80050c8:	b662      	cpsie	i
}
 80050ca:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	460b      	mov	r3, r1
 80050e0:	70fb      	strb	r3, [r7, #3]
 80050e2:	4613      	mov	r3, r2
 80050e4:	803b      	strh	r3, [r7, #0]
    while (size--) {
 80050e6:	e004      	b.n	80050f2 <memsetl+0x1c>
        *dst++ = value;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	701a      	strb	r2, [r3, #0]
    while (size--) {
 80050f2:	883b      	ldrh	r3, [r7, #0]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	803a      	strh	r2, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f5      	bne.n	80050e8 <memsetl+0x12>
    }    
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <AppInitCommon>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void AppInitCommon()
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8005110:	f7fb f896 	bl	8000240 <SystemCoreClockUpdate>
	TimerInit();
 8005114:	f7fd fa12 	bl	800253c <TimerInit>
	EventButton_Init();
 8005118:	f7fc fd64 	bl	8001be4 <EventButton_Init>
	BuzzerControl_Init();
 800511c:	f7fc fe34 	bl	8001d88 <BuzzerControl_Init>
	LedControl_Init();
 8005120:	f7fc ff7e 	bl	8002020 <LedControl_Init>
	LightSensor_Init(ADC_READ_MODE_DMA);
 8005124:	2000      	movs	r0, #0
 8005126:	f7fd fbdb 	bl	80028e0 <LightSensor_Init>
	TemHumSensor_Init();
 800512a:	f7fd fc89 	bl	8002a40 <TemHumSensor_Init>

	EventSchedulerInit(AppStateManager);
 800512e:	4802      	ldr	r0, [pc, #8]	; (8005138 <AppInitCommon+0x2c>)
 8005130:	f7fd f96a 	bl	8002408 <EventSchedulerInit>

}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}
 8005138:	0800513d 	.word	0x0800513d

0800513c <AppStateManager>:

static void AppStateManager(uint8_t event)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
	switch(GetStateApp())
 8005146:	f000 f831 	bl	80051ac <GetStateApp>
 800514a:	4603      	mov	r3, r0
 800514c:	2b02      	cmp	r3, #2
 800514e:	d014      	beq.n	800517a <AppStateManager+0x3e>
 8005150:	2b02      	cmp	r3, #2
 8005152:	dc14      	bgt.n	800517e <AppStateManager+0x42>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <AppStateManager+0x22>
 8005158:	2b01      	cmp	r3, #1
 800515a:	d009      	beq.n	8005170 <AppStateManager+0x34>

	case STATE_APP_RESET:
		break;

	default:
		break;
 800515c:	e00f      	b.n	800517e <AppStateManager+0x42>
		if(event == EVENT_APP_INIT)
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d10e      	bne.n	8005182 <AppStateManager+0x46>
			LoadConfiguration();
 8005164:	f000 f82e 	bl	80051c4 <LoadConfiguration>
			SetStateApp(STATE_APP_IDLE);
 8005168:	2001      	movs	r0, #1
 800516a:	f000 f80f 	bl	800518c <SetStateApp>
		break;
 800516e:	e008      	b.n	8005182 <AppStateManager+0x46>
		DeviceStateMachine(event);
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f88a 	bl	800528c <DeviceStateMachine>
		break;
 8005178:	e004      	b.n	8005184 <AppStateManager+0x48>
		break;
 800517a:	bf00      	nop
 800517c:	e002      	b.n	8005184 <AppStateManager+0x48>
		break;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <AppStateManager+0x48>
		break;
 8005182:	bf00      	nop
	}
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <SetStateApp>:

static void SetStateApp(state_app_t state)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
	eCurrentState = state;
 8005196:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <SetStateApp+0x1c>)
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	7013      	strb	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	2000148c 	.word	0x2000148c

080051ac <GetStateApp>:

static state_app_t GetStateApp(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	return eCurrentState;
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <GetStateApp+0x14>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	2000148c 	.word	0x2000148c

080051c4 <LoadConfiguration>:
/*hàm cho câu 1: hiển thị dòng chữ lên LCD*/
void LoadConfiguration(void){
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af02      	add	r7, sp, #8

	//hỏi anh trung tại sao config LCD trên appInitCommon ko đc

	/*************		setup LCD		****************/
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 80051ca:	2100      	movs	r1, #0
 80051cc:	4817      	ldr	r0, [pc, #92]	; (800522c <LoadConfiguration+0x68>)
 80051ce:	f7fd fe1b 	bl	8002e08 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 80051d2:	4816      	ldr	r0, [pc, #88]	; (800522c <LoadConfiguration+0x68>)
 80051d4:	f7fd fe60 	bl	8002e98 <ucg_ClearScreen>

	ucg_SetFont(&ucg, ucg_font_helvR08_tf);
 80051d8:	4915      	ldr	r1, [pc, #84]	; (8005230 <LoadConfiguration+0x6c>)
 80051da:	4814      	ldr	r0, [pc, #80]	; (800522c <LoadConfiguration+0x68>)
 80051dc:	f7ff fc8e 	bl	8004afc <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 80051e0:	23ff      	movs	r3, #255	; 0xff
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	23ff      	movs	r3, #255	; 0xff
 80051e6:	22ff      	movs	r2, #255	; 0xff
 80051e8:	2100      	movs	r1, #0
 80051ea:	4810      	ldr	r0, [pc, #64]	; (800522c <LoadConfiguration+0x68>)
 80051ec:	f7ff fd64 	bl	8004cb8 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 80051f0:	2300      	movs	r3, #0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2300      	movs	r3, #0
 80051f6:	2200      	movs	r2, #0
 80051f8:	2101      	movs	r1, #1
 80051fa:	480c      	ldr	r0, [pc, #48]	; (800522c <LoadConfiguration+0x68>)
 80051fc:	f7ff fd5c 	bl	8004cb8 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8005200:	480a      	ldr	r0, [pc, #40]	; (800522c <LoadConfiguration+0x68>)
 8005202:	f7ff fe53 	bl	8004eac <ucg_SetRotate180>
	ucg_DrawString(&ucg, 5, 12, 0, "IOT Programming");
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <LoadConfiguration+0x70>)
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	2300      	movs	r3, #0
 800520c:	220c      	movs	r2, #12
 800520e:	2105      	movs	r1, #5
 8005210:	4806      	ldr	r0, [pc, #24]	; (800522c <LoadConfiguration+0x68>)
 8005212:	f7ff fbaf 	bl	8004974 <ucg_DrawString>
	ucg_DrawString(&ucg, 5, 26, 0, "by Lumi Smarthome");
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <LoadConfiguration+0x74>)
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	2300      	movs	r3, #0
 800521c:	221a      	movs	r2, #26
 800521e:	2105      	movs	r1, #5
 8005220:	4802      	ldr	r0, [pc, #8]	; (800522c <LoadConfiguration+0x68>)
 8005222:	f7ff fba7 	bl	8004974 <ucg_DrawString>
}
 8005226:	bf00      	nop
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	200013d8 	.word	0x200013d8
 8005230:	08005a20 	.word	0x08005a20
 8005234:	080057b0 	.word	0x080057b0
 8005238:	080057c0 	.word	0x080057c0

0800523c <blinkLed>:


static uint8_t count = 0;
static uint8_t brightness = 0;
void blinkLed(void *data) { //hàm nháy led sau 5 lần nhấn B3 trên board
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
    if (count < 10) { //cứ 2 giá trị của count là 1 lần bật&tắt
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <blinkLed+0x48>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b09      	cmp	r3, #9
 800524a:	d816      	bhi.n	800527a <blinkLed+0x3e>
        if (brightness == 0) {
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <blinkLed+0x4c>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <blinkLed+0x20>
            brightness = 50;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <blinkLed+0x4c>)
 8005256:	2232      	movs	r2, #50	; 0x32
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e002      	b.n	8005262 <blinkLed+0x26>
        } else {
            brightness = 0;
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <blinkLed+0x4c>)
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
        }

        // Bật/tắt LED với độ sáng mới
        LedControl_SetAllColor(LED_COLOR_GREEN, brightness);
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <blinkLed+0x4c>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	4619      	mov	r1, r3
 8005268:	2001      	movs	r0, #1
 800526a:	f7fc fff1 	bl	8002250 <LedControl_SetAllColor>
        count++;
 800526e:	4b05      	ldr	r3, [pc, #20]	; (8005284 <blinkLed+0x48>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b03      	ldr	r3, [pc, #12]	; (8005284 <blinkLed+0x48>)
 8005278:	701a      	strb	r2, [r3, #0]
    }
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	2000148e 	.word	0x2000148e
 8005288:	2000148f 	.word	0x2000148f

0800528c <DeviceStateMachine>:


void DeviceStateMachine(uint8_t event)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af02      	add	r7, sp, #8
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
	switch(event)
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	3b01      	subs	r3, #1
 800529a:	2b3a      	cmp	r3, #58	; 0x3a
 800529c:	f200 819e 	bhi.w	80055dc <DeviceStateMachine+0x350>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <DeviceStateMachine+0x1c>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	08005475 	.word	0x08005475
 80052ac:	080054a9 	.word	0x080054a9
 80052b0:	080055dd 	.word	0x080055dd
 80052b4:	080054dd 	.word	0x080054dd
 80052b8:	08005511 	.word	0x08005511
 80052bc:	080055dd 	.word	0x080055dd
 80052c0:	080055dd 	.word	0x080055dd
 80052c4:	080055dd 	.word	0x080055dd
 80052c8:	080055dd 	.word	0x080055dd
 80052cc:	080055dd 	.word	0x080055dd
 80052d0:	080055dd 	.word	0x080055dd
 80052d4:	080055dd 	.word	0x080055dd
 80052d8:	080055dd 	.word	0x080055dd
 80052dc:	080055dd 	.word	0x080055dd
 80052e0:	080055dd 	.word	0x080055dd
 80052e4:	080055dd 	.word	0x080055dd
 80052e8:	080055dd 	.word	0x080055dd
 80052ec:	080055dd 	.word	0x080055dd
 80052f0:	080055dd 	.word	0x080055dd
 80052f4:	080055dd 	.word	0x080055dd
 80052f8:	080055dd 	.word	0x080055dd
 80052fc:	080055dd 	.word	0x080055dd
 8005300:	080055dd 	.word	0x080055dd
 8005304:	08005395 	.word	0x08005395
 8005308:	080055dd 	.word	0x080055dd
 800530c:	080055dd 	.word	0x080055dd
 8005310:	080055dd 	.word	0x080055dd
 8005314:	080055dd 	.word	0x080055dd
 8005318:	080055dd 	.word	0x080055dd
 800531c:	080055dd 	.word	0x080055dd
 8005320:	08005545 	.word	0x08005545
 8005324:	080055dd 	.word	0x080055dd
 8005328:	080055dd 	.word	0x080055dd
 800532c:	080055dd 	.word	0x080055dd
 8005330:	08005577 	.word	0x08005577
 8005334:	080055dd 	.word	0x080055dd
 8005338:	080055dd 	.word	0x080055dd
 800533c:	080055dd 	.word	0x080055dd
 8005340:	080055dd 	.word	0x080055dd
 8005344:	080055dd 	.word	0x080055dd
 8005348:	080055dd 	.word	0x080055dd
 800534c:	080055dd 	.word	0x080055dd
 8005350:	080055dd 	.word	0x080055dd
 8005354:	080055dd 	.word	0x080055dd
 8005358:	080055dd 	.word	0x080055dd
 800535c:	080055dd 	.word	0x080055dd
 8005360:	080055dd 	.word	0x080055dd
 8005364:	080055dd 	.word	0x080055dd
 8005368:	080055dd 	.word	0x080055dd
 800536c:	080055dd 	.word	0x080055dd
 8005370:	080055dd 	.word	0x080055dd
 8005374:	080055dd 	.word	0x080055dd
 8005378:	080055dd 	.word	0x080055dd
 800537c:	080055dd 	.word	0x080055dd
 8005380:	080055a9 	.word	0x080055a9
 8005384:	080055dd 	.word	0x080055dd
 8005388:	080055dd 	.word	0x080055dd
 800538c:	080055dd 	.word	0x080055dd
 8005390:	080055c3 	.word	0x080055c3
	/*hàm cho câu 2: Nhấn nút B3 năm lần khi đó tất cả các Led trên Kit
	mở rộng sẽ nháy năm lần màu GREEN với cường độ sáng là 50% và hiển
	thị thông tin sau thiết bị lên màn hình LCD*/
		case EVENT_OF_BUTTON_0_PRESS_5_TIMES:
		{
			if(IdTimer != NO_TIMER)
 8005394:	4b96      	ldr	r3, [pc, #600]	; (80055f0 <DeviceStateMachine+0x364>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2bff      	cmp	r3, #255	; 0xff
 800539a:	d007      	beq.n	80053ac <DeviceStateMachine+0x120>
			{
				TimerStop(IdTimer);
 800539c:	4b94      	ldr	r3, [pc, #592]	; (80055f0 <DeviceStateMachine+0x364>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fd f94f 	bl	8002644 <TimerStop>
				IdTimer = NO_TIMER;
 80053a6:	4b92      	ldr	r3, [pc, #584]	; (80055f0 <DeviceStateMachine+0x364>)
 80053a8:	22ff      	movs	r2, #255	; 0xff
 80053aa:	701a      	strb	r2, [r3, #0]
			}
			count = 0;
 80053ac:	4b91      	ldr	r3, [pc, #580]	; (80055f4 <DeviceStateMachine+0x368>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
			IdTimer = TimerStart("BlinkTimer", 500, 10,(void*) blinkLed, NULL);
 80053b2:	2300      	movs	r3, #0
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	4b90      	ldr	r3, [pc, #576]	; (80055f8 <DeviceStateMachine+0x36c>)
 80053b8:	220a      	movs	r2, #10
 80053ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80053be:	488f      	ldr	r0, [pc, #572]	; (80055fc <DeviceStateMachine+0x370>)
 80053c0:	f7fd f8de 	bl	8002580 <TimerStart>
 80053c4:	4603      	mov	r3, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	4b89      	ldr	r3, [pc, #548]	; (80055f0 <DeviceStateMachine+0x364>)
 80053ca:	701a      	strb	r2, [r3, #0]

			ucg_ClearScreen(&ucg);
 80053cc:	488c      	ldr	r0, [pc, #560]	; (8005600 <DeviceStateMachine+0x374>)
 80053ce:	f7fd fd63 	bl	8002e98 <ucg_ClearScreen>
			ucg_DrawString(&ucg, 0, 12, 0, "DEVICE: Board STM32");
 80053d2:	4b8c      	ldr	r3, [pc, #560]	; (8005604 <DeviceStateMachine+0x378>)
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	2300      	movs	r3, #0
 80053d8:	220c      	movs	r2, #12
 80053da:	2100      	movs	r1, #0
 80053dc:	4888      	ldr	r0, [pc, #544]	; (8005600 <DeviceStateMachine+0x374>)
 80053de:	f7ff fac9 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 24, 0, "Nucleo");
 80053e2:	4b89      	ldr	r3, [pc, #548]	; (8005608 <DeviceStateMachine+0x37c>)
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2300      	movs	r3, #0
 80053e8:	2218      	movs	r2, #24
 80053ea:	2100      	movs	r1, #0
 80053ec:	4884      	ldr	r0, [pc, #528]	; (8005600 <DeviceStateMachine+0x374>)
 80053ee:	f7ff fac1 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 36, 0, "CODE: ");
 80053f2:	4b86      	ldr	r3, [pc, #536]	; (800560c <DeviceStateMachine+0x380>)
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	2224      	movs	r2, #36	; 0x24
 80053fa:	2100      	movs	r1, #0
 80053fc:	4880      	ldr	r0, [pc, #512]	; (8005600 <DeviceStateMachine+0x374>)
 80053fe:	f7ff fab9 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 48, 0, "STM32F401RE_NUCLEO");
 8005402:	4b83      	ldr	r3, [pc, #524]	; (8005610 <DeviceStateMachine+0x384>)
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	2300      	movs	r3, #0
 8005408:	2230      	movs	r2, #48	; 0x30
 800540a:	2100      	movs	r1, #0
 800540c:	487c      	ldr	r0, [pc, #496]	; (8005600 <DeviceStateMachine+0x374>)
 800540e:	f7ff fab1 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 60, 0, "MANUFACTURER: ");
 8005412:	4b80      	ldr	r3, [pc, #512]	; (8005614 <DeviceStateMachine+0x388>)
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	2300      	movs	r3, #0
 8005418:	223c      	movs	r2, #60	; 0x3c
 800541a:	2100      	movs	r1, #0
 800541c:	4878      	ldr	r0, [pc, #480]	; (8005600 <DeviceStateMachine+0x374>)
 800541e:	f7ff faa9 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 72, 0, "STMicroelectronics");
 8005422:	4b7d      	ldr	r3, [pc, #500]	; (8005618 <DeviceStateMachine+0x38c>)
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	2248      	movs	r2, #72	; 0x48
 800542a:	2100      	movs	r1, #0
 800542c:	4874      	ldr	r0, [pc, #464]	; (8005600 <DeviceStateMachine+0x374>)
 800542e:	f7ff faa1 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 84, 0, "KIT EXPANSION: ");
 8005432:	4b7a      	ldr	r3, [pc, #488]	; (800561c <DeviceStateMachine+0x390>)
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	2254      	movs	r2, #84	; 0x54
 800543a:	2100      	movs	r1, #0
 800543c:	4870      	ldr	r0, [pc, #448]	; (8005600 <DeviceStateMachine+0x374>)
 800543e:	f7ff fa99 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 96, 0, "Lumi Smarthome");
 8005442:	4b77      	ldr	r3, [pc, #476]	; (8005620 <DeviceStateMachine+0x394>)
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	2260      	movs	r2, #96	; 0x60
 800544a:	2100      	movs	r1, #0
 800544c:	486c      	ldr	r0, [pc, #432]	; (8005600 <DeviceStateMachine+0x374>)
 800544e:	f7ff fa91 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 108, 0, "PROJECT: ");
 8005452:	4b74      	ldr	r3, [pc, #464]	; (8005624 <DeviceStateMachine+0x398>)
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	226c      	movs	r2, #108	; 0x6c
 800545a:	2100      	movs	r1, #0
 800545c:	4868      	ldr	r0, [pc, #416]	; (8005600 <DeviceStateMachine+0x374>)
 800545e:	f7ff fa89 	bl	8004974 <ucg_DrawString>
			ucg_DrawString(&ucg, 0, 120, 0, "Simulator touch switch");
 8005462:	4b71      	ldr	r3, [pc, #452]	; (8005628 <DeviceStateMachine+0x39c>)
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	2278      	movs	r2, #120	; 0x78
 800546a:	2100      	movs	r1, #0
 800546c:	4864      	ldr	r0, [pc, #400]	; (8005600 <DeviceStateMachine+0x374>)
 800546e:	f7ff fa81 	bl	8004974 <ucg_DrawString>

		}	break;
 8005472:	e0b8      	b.n	80055e6 <DeviceStateMachine+0x35a>


		static uint8_t button1count = 0;
		case EVENT_OF_BUTTON_1_PRESS_LOGIC:
		{
			if(button1count == 0)
 8005474:	4b6d      	ldr	r3, [pc, #436]	; (800562c <DeviceStateMachine+0x3a0>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <DeviceStateMachine+0x206>
			{
				LedControl_SetAllColor(LED_COLOR_RED, 50);
 800547c:	2132      	movs	r1, #50	; 0x32
 800547e:	2000      	movs	r0, #0
 8005480:	f7fc fee6 	bl	8002250 <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005484:	486a      	ldr	r0, [pc, #424]	; (8005630 <DeviceStateMachine+0x3a4>)
 8005486:	f7fc fd0f 	bl	8001ea8 <BuzzerControl_SetMelody>
				button1count = 1;
 800548a:	4b68      	ldr	r3, [pc, #416]	; (800562c <DeviceStateMachine+0x3a0>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
				LedControl_SetAllColor(LED_COLOR_RED, 0);
				BuzzerControl_SetMelody(pbeep);
				button1count = 0;
			}

		}	break;
 8005490:	e0a9      	b.n	80055e6 <DeviceStateMachine+0x35a>
				LedControl_SetAllColor(LED_COLOR_RED, 0);
 8005492:	2100      	movs	r1, #0
 8005494:	2000      	movs	r0, #0
 8005496:	f7fc fedb 	bl	8002250 <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 800549a:	4865      	ldr	r0, [pc, #404]	; (8005630 <DeviceStateMachine+0x3a4>)
 800549c:	f7fc fd04 	bl	8001ea8 <BuzzerControl_SetMelody>
				button1count = 0;
 80054a0:	4b62      	ldr	r3, [pc, #392]	; (800562c <DeviceStateMachine+0x3a0>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
		}	break;
 80054a6:	e09e      	b.n	80055e6 <DeviceStateMachine+0x35a>


		static uint8_t button2count = 0;
		case EVENT_OF_BUTTON_2_PRESS_LOGIC:
		{
			if(button2count == 0)
 80054a8:	4b62      	ldr	r3, [pc, #392]	; (8005634 <DeviceStateMachine+0x3a8>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <DeviceStateMachine+0x23a>
			{
				LedControl_SetAllColor(LED_COLOR_GREEN, 50);
 80054b0:	2132      	movs	r1, #50	; 0x32
 80054b2:	2001      	movs	r0, #1
 80054b4:	f7fc fecc 	bl	8002250 <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 80054b8:	485d      	ldr	r0, [pc, #372]	; (8005630 <DeviceStateMachine+0x3a4>)
 80054ba:	f7fc fcf5 	bl	8001ea8 <BuzzerControl_SetMelody>
				button2count = 1;
 80054be:	4b5d      	ldr	r3, [pc, #372]	; (8005634 <DeviceStateMachine+0x3a8>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]
			}else{
				LedControl_SetAllColor(LED_COLOR_GREEN, 0);
				BuzzerControl_SetMelody(pbeep);
				button2count = 0;
			}
		}	break;
 80054c4:	e08f      	b.n	80055e6 <DeviceStateMachine+0x35a>
				LedControl_SetAllColor(LED_COLOR_GREEN, 0);
 80054c6:	2100      	movs	r1, #0
 80054c8:	2001      	movs	r0, #1
 80054ca:	f7fc fec1 	bl	8002250 <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 80054ce:	4858      	ldr	r0, [pc, #352]	; (8005630 <DeviceStateMachine+0x3a4>)
 80054d0:	f7fc fcea 	bl	8001ea8 <BuzzerControl_SetMelody>
				button2count = 0;
 80054d4:	4b57      	ldr	r3, [pc, #348]	; (8005634 <DeviceStateMachine+0x3a8>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
		}	break;
 80054da:	e084      	b.n	80055e6 <DeviceStateMachine+0x35a>

		static uint8_t button4count = 0;
		case EVENT_OF_BUTTON_4_PRESS_LOGIC:
		{
			if(button4count == 0)
 80054dc:	4b56      	ldr	r3, [pc, #344]	; (8005638 <DeviceStateMachine+0x3ac>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <DeviceStateMachine+0x26e>
			{
				LedControl_SetAllColor(LED_COLOR_WHITE, 50);
 80054e4:	2132      	movs	r1, #50	; 0x32
 80054e6:	2003      	movs	r0, #3
 80054e8:	f7fc feb2 	bl	8002250 <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 80054ec:	4850      	ldr	r0, [pc, #320]	; (8005630 <DeviceStateMachine+0x3a4>)
 80054ee:	f7fc fcdb 	bl	8001ea8 <BuzzerControl_SetMelody>
				button4count = 1;
 80054f2:	4b51      	ldr	r3, [pc, #324]	; (8005638 <DeviceStateMachine+0x3ac>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	701a      	strb	r2, [r3, #0]
			}else{
				LedControl_SetAllColor(LED_COLOR_WHITE, 0);
				BuzzerControl_SetMelody(pbeep);
				button4count = 0;
			}
		}	break;
 80054f8:	e075      	b.n	80055e6 <DeviceStateMachine+0x35a>
				LedControl_SetAllColor(LED_COLOR_WHITE, 0);
 80054fa:	2100      	movs	r1, #0
 80054fc:	2003      	movs	r0, #3
 80054fe:	f7fc fea7 	bl	8002250 <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005502:	484b      	ldr	r0, [pc, #300]	; (8005630 <DeviceStateMachine+0x3a4>)
 8005504:	f7fc fcd0 	bl	8001ea8 <BuzzerControl_SetMelody>
				button4count = 0;
 8005508:	4b4b      	ldr	r3, [pc, #300]	; (8005638 <DeviceStateMachine+0x3ac>)
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
		}	break;
 800550e:	e06a      	b.n	80055e6 <DeviceStateMachine+0x35a>


		static uint8_t button5count = 0;
		case EVENT_OF_BUTTON_5_PRESS_LOGIC:
		{
			if(button5count == 0)
 8005510:	4b4a      	ldr	r3, [pc, #296]	; (800563c <DeviceStateMachine+0x3b0>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <DeviceStateMachine+0x2a2>
			{
				LedControl_SetAllColor(LED_COLOR_BLUE, 50);
 8005518:	2132      	movs	r1, #50	; 0x32
 800551a:	2002      	movs	r0, #2
 800551c:	f7fc fe98 	bl	8002250 <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005520:	4843      	ldr	r0, [pc, #268]	; (8005630 <DeviceStateMachine+0x3a4>)
 8005522:	f7fc fcc1 	bl	8001ea8 <BuzzerControl_SetMelody>
				button5count = 1;
 8005526:	4b45      	ldr	r3, [pc, #276]	; (800563c <DeviceStateMachine+0x3b0>)
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
			}else{
				LedControl_SetAllColor(LED_COLOR_BLUE, 0);
				BuzzerControl_SetMelody(pbeep);
				button5count = 0;
			}
		}	break;
 800552c:	e05b      	b.n	80055e6 <DeviceStateMachine+0x35a>
				LedControl_SetAllColor(LED_COLOR_BLUE, 0);
 800552e:	2100      	movs	r1, #0
 8005530:	2002      	movs	r0, #2
 8005532:	f7fc fe8d 	bl	8002250 <LedControl_SetAllColor>
				BuzzerControl_SetMelody(pbeep);
 8005536:	483e      	ldr	r0, [pc, #248]	; (8005630 <DeviceStateMachine+0x3a4>)
 8005538:	f7fc fcb6 	bl	8001ea8 <BuzzerControl_SetMelody>
				button5count = 0;
 800553c:	4b3f      	ldr	r3, [pc, #252]	; (800563c <DeviceStateMachine+0x3b0>)
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
		}	break;
 8005542:	e050      	b.n	80055e6 <DeviceStateMachine+0x35a>



		case EVENT_OF_BUTTON_1_HOLD_1S:
		{
			if(IdTimer != NO_TIMER)
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <DeviceStateMachine+0x364>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2bff      	cmp	r3, #255	; 0xff
 800554a:	d007      	beq.n	800555c <DeviceStateMachine+0x2d0>
			{
				TimerStop(IdTimer);
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <DeviceStateMachine+0x364>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fd f877 	bl	8002644 <TimerStop>
				IdTimer = NO_TIMER;
 8005556:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <DeviceStateMachine+0x364>)
 8005558:	22ff      	movs	r2, #255	; 0xff
 800555a:	701a      	strb	r2, [r3, #0]
			}

			IdTimer = TimerStart("LedUp", 50, TIMER_REPEAT_FOREVER, (void*)LedUp, NULL);
 800555c:	2300      	movs	r3, #0
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	4b37      	ldr	r3, [pc, #220]	; (8005640 <DeviceStateMachine+0x3b4>)
 8005562:	22ff      	movs	r2, #255	; 0xff
 8005564:	2132      	movs	r1, #50	; 0x32
 8005566:	4837      	ldr	r0, [pc, #220]	; (8005644 <DeviceStateMachine+0x3b8>)
 8005568:	f7fd f80a 	bl	8002580 <TimerStart>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <DeviceStateMachine+0x364>)
 8005572:	701a      	strb	r2, [r3, #0]
		}	break;
 8005574:	e037      	b.n	80055e6 <DeviceStateMachine+0x35a>


		case EVENT_OF_BUTTON_5_HOLD_1S:
		{
			if(IdTimer != NO_TIMER)
 8005576:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <DeviceStateMachine+0x364>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2bff      	cmp	r3, #255	; 0xff
 800557c:	d007      	beq.n	800558e <DeviceStateMachine+0x302>
			{
				TimerStop(IdTimer);
 800557e:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <DeviceStateMachine+0x364>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fd f85e 	bl	8002644 <TimerStop>
				IdTimer = NO_TIMER;
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <DeviceStateMachine+0x364>)
 800558a:	22ff      	movs	r2, #255	; 0xff
 800558c:	701a      	strb	r2, [r3, #0]
			}

			IdTimer = TimerStart("LedDown", 50, TIMER_REPEAT_FOREVER, (void*)LedDown, NULL);
 800558e:	2300      	movs	r3, #0
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <DeviceStateMachine+0x3bc>)
 8005594:	22ff      	movs	r2, #255	; 0xff
 8005596:	2132      	movs	r1, #50	; 0x32
 8005598:	482c      	ldr	r0, [pc, #176]	; (800564c <DeviceStateMachine+0x3c0>)
 800559a:	f7fc fff1 	bl	8002580 <TimerStart>
 800559e:	4603      	mov	r3, r0
 80055a0:	461a      	mov	r2, r3
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <DeviceStateMachine+0x364>)
 80055a4:	701a      	strb	r2, [r3, #0]
		}	break;
 80055a6:	e01e      	b.n	80055e6 <DeviceStateMachine+0x35a>


		case EVENT_OF_BUTTON_1_RELEASED_1S:
		{
			if(IdTimer != NO_TIMER)
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <DeviceStateMachine+0x364>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2bff      	cmp	r3, #255	; 0xff
 80055ae:	d017      	beq.n	80055e0 <DeviceStateMachine+0x354>
			{
				TimerStop(IdTimer);
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <DeviceStateMachine+0x364>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fd f845 	bl	8002644 <TimerStop>
				IdTimer = NO_TIMER;
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <DeviceStateMachine+0x364>)
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	701a      	strb	r2, [r3, #0]
			}
		} break;
 80055c0:	e00e      	b.n	80055e0 <DeviceStateMachine+0x354>


		case EVENT_OF_BUTTON_5_RELEASED_1S:
		{
			if(IdTimer != NO_TIMER)
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <DeviceStateMachine+0x364>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2bff      	cmp	r3, #255	; 0xff
 80055c8:	d00c      	beq.n	80055e4 <DeviceStateMachine+0x358>
			{
				TimerStop(IdTimer);
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <DeviceStateMachine+0x364>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd f838 	bl	8002644 <TimerStop>
				IdTimer = NO_TIMER;
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <DeviceStateMachine+0x364>)
 80055d6:	22ff      	movs	r2, #255	; 0xff
 80055d8:	701a      	strb	r2, [r3, #0]
			}
		} break;
 80055da:	e003      	b.n	80055e4 <DeviceStateMachine+0x358>


		default:
			break;
 80055dc:	bf00      	nop
 80055de:	e002      	b.n	80055e6 <DeviceStateMachine+0x35a>
		} break;
 80055e0:	bf00      	nop
 80055e2:	e000      	b.n	80055e6 <DeviceStateMachine+0x35a>
		} break;
 80055e4:	bf00      	nop
	}
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000061 	.word	0x20000061
 80055f4:	2000148e 	.word	0x2000148e
 80055f8:	0800523d 	.word	0x0800523d
 80055fc:	080057d4 	.word	0x080057d4
 8005600:	200013d8 	.word	0x200013d8
 8005604:	080057e0 	.word	0x080057e0
 8005608:	080057f4 	.word	0x080057f4
 800560c:	080057fc 	.word	0x080057fc
 8005610:	08005804 	.word	0x08005804
 8005614:	08005818 	.word	0x08005818
 8005618:	08005828 	.word	0x08005828
 800561c:	0800583c 	.word	0x0800583c
 8005620:	0800584c 	.word	0x0800584c
 8005624:	0800585c 	.word	0x0800585c
 8005628:	08005868 	.word	0x08005868
 800562c:	20001490 	.word	0x20001490
 8005630:	20000058 	.word	0x20000058
 8005634:	20001491 	.word	0x20001491
 8005638:	20001492 	.word	0x20001492
 800563c:	20001493 	.word	0x20001493
 8005640:	08005651 	.word	0x08005651
 8005644:	08005880 	.word	0x08005880
 8005648:	08005689 	.word	0x08005689
 800564c:	08005888 	.word	0x08005888

08005650 <LedUp>:

void LedUp(void *data)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	if(levelLed < 100)
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <LedUp+0x34>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b63      	cmp	r3, #99	; 0x63
 800565e:	d80c      	bhi.n	800567a <LedUp+0x2a>
	{
		LedControl_SetColorGeneral(LED_KIT_ID0, LED_COLOR_GREEN, levelLed);
 8005660:	4b08      	ldr	r3, [pc, #32]	; (8005684 <LedUp+0x34>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	2101      	movs	r1, #1
 8005668:	2001      	movs	r0, #1
 800566a:	f7fc fd5d 	bl	8002128 <LedControl_SetColorGeneral>
		levelLed ++;
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <LedUp+0x34>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	3301      	adds	r3, #1
 8005674:	b2da      	uxtb	r2, r3
 8005676:	4b03      	ldr	r3, [pc, #12]	; (8005684 <LedUp+0x34>)
 8005678:	701a      	strb	r2, [r3, #0]
	}
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000148d 	.word	0x2000148d

08005688 <LedDown>:
void LedDown(void *data)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	if(levelLed > 0)
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <LedDown+0x34>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <LedDown+0x2a>
	{
		LedControl_SetColorGeneral(LED_KIT_ID0, LED_COLOR_GREEN, levelLed);
 8005698:	4b08      	ldr	r3, [pc, #32]	; (80056bc <LedDown+0x34>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	2101      	movs	r1, #1
 80056a0:	2001      	movs	r0, #1
 80056a2:	f7fc fd41 	bl	8002128 <LedControl_SetColorGeneral>
		levelLed --;
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <LedDown+0x34>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	4b03      	ldr	r3, [pc, #12]	; (80056bc <LedDown+0x34>)
 80056b0:	701a      	strb	r2, [r3, #0]
	}
}
 80056b2:	bf00      	nop
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	2000148d 	.word	0x2000148d

080056c0 <main>:
        // Thời gian sleep có thể điều chỉnh tùy ý
        // Sleep 1 giây trước khi kiểm tra lại
        Task_multiSensorScan();
}

int main(void){
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
	AppInitCommon();
 80056c4:	f7ff fd22 	bl	800510c <AppInitCommon>
	SetStateApp(STATE_APP_STARTUP);
 80056c8:	2000      	movs	r0, #0
 80056ca:	f7ff fd5f 	bl	800518c <SetStateApp>
	EventSchedulerAdd(EVENT_APP_INIT);
 80056ce:	2001      	movs	r0, #1
 80056d0:	f7fc feb6 	bl	8002440 <EventSchedulerAdd>

	while(1)
	{
		processTimerScheduler();
 80056d4:	f7fd f812 	bl	80026fc <processTimerScheduler>
		processEventScheduler();
 80056d8:	f7fc fec8 	bl	800246c <processEventScheduler>
		processTimerScheduler();
 80056dc:	e7fa      	b.n	80056d4 <main+0x14>
	...

080056e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80056e0:	480d      	ldr	r0, [pc, #52]	; (8005718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80056e4:	f7fa fd76 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056e8:	480c      	ldr	r0, [pc, #48]	; (800571c <LoopForever+0x6>)
  ldr r1, =_edata
 80056ea:	490d      	ldr	r1, [pc, #52]	; (8005720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056ec:	4a0d      	ldr	r2, [pc, #52]	; (8005724 <LoopForever+0xe>)
  movs r3, #0
 80056ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056f0:	e002      	b.n	80056f8 <LoopCopyDataInit>

080056f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056f6:	3304      	adds	r3, #4

080056f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056fc:	d3f9      	bcc.n	80056f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056fe:	4a0a      	ldr	r2, [pc, #40]	; (8005728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005700:	4c0a      	ldr	r4, [pc, #40]	; (800572c <LoopForever+0x16>)
  movs r3, #0
 8005702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005704:	e001      	b.n	800570a <LoopFillZerobss>

08005706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005708:	3204      	adds	r2, #4

0800570a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800570a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800570c:	d3fb      	bcc.n	8005706 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800570e:	f000 f811 	bl	8005734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005712:	f7ff ffd5 	bl	80056c0 <main>

08005716 <LoopForever>:

LoopForever:
  b LoopForever
 8005716:	e7fe      	b.n	8005716 <LoopForever>
  ldr   r0, =_estack
 8005718:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800571c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005720:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8005724:	080062b4 	.word	0x080062b4
  ldr r2, =_sbss
 8005728:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800572c:	20001494 	.word	0x20001494

08005730 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005730:	e7fe      	b.n	8005730 <ADC_IRQHandler>
	...

08005734 <__libc_init_array>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	4d0d      	ldr	r5, [pc, #52]	; (800576c <__libc_init_array+0x38>)
 8005738:	4c0d      	ldr	r4, [pc, #52]	; (8005770 <__libc_init_array+0x3c>)
 800573a:	1b64      	subs	r4, r4, r5
 800573c:	10a4      	asrs	r4, r4, #2
 800573e:	2600      	movs	r6, #0
 8005740:	42a6      	cmp	r6, r4
 8005742:	d109      	bne.n	8005758 <__libc_init_array+0x24>
 8005744:	4d0b      	ldr	r5, [pc, #44]	; (8005774 <__libc_init_array+0x40>)
 8005746:	4c0c      	ldr	r4, [pc, #48]	; (8005778 <__libc_init_array+0x44>)
 8005748:	f000 f818 	bl	800577c <_init>
 800574c:	1b64      	subs	r4, r4, r5
 800574e:	10a4      	asrs	r4, r4, #2
 8005750:	2600      	movs	r6, #0
 8005752:	42a6      	cmp	r6, r4
 8005754:	d105      	bne.n	8005762 <__libc_init_array+0x2e>
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	f855 3b04 	ldr.w	r3, [r5], #4
 800575c:	4798      	blx	r3
 800575e:	3601      	adds	r6, #1
 8005760:	e7ee      	b.n	8005740 <__libc_init_array+0xc>
 8005762:	f855 3b04 	ldr.w	r3, [r5], #4
 8005766:	4798      	blx	r3
 8005768:	3601      	adds	r6, #1
 800576a:	e7f2      	b.n	8005752 <__libc_init_array+0x1e>
 800576c:	080062ac 	.word	0x080062ac
 8005770:	080062ac 	.word	0x080062ac
 8005774:	080062ac 	.word	0x080062ac
 8005778:	080062b0 	.word	0x080062b0

0800577c <_init>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr

08005788 <_fini>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr
